/// Przerwanie od czujnikow linii

bool lineDetected = false;

if(lineDetCheck(detList[i])){
    /// Front Left and Right
    if (detList[0]==1 && detList[1]==1 && !lineDetected){
        lineDetected = true;
        /// Wycofaj
        /// Zmiana kierunku ruchu
    }
    /// Front Left
    else if (detList[0] == 1 && !lineDetected){
        lineDetected = true
        /// Zmiana kierunku ruchu
        /// Obrót w lewo
    }
    else if (detList[1] == 1 && !lineDetected){
        lineDetected = true;
        /// Zmiana kierunku ruchu
        /// Obrót w prawo
    }
}

enum Detector{
    DetFrontLeft = 0,
    DetFrontRight = 1,
    DetRearLeft = 2,
    DetRearRight = 3
};

enum Direction{
    Forward,
    Backward
};

enum Motor{
    Left = 0,
    Right = 1
};

enum Sharps{
    ShFrontLeft = 0,
    ShFrontRight = 1,
    ShRearLeft = 2,
    ShRearRight = 3
};

Detector curDet = {
    DetFrontLeft,
    DetFrontRight,
    DetRearLeft,
    DetRearRight}

Direction curDir = {    
    Forward,
    Backward
};

Motor curMot = {
    Left = 0,
    Right = 1
}

Sharps curSharp{
    ShFrontLeft,
    ShFrontRight,
    ShRearLeft,
    ShRearRight
}

void switchDirection(void){
    if (curDet[0] == DetFrontLeft){
        curDet[0] = DetRearRight;
        curDet[1] = DetRearLeft;
        curDet[2] = DetFrontRight;
        curDet[3] = DetFrontLeft;
    }
    else if (curDet[0] == DetRearRight){
        curDet[0] = DetFrontLeft;
        curDet[1] = DetFrontRight;
        curDet[2] = DetRearLeft;
        curDet[3] = DetRearRight;
    }

    if (curDir[0] == Forward){
        curDir[0] == Backward;
        curDir[1] == Forward;
    }
    else if (curDir[0] == Backward){
        curDir[0] = Forward;
        curDir[1] = Backward;
    }

    if (curMot[0] == Left){
        curMot[0] = Right;
        curMot[1] = Left;   
    }
    else if (curMot[0] == Right){
        curMot[0] = Left;
        curMot[1] = Right;      
    }

    if (curSharp[0] == ShFrontLeft){
        urSharp[0] = ShRearRight;
        urSharp[1] = ShRearLeft;
        urSharp[2] = ShFrontRight;
        urSharp[3] = ShFrontLeft;
    }
    else if (curSharp[0] == ShRearRight){
        urSharp[0] = ShFrontLeft;
        urSharp[1] = ShFrontRight;
        urSharp[2] = ShRearLeft;
        urSharp[3] = ShRearRight;
    }
}


