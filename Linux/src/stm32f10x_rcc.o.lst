   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.align	2
  42              	ADCPrescTable:
  43 0010 02       		.byte	2
  44 0011 04       		.byte	4
  45 0012 06       		.byte	6
  46 0013 08       		.byte	8
  47              		.text
  48              		.align	2
  49              		.global	RCC_DeInit
  50              		.thumb
  51              		.thumb_func
  53              	RCC_DeInit:
  54              	.LFB29:
  55              		.file 1 "../src/stm32f10x_rcc.c"
   1:../src/stm32f10x_rcc.c **** /**
   2:../src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../src/stm32f10x_rcc.c ****   * @attention
  10:../src/stm32f10x_rcc.c ****   *
  11:../src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../src/stm32f10x_rcc.c ****   *
  18:../src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../src/stm32f10x_rcc.c ****   */
  21:../src/stm32f10x_rcc.c **** 
  22:../src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../src/stm32f10x_rcc.c **** #include "stm32f10x_conf.h"
  25:../src/stm32f10x_rcc.c **** 
  26:../src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../src/stm32f10x_rcc.c ****   * @{
  28:../src/stm32f10x_rcc.c ****   */
  29:../src/stm32f10x_rcc.c **** 
  30:../src/stm32f10x_rcc.c **** /** @defgroup RCC 
  31:../src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  32:../src/stm32f10x_rcc.c ****   * @{
  33:../src/stm32f10x_rcc.c ****   */ 
  34:../src/stm32f10x_rcc.c **** 
  35:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  36:../src/stm32f10x_rcc.c ****   * @{
  37:../src/stm32f10x_rcc.c ****   */
  38:../src/stm32f10x_rcc.c **** 
  39:../src/stm32f10x_rcc.c **** /**
  40:../src/stm32f10x_rcc.c ****   * @}
  41:../src/stm32f10x_rcc.c ****   */
  42:../src/stm32f10x_rcc.c **** 
  43:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  44:../src/stm32f10x_rcc.c ****   * @{
  45:../src/stm32f10x_rcc.c ****   */
  46:../src/stm32f10x_rcc.c **** 
  47:../src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  48:../src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  49:../src/stm32f10x_rcc.c **** 
  50:../src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  51:../src/stm32f10x_rcc.c **** 
  52:../src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  53:../src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  54:../src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  55:../src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  56:../src/stm32f10x_rcc.c **** 
  57:../src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  58:../src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  59:../src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  60:../src/stm32f10x_rcc.c **** 
  61:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  62:../src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  63:../src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  64:../src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  65:../src/stm32f10x_rcc.c **** 
  66:../src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  67:../src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  68:../src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  69:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  70:../src/stm32f10x_rcc.c **** 
  71:../src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  72:../src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  73:../src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  74:../src/stm32f10x_rcc.c **** 
  75:../src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  76:../src/stm32f10x_rcc.c **** 
  77:../src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  78:../src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  79:../src/stm32f10x_rcc.c **** 
  80:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  81:../src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  82:../src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  83:../src/stm32f10x_rcc.c **** #else
  84:../src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  85:../src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  86:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  87:../src/stm32f10x_rcc.c **** 
  88:../src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  89:../src/stm32f10x_rcc.c **** 
  90:../src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  91:../src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  92:../src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  93:../src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  94:../src/stm32f10x_rcc.c **** 
  95:../src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  96:../src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  97:../src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  98:../src/stm32f10x_rcc.c **** 
  99:../src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
 100:../src/stm32f10x_rcc.c **** 
 101:../src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 102:../src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 103:../src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 104:../src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../src/stm32f10x_rcc.c **** 
 106:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 107:../src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 108:../src/stm32f10x_rcc.c **** 
 109:../src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 110:../src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 111:../src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 112:../src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 113:../src/stm32f10x_rcc.c **** 
 114:../src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 115:../src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 116:../src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 117:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 118:../src/stm32f10x_rcc.c **** 
 119:../src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:../src/stm32f10x_rcc.c **** 
 121:../src/stm32f10x_rcc.c **** /* CR register bit mask */
 122:../src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 123:../src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 124:../src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 125:../src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 126:../src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 127:../src/stm32f10x_rcc.c **** 
 128:../src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 129:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 130:../src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 131:../src/stm32f10x_rcc.c **** #else
 132:../src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 133:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 134:../src/stm32f10x_rcc.c **** 
 135:../src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 136:../src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 137:../src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 138:../src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 139:../src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 140:../src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 141:../src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 142:../src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 143:../src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 144:../src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 145:../src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 146:../src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 147:../src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 148:../src/stm32f10x_rcc.c **** 
 149:../src/stm32f10x_rcc.c **** /* CSR register bit mask */
 150:../src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 151:../src/stm32f10x_rcc.c **** 
 152:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 153:../src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 154:../src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 155:../src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 156:../src/stm32f10x_rcc.c **** #endif
 157:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 158:../src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 159:../src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 160:../src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 161:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 162:../src/stm32f10x_rcc.c **** 
 163:../src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 164:../src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 165:../src/stm32f10x_rcc.c **** 
 166:../src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 167:../src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 168:../src/stm32f10x_rcc.c **** 
 169:../src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 170:../src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 171:../src/stm32f10x_rcc.c **** 
 172:../src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 173:../src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 174:../src/stm32f10x_rcc.c **** 
 175:../src/stm32f10x_rcc.c **** /* BDCR register base address */
 176:../src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 177:../src/stm32f10x_rcc.c **** 
 178:../src/stm32f10x_rcc.c **** /**
 179:../src/stm32f10x_rcc.c ****   * @}
 180:../src/stm32f10x_rcc.c ****   */ 
 181:../src/stm32f10x_rcc.c **** 
 182:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 183:../src/stm32f10x_rcc.c ****   * @{
 184:../src/stm32f10x_rcc.c ****   */ 
 185:../src/stm32f10x_rcc.c **** 
 186:../src/stm32f10x_rcc.c **** /**
 187:../src/stm32f10x_rcc.c ****   * @}
 188:../src/stm32f10x_rcc.c ****   */ 
 189:../src/stm32f10x_rcc.c **** 
 190:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 191:../src/stm32f10x_rcc.c ****   * @{
 192:../src/stm32f10x_rcc.c ****   */ 
 193:../src/stm32f10x_rcc.c **** 
 194:../src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 195:../src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 196:../src/stm32f10x_rcc.c **** 
 197:../src/stm32f10x_rcc.c **** /**
 198:../src/stm32f10x_rcc.c ****   * @}
 199:../src/stm32f10x_rcc.c ****   */
 200:../src/stm32f10x_rcc.c **** 
 201:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 202:../src/stm32f10x_rcc.c ****   * @{
 203:../src/stm32f10x_rcc.c ****   */
 204:../src/stm32f10x_rcc.c **** 
 205:../src/stm32f10x_rcc.c **** /**
 206:../src/stm32f10x_rcc.c ****   * @}
 207:../src/stm32f10x_rcc.c ****   */
 208:../src/stm32f10x_rcc.c **** 
 209:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 210:../src/stm32f10x_rcc.c ****   * @{
 211:../src/stm32f10x_rcc.c ****   */
 212:../src/stm32f10x_rcc.c **** 
 213:../src/stm32f10x_rcc.c **** /**
 214:../src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 215:../src/stm32f10x_rcc.c ****   * @param  None
 216:../src/stm32f10x_rcc.c ****   * @retval None
 217:../src/stm32f10x_rcc.c ****   */
 218:../src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 219:../src/stm32f10x_rcc.c **** {
  56              		.loc 1 219 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 7, -4
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI1:
  67              		.cfi_def_cfa_register 7
 220:../src/stm32f10x_rcc.c ****   /* Set HSION bit */
 221:../src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  68              		.loc 1 221 0
  69 0004 4FF48053 		mov	r3, #4096
  70 0008 C4F20203 		movt	r3, 16386
  71 000c 4FF48052 		mov	r2, #4096
  72 0010 C4F20202 		movt	r2, 16386
  73 0014 1268     		ldr	r2, [r2, #0]
  74 0016 42F00102 		orr	r2, r2, #1
  75 001a 1A60     		str	r2, [r3, #0]
 222:../src/stm32f10x_rcc.c **** 
 223:../src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 224:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 225:../src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  76              		.loc 1 225 0
  77 001c 4FF48052 		mov	r2, #4096
  78 0020 C4F20202 		movt	r2, 16386
  79 0024 4FF48053 		mov	r3, #4096
  80 0028 C4F20203 		movt	r3, 16386
  81 002c 5B68     		ldr	r3, [r3, #4]
  82 002e 1946     		mov	r1, r3
  83 0030 4FF00003 		mov	r3, #0
  84 0034 CFF6FF03 		movt	r3, 63743
  85 0038 0B40     		ands	r3, r3, r1
  86 003a 5360     		str	r3, [r2, #4]
 226:../src/stm32f10x_rcc.c **** #else
 227:../src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 228:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 229:../src/stm32f10x_rcc.c ****   
 230:../src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 231:../src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  87              		.loc 1 231 0
  88 003c 4FF48053 		mov	r3, #4096
  89 0040 C4F20203 		movt	r3, 16386
  90 0044 4FF48052 		mov	r2, #4096
  91 0048 C4F20202 		movt	r2, 16386
  92 004c 1268     		ldr	r2, [r2, #0]
  93 004e 22F08472 		bic	r2, r2, #17301504
  94 0052 22F48032 		bic	r2, r2, #65536
  95 0056 1A60     		str	r2, [r3, #0]
 232:../src/stm32f10x_rcc.c **** 
 233:../src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 234:../src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  96              		.loc 1 234 0
  97 0058 4FF48053 		mov	r3, #4096
  98 005c C4F20203 		movt	r3, 16386
  99 0060 4FF48052 		mov	r2, #4096
 100 0064 C4F20202 		movt	r2, 16386
 101 0068 1268     		ldr	r2, [r2, #0]
 102 006a 22F48022 		bic	r2, r2, #262144
 103 006e 1A60     		str	r2, [r3, #0]
 235:../src/stm32f10x_rcc.c **** 
 236:../src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 237:../src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 104              		.loc 1 237 0
 105 0070 4FF48053 		mov	r3, #4096
 106 0074 C4F20203 		movt	r3, 16386
 107 0078 4FF48052 		mov	r2, #4096
 108 007c C4F20202 		movt	r2, 16386
 109 0080 5268     		ldr	r2, [r2, #4]
 110 0082 22F4FE02 		bic	r2, r2, #8323072
 111 0086 5A60     		str	r2, [r3, #4]
 238:../src/stm32f10x_rcc.c **** 
 239:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 240:../src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 241:../src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 242:../src/stm32f10x_rcc.c **** 
 243:../src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 244:../src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 245:../src/stm32f10x_rcc.c **** 
 246:../src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 247:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 248:../src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 249:../src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 250:../src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 251:../src/stm32f10x_rcc.c **** 
 252:../src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 253:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 254:../src/stm32f10x_rcc.c **** #else
 255:../src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 256:../src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 112              		.loc 1 256 0
 113 0088 4FF48053 		mov	r3, #4096
 114 008c C4F20203 		movt	r3, 16386
 115 0090 4FF41F02 		mov	r2, #10420224
 116 0094 9A60     		str	r2, [r3, #8]
 257:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 258:../src/stm32f10x_rcc.c **** 
 259:../src/stm32f10x_rcc.c **** }
 117              		.loc 1 259 0
 118 0096 BD46     		mov	sp, r7
 119 0098 80BC     		pop	{r7}
 120 009a 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE29:
 124              		.align	2
 125              		.global	RCC_HSEConfig
 126              		.thumb
 127              		.thumb_func
 129              	RCC_HSEConfig:
 130              	.LFB30:
 260:../src/stm32f10x_rcc.c **** 
 261:../src/stm32f10x_rcc.c **** /**
 262:../src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 263:../src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 264:../src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 265:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 266:../src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 267:../src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 268:../src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 269:../src/stm32f10x_rcc.c ****   * @retval None
 270:../src/stm32f10x_rcc.c ****   */
 271:../src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 272:../src/stm32f10x_rcc.c **** {
 131              		.loc 1 272 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136 009c 80B4     		push	{r7}
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 4
 139              		.cfi_offset 7, -4
 140 009e 83B0     		sub	sp, sp, #12
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 16
 143 00a0 00AF     		add	r7, sp, #0
 144              	.LCFI4:
 145              		.cfi_def_cfa_register 7
 146 00a2 7860     		str	r0, [r7, #4]
 273:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 274:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 275:../src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 276:../src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 277:../src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 147              		.loc 1 277 0
 148 00a4 4FF48053 		mov	r3, #4096
 149 00a8 C4F20203 		movt	r3, 16386
 150 00ac 4FF48052 		mov	r2, #4096
 151 00b0 C4F20202 		movt	r2, 16386
 152 00b4 1268     		ldr	r2, [r2, #0]
 153 00b6 22F48032 		bic	r2, r2, #65536
 154 00ba 1A60     		str	r2, [r3, #0]
 278:../src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 279:../src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 155              		.loc 1 279 0
 156 00bc 4FF48053 		mov	r3, #4096
 157 00c0 C4F20203 		movt	r3, 16386
 158 00c4 4FF48052 		mov	r2, #4096
 159 00c8 C4F20202 		movt	r2, 16386
 160 00cc 1268     		ldr	r2, [r2, #0]
 161 00ce 22F48022 		bic	r2, r2, #262144
 162 00d2 1A60     		str	r2, [r3, #0]
 280:../src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 281:../src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 163              		.loc 1 281 0
 164 00d4 7B68     		ldr	r3, [r7, #4]
 165 00d6 B3F5803F 		cmp	r3, #65536
 166 00da 03D0     		beq	.L4
 167 00dc B3F5802F 		cmp	r3, #262144
 168 00e0 0DD0     		beq	.L5
 169 00e2 19E0     		b	.L7
 170              	.L4:
 282:../src/stm32f10x_rcc.c ****   {
 283:../src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 284:../src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 285:../src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 171              		.loc 1 285 0
 172 00e4 4FF48053 		mov	r3, #4096
 173 00e8 C4F20203 		movt	r3, 16386
 174 00ec 4FF48052 		mov	r2, #4096
 175 00f0 C4F20202 		movt	r2, 16386
 176 00f4 1268     		ldr	r2, [r2, #0]
 177 00f6 42F48032 		orr	r2, r2, #65536
 178 00fa 1A60     		str	r2, [r3, #0]
 286:../src/stm32f10x_rcc.c ****       break;
 179              		.loc 1 286 0
 180 00fc 0DE0     		b	.L2
 181              	.L5:
 287:../src/stm32f10x_rcc.c ****       
 288:../src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 289:../src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 290:../src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 182              		.loc 1 290 0
 183 00fe 4FF48053 		mov	r3, #4096
 184 0102 C4F20203 		movt	r3, 16386
 185 0106 4FF48052 		mov	r2, #4096
 186 010a C4F20202 		movt	r2, 16386
 187 010e 1268     		ldr	r2, [r2, #0]
 188 0110 42F4A022 		orr	r2, r2, #327680
 189 0114 1A60     		str	r2, [r3, #0]
 291:../src/stm32f10x_rcc.c ****       break;
 190              		.loc 1 291 0
 191 0116 00E0     		b	.L2
 192              	.L7:
 292:../src/stm32f10x_rcc.c ****       
 293:../src/stm32f10x_rcc.c ****     default:
 294:../src/stm32f10x_rcc.c ****       break;
 193              		.loc 1 294 0
 194 0118 00BF     		nop
 195              	.L2:
 295:../src/stm32f10x_rcc.c ****   }
 296:../src/stm32f10x_rcc.c **** }
 196              		.loc 1 296 0
 197 011a 07F10C07 		add	r7, r7, #12
 198 011e BD46     		mov	sp, r7
 199 0120 80BC     		pop	{r7}
 200 0122 7047     		bx	lr
 201              		.cfi_endproc
 202              	.LFE30:
 204              		.align	2
 205              		.global	RCC_WaitForHSEStartUp
 206              		.thumb
 207              		.thumb_func
 209              	RCC_WaitForHSEStartUp:
 210              	.LFB31:
 297:../src/stm32f10x_rcc.c **** 
 298:../src/stm32f10x_rcc.c **** /**
 299:../src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 300:../src/stm32f10x_rcc.c ****   * @param  None
 301:../src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 302:../src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 303:../src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 304:../src/stm32f10x_rcc.c ****   */
 305:../src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 306:../src/stm32f10x_rcc.c **** {
 211              		.loc 1 306 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 8
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0124 80B5     		push	{r7, lr}
 216              	.LCFI5:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 14, -4
 219              		.cfi_offset 7, -8
 220 0126 82B0     		sub	sp, sp, #8
 221              	.LCFI6:
 222              		.cfi_def_cfa_offset 16
 223 0128 00AF     		add	r7, sp, #0
 224              	.LCFI7:
 225              		.cfi_def_cfa_register 7
 307:../src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 226              		.loc 1 307 0
 227 012a 4FF00003 		mov	r3, #0
 228 012e 3B60     		str	r3, [r7, #0]
 308:../src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 229              		.loc 1 308 0
 230 0130 4FF00003 		mov	r3, #0
 231 0134 FB71     		strb	r3, [r7, #7]
 309:../src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 232              		.loc 1 309 0
 233 0136 4FF00003 		mov	r3, #0
 234 013a BB71     		strb	r3, [r7, #6]
 235              	.L10:
 310:../src/stm32f10x_rcc.c ****   
 311:../src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 312:../src/stm32f10x_rcc.c ****   do
 313:../src/stm32f10x_rcc.c ****   {
 314:../src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 236              		.loc 1 314 0 discriminator 1
 237 013c 4FF03100 		mov	r0, #49
 238 0140 FFF7FEFF 		bl	RCC_GetFlagStatus
 239 0144 0346     		mov	r3, r0
 240 0146 BB71     		strb	r3, [r7, #6]
 315:../src/stm32f10x_rcc.c ****     StartUpCounter++;  
 241              		.loc 1 315 0 discriminator 1
 242 0148 3B68     		ldr	r3, [r7, #0]
 243 014a 03F10103 		add	r3, r3, #1
 244 014e 3B60     		str	r3, [r7, #0]
 316:../src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 245              		.loc 1 316 0 discriminator 1
 246 0150 3B68     		ldr	r3, [r7, #0]
 247 0152 B3F5A06F 		cmp	r3, #1280
 248 0156 02D0     		beq	.L9
 249 0158 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 250 015a 002B     		cmp	r3, #0
 251 015c EED0     		beq	.L10
 252              	.L9:
 317:../src/stm32f10x_rcc.c ****   
 318:../src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 253              		.loc 1 318 0
 254 015e 4FF03100 		mov	r0, #49
 255 0162 FFF7FEFF 		bl	RCC_GetFlagStatus
 256 0166 0346     		mov	r3, r0
 257 0168 002B     		cmp	r3, #0
 258 016a 03D0     		beq	.L11
 319:../src/stm32f10x_rcc.c ****   {
 320:../src/stm32f10x_rcc.c ****     status = SUCCESS;
 259              		.loc 1 320 0
 260 016c 4FF00103 		mov	r3, #1
 261 0170 FB71     		strb	r3, [r7, #7]
 262 0172 02E0     		b	.L12
 263              	.L11:
 321:../src/stm32f10x_rcc.c ****   }
 322:../src/stm32f10x_rcc.c ****   else
 323:../src/stm32f10x_rcc.c ****   {
 324:../src/stm32f10x_rcc.c ****     status = ERROR;
 264              		.loc 1 324 0
 265 0174 4FF00003 		mov	r3, #0
 266 0178 FB71     		strb	r3, [r7, #7]
 267              	.L12:
 325:../src/stm32f10x_rcc.c ****   }  
 326:../src/stm32f10x_rcc.c ****   return (status);
 268              		.loc 1 326 0
 269 017a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 327:../src/stm32f10x_rcc.c **** }
 270              		.loc 1 327 0
 271 017c 1846     		mov	r0, r3
 272 017e 07F10807 		add	r7, r7, #8
 273 0182 BD46     		mov	sp, r7
 274 0184 80BD     		pop	{r7, pc}
 275              		.cfi_endproc
 276              	.LFE31:
 278 0186 00BF     		.align	2
 279              		.global	RCC_AdjustHSICalibrationValue
 280              		.thumb
 281              		.thumb_func
 283              	RCC_AdjustHSICalibrationValue:
 284              	.LFB32:
 328:../src/stm32f10x_rcc.c **** 
 329:../src/stm32f10x_rcc.c **** /**
 330:../src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 331:../src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 332:../src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 333:../src/stm32f10x_rcc.c ****   * @retval None
 334:../src/stm32f10x_rcc.c ****   */
 335:../src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 336:../src/stm32f10x_rcc.c **** {
 285              		.loc 1 336 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 16
 288              		@ frame_needed = 1, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290 0188 80B4     		push	{r7}
 291              	.LCFI8:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 7, -4
 294 018a 85B0     		sub	sp, sp, #20
 295              	.LCFI9:
 296              		.cfi_def_cfa_offset 24
 297 018c 00AF     		add	r7, sp, #0
 298              	.LCFI10:
 299              		.cfi_def_cfa_register 7
 300 018e 0346     		mov	r3, r0
 301 0190 FB71     		strb	r3, [r7, #7]
 337:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 302              		.loc 1 337 0
 303 0192 4FF00003 		mov	r3, #0
 304 0196 FB60     		str	r3, [r7, #12]
 338:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 339:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 340:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 305              		.loc 1 340 0
 306 0198 4FF48053 		mov	r3, #4096
 307 019c C4F20203 		movt	r3, 16386
 308 01a0 1B68     		ldr	r3, [r3, #0]
 309 01a2 FB60     		str	r3, [r7, #12]
 341:../src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 342:../src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 310              		.loc 1 342 0
 311 01a4 FB68     		ldr	r3, [r7, #12]
 312 01a6 23F0F803 		bic	r3, r3, #248
 313 01aa FB60     		str	r3, [r7, #12]
 343:../src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 344:../src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 314              		.loc 1 344 0
 315 01ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 316 01ae 4FEAC303 		lsl	r3, r3, #3
 317 01b2 FA68     		ldr	r2, [r7, #12]
 318 01b4 1343     		orrs	r3, r3, r2
 319 01b6 FB60     		str	r3, [r7, #12]
 345:../src/stm32f10x_rcc.c ****   /* Store the new value */
 346:../src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 320              		.loc 1 346 0
 321 01b8 4FF48053 		mov	r3, #4096
 322 01bc C4F20203 		movt	r3, 16386
 323 01c0 FA68     		ldr	r2, [r7, #12]
 324 01c2 1A60     		str	r2, [r3, #0]
 347:../src/stm32f10x_rcc.c **** }
 325              		.loc 1 347 0
 326 01c4 07F11407 		add	r7, r7, #20
 327 01c8 BD46     		mov	sp, r7
 328 01ca 80BC     		pop	{r7}
 329 01cc 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE32:
 333 01ce 00BF     		.align	2
 334              		.global	RCC_HSICmd
 335              		.thumb
 336              		.thumb_func
 338              	RCC_HSICmd:
 339              	.LFB33:
 348:../src/stm32f10x_rcc.c **** 
 349:../src/stm32f10x_rcc.c **** /**
 350:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 351:../src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 352:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 353:../src/stm32f10x_rcc.c ****   * @retval None
 354:../src/stm32f10x_rcc.c ****   */
 355:../src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 356:../src/stm32f10x_rcc.c **** {
 340              		.loc 1 356 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 8
 343              		@ frame_needed = 1, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345 01d0 80B4     		push	{r7}
 346              	.LCFI11:
 347              		.cfi_def_cfa_offset 4
 348              		.cfi_offset 7, -4
 349 01d2 83B0     		sub	sp, sp, #12
 350              	.LCFI12:
 351              		.cfi_def_cfa_offset 16
 352 01d4 00AF     		add	r7, sp, #0
 353              	.LCFI13:
 354              		.cfi_def_cfa_register 7
 355 01d6 0346     		mov	r3, r0
 356 01d8 FB71     		strb	r3, [r7, #7]
 357:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 358:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 357              		.loc 1 359 0
 358 01da 4FF00003 		mov	r3, #0
 359 01de C4F24223 		movt	r3, 16962
 360 01e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 361 01e4 1A60     		str	r2, [r3, #0]
 360:../src/stm32f10x_rcc.c **** }
 362              		.loc 1 360 0
 363 01e6 07F10C07 		add	r7, r7, #12
 364 01ea BD46     		mov	sp, r7
 365 01ec 80BC     		pop	{r7}
 366 01ee 7047     		bx	lr
 367              		.cfi_endproc
 368              	.LFE33:
 370              		.align	2
 371              		.global	RCC_PLLConfig
 372              		.thumb
 373              		.thumb_func
 375              	RCC_PLLConfig:
 376              	.LFB34:
 361:../src/stm32f10x_rcc.c **** 
 362:../src/stm32f10x_rcc.c **** /**
 363:../src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 364:../src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 365:../src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 366:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 367:../src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 368:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 369:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 370:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 371:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 372:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 373:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 374:../src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 375:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 376:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 377:../src/stm32f10x_rcc.c ****   * @retval None
 378:../src/stm32f10x_rcc.c ****   */
 379:../src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 380:../src/stm32f10x_rcc.c **** {
 377              		.loc 1 380 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 16
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382 01f0 80B4     		push	{r7}
 383              	.LCFI14:
 384              		.cfi_def_cfa_offset 4
 385              		.cfi_offset 7, -4
 386 01f2 85B0     		sub	sp, sp, #20
 387              	.LCFI15:
 388              		.cfi_def_cfa_offset 24
 389 01f4 00AF     		add	r7, sp, #0
 390              	.LCFI16:
 391              		.cfi_def_cfa_register 7
 392 01f6 7860     		str	r0, [r7, #4]
 393 01f8 3960     		str	r1, [r7, #0]
 381:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 394              		.loc 1 381 0
 395 01fa 4FF00003 		mov	r3, #0
 396 01fe FB60     		str	r3, [r7, #12]
 382:../src/stm32f10x_rcc.c **** 
 383:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 384:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 385:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 386:../src/stm32f10x_rcc.c **** 
 387:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 397              		.loc 1 387 0
 398 0200 4FF48053 		mov	r3, #4096
 399 0204 C4F20203 		movt	r3, 16386
 400 0208 5B68     		ldr	r3, [r3, #4]
 401 020a FB60     		str	r3, [r7, #12]
 388:../src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 389:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 402              		.loc 1 389 0
 403 020c FB68     		ldr	r3, [r7, #12]
 404 020e 23F47C13 		bic	r3, r3, #4128768
 405 0212 FB60     		str	r3, [r7, #12]
 390:../src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 391:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 406              		.loc 1 391 0
 407 0214 7A68     		ldr	r2, [r7, #4]
 408 0216 3B68     		ldr	r3, [r7, #0]
 409 0218 1343     		orrs	r3, r3, r2
 410 021a FA68     		ldr	r2, [r7, #12]
 411 021c 1343     		orrs	r3, r3, r2
 412 021e FB60     		str	r3, [r7, #12]
 392:../src/stm32f10x_rcc.c ****   /* Store the new value */
 393:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 413              		.loc 1 393 0
 414 0220 4FF48053 		mov	r3, #4096
 415 0224 C4F20203 		movt	r3, 16386
 416 0228 FA68     		ldr	r2, [r7, #12]
 417 022a 5A60     		str	r2, [r3, #4]
 394:../src/stm32f10x_rcc.c **** }
 418              		.loc 1 394 0
 419 022c 07F11407 		add	r7, r7, #20
 420 0230 BD46     		mov	sp, r7
 421 0232 80BC     		pop	{r7}
 422 0234 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE34:
 426 0236 00BF     		.align	2
 427              		.global	RCC_PLLCmd
 428              		.thumb
 429              		.thumb_func
 431              	RCC_PLLCmd:
 432              	.LFB35:
 395:../src/stm32f10x_rcc.c **** 
 396:../src/stm32f10x_rcc.c **** /**
 397:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 398:../src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 399:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 400:../src/stm32f10x_rcc.c ****   * @retval None
 401:../src/stm32f10x_rcc.c ****   */
 402:../src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 403:../src/stm32f10x_rcc.c **** {
 433              		.loc 1 403 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 8
 436              		@ frame_needed = 1, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 438 0238 80B4     		push	{r7}
 439              	.LCFI17:
 440              		.cfi_def_cfa_offset 4
 441              		.cfi_offset 7, -4
 442 023a 83B0     		sub	sp, sp, #12
 443              	.LCFI18:
 444              		.cfi_def_cfa_offset 16
 445 023c 00AF     		add	r7, sp, #0
 446              	.LCFI19:
 447              		.cfi_def_cfa_register 7
 448 023e 0346     		mov	r3, r0
 449 0240 FB71     		strb	r3, [r7, #7]
 404:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 405:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 406:../src/stm32f10x_rcc.c **** 
 407:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 450              		.loc 1 407 0
 451 0242 4FF06003 		mov	r3, #96
 452 0246 C4F24223 		movt	r3, 16962
 453 024a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 454 024c 1A60     		str	r2, [r3, #0]
 408:../src/stm32f10x_rcc.c **** }
 455              		.loc 1 408 0
 456 024e 07F10C07 		add	r7, r7, #12
 457 0252 BD46     		mov	sp, r7
 458 0254 80BC     		pop	{r7}
 459 0256 7047     		bx	lr
 460              		.cfi_endproc
 461              	.LFE35:
 463              		.align	2
 464              		.global	RCC_SYSCLKConfig
 465              		.thumb
 466              		.thumb_func
 468              	RCC_SYSCLKConfig:
 469              	.LFB36:
 409:../src/stm32f10x_rcc.c **** 
 410:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 411:../src/stm32f10x_rcc.c **** /**
 412:../src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 413:../src/stm32f10x_rcc.c ****   * @note 
 414:../src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 415:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 416:../src/stm32f10x_rcc.c ****   *     devices.
 417:../src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 418:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 419:../src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 420:../src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 421:../src/stm32f10x_rcc.c ****   * @note 
 422:../src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 423:../src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 424:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 425:../src/stm32f10x_rcc.c ****   * @retval None
 426:../src/stm32f10x_rcc.c ****   */
 427:../src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 428:../src/stm32f10x_rcc.c **** {
 429:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 430:../src/stm32f10x_rcc.c ****   
 431:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 432:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 433:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 434:../src/stm32f10x_rcc.c **** 
 435:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 436:../src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 437:../src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 438:../src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 439:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 440:../src/stm32f10x_rcc.c ****   /* Store the new value */
 441:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 442:../src/stm32f10x_rcc.c **** }
 443:../src/stm32f10x_rcc.c **** #endif
 444:../src/stm32f10x_rcc.c **** 
 445:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 446:../src/stm32f10x_rcc.c **** /**
 447:../src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 448:../src/stm32f10x_rcc.c ****   * @note 
 449:../src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 450:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 451:../src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 452:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 453:../src/stm32f10x_rcc.c ****   * @retval None
 454:../src/stm32f10x_rcc.c ****   */
 455:../src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 456:../src/stm32f10x_rcc.c **** {
 457:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 458:../src/stm32f10x_rcc.c **** 
 459:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 460:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 461:../src/stm32f10x_rcc.c **** 
 462:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 463:../src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 464:../src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 465:../src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 466:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 467:../src/stm32f10x_rcc.c ****   /* Store the new value */
 468:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 469:../src/stm32f10x_rcc.c **** }
 470:../src/stm32f10x_rcc.c **** 
 471:../src/stm32f10x_rcc.c **** /**
 472:../src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 473:../src/stm32f10x_rcc.c ****   * @note
 474:../src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 475:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 476:../src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 477:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 478:../src/stm32f10x_rcc.c ****   * @retval None
 479:../src/stm32f10x_rcc.c ****   */
 480:../src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 481:../src/stm32f10x_rcc.c **** {
 482:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 483:../src/stm32f10x_rcc.c **** 
 484:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 485:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 486:../src/stm32f10x_rcc.c **** 
 487:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 488:../src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 489:../src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 490:../src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 491:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 492:../src/stm32f10x_rcc.c ****   /* Store the new value */
 493:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 494:../src/stm32f10x_rcc.c **** }
 495:../src/stm32f10x_rcc.c **** 
 496:../src/stm32f10x_rcc.c **** 
 497:../src/stm32f10x_rcc.c **** /**
 498:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 499:../src/stm32f10x_rcc.c ****   * @note 
 500:../src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 501:../src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 502:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 503:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 504:../src/stm32f10x_rcc.c ****   * @retval None
 505:../src/stm32f10x_rcc.c ****   */
 506:../src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 507:../src/stm32f10x_rcc.c **** {
 508:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 509:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 510:../src/stm32f10x_rcc.c **** 
 511:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 512:../src/stm32f10x_rcc.c **** }
 513:../src/stm32f10x_rcc.c **** 
 514:../src/stm32f10x_rcc.c **** 
 515:../src/stm32f10x_rcc.c **** /**
 516:../src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 517:../src/stm32f10x_rcc.c ****   * @note 
 518:../src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 519:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 520:../src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 521:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 522:../src/stm32f10x_rcc.c ****   * @retval None
 523:../src/stm32f10x_rcc.c ****   */
 524:../src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 525:../src/stm32f10x_rcc.c **** {
 526:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 527:../src/stm32f10x_rcc.c **** 
 528:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 529:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 530:../src/stm32f10x_rcc.c **** 
 531:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 532:../src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 533:../src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 534:../src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 535:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 536:../src/stm32f10x_rcc.c ****   /* Store the new value */
 537:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 538:../src/stm32f10x_rcc.c **** }
 539:../src/stm32f10x_rcc.c **** 
 540:../src/stm32f10x_rcc.c **** 
 541:../src/stm32f10x_rcc.c **** /**
 542:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 543:../src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 544:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 545:../src/stm32f10x_rcc.c ****   * @retval None
 546:../src/stm32f10x_rcc.c ****   */
 547:../src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 548:../src/stm32f10x_rcc.c **** {
 549:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 550:../src/stm32f10x_rcc.c **** 
 551:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 552:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 553:../src/stm32f10x_rcc.c **** }
 554:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 555:../src/stm32f10x_rcc.c **** 
 556:../src/stm32f10x_rcc.c **** /**
 557:../src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 558:../src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 559:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 560:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 561:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 562:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 563:../src/stm32f10x_rcc.c ****   * @retval None
 564:../src/stm32f10x_rcc.c ****   */
 565:../src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 566:../src/stm32f10x_rcc.c **** {
 470              		.loc 1 566 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 16
 473              		@ frame_needed = 1, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475 0258 80B4     		push	{r7}
 476              	.LCFI20:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 7, -4
 479 025a 85B0     		sub	sp, sp, #20
 480              	.LCFI21:
 481              		.cfi_def_cfa_offset 24
 482 025c 00AF     		add	r7, sp, #0
 483              	.LCFI22:
 484              		.cfi_def_cfa_register 7
 485 025e 7860     		str	r0, [r7, #4]
 567:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 486              		.loc 1 567 0
 487 0260 4FF00003 		mov	r3, #0
 488 0264 FB60     		str	r3, [r7, #12]
 568:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 569:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 570:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 489              		.loc 1 570 0
 490 0266 4FF48053 		mov	r3, #4096
 491 026a C4F20203 		movt	r3, 16386
 492 026e 5B68     		ldr	r3, [r3, #4]
 493 0270 FB60     		str	r3, [r7, #12]
 571:../src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 572:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 494              		.loc 1 572 0
 495 0272 FB68     		ldr	r3, [r7, #12]
 496 0274 23F00303 		bic	r3, r3, #3
 497 0278 FB60     		str	r3, [r7, #12]
 573:../src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 574:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 498              		.loc 1 574 0
 499 027a FA68     		ldr	r2, [r7, #12]
 500 027c 7B68     		ldr	r3, [r7, #4]
 501 027e 1343     		orrs	r3, r3, r2
 502 0280 FB60     		str	r3, [r7, #12]
 575:../src/stm32f10x_rcc.c ****   /* Store the new value */
 576:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 503              		.loc 1 576 0
 504 0282 4FF48053 		mov	r3, #4096
 505 0286 C4F20203 		movt	r3, 16386
 506 028a FA68     		ldr	r2, [r7, #12]
 507 028c 5A60     		str	r2, [r3, #4]
 577:../src/stm32f10x_rcc.c **** }
 508              		.loc 1 577 0
 509 028e 07F11407 		add	r7, r7, #20
 510 0292 BD46     		mov	sp, r7
 511 0294 80BC     		pop	{r7}
 512 0296 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE36:
 516              		.align	2
 517              		.global	RCC_GetSYSCLKSource
 518              		.thumb
 519              		.thumb_func
 521              	RCC_GetSYSCLKSource:
 522              	.LFB37:
 578:../src/stm32f10x_rcc.c **** 
 579:../src/stm32f10x_rcc.c **** /**
 580:../src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 581:../src/stm32f10x_rcc.c ****   * @param  None
 582:../src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 583:../src/stm32f10x_rcc.c ****   *   be one of the following:
 584:../src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 585:../src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 586:../src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 587:../src/stm32f10x_rcc.c ****   */
 588:../src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 589:../src/stm32f10x_rcc.c **** {
 523              		.loc 1 589 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 1, uses_anonymous_args = 0
 527              		@ link register save eliminated.
 528 0298 80B4     		push	{r7}
 529              	.LCFI23:
 530              		.cfi_def_cfa_offset 4
 531              		.cfi_offset 7, -4
 532 029a 00AF     		add	r7, sp, #0
 533              	.LCFI24:
 534              		.cfi_def_cfa_register 7
 590:../src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 535              		.loc 1 590 0
 536 029c 4FF48053 		mov	r3, #4096
 537 02a0 C4F20203 		movt	r3, 16386
 538 02a4 5B68     		ldr	r3, [r3, #4]
 539 02a6 DBB2     		uxtb	r3, r3
 540 02a8 03F00C03 		and	r3, r3, #12
 541 02ac DBB2     		uxtb	r3, r3
 591:../src/stm32f10x_rcc.c **** }
 542              		.loc 1 591 0
 543 02ae 1846     		mov	r0, r3
 544 02b0 BD46     		mov	sp, r7
 545 02b2 80BC     		pop	{r7}
 546 02b4 7047     		bx	lr
 547              		.cfi_endproc
 548              	.LFE37:
 550 02b6 00BF     		.align	2
 551              		.global	RCC_HCLKConfig
 552              		.thumb
 553              		.thumb_func
 555              	RCC_HCLKConfig:
 556              	.LFB38:
 592:../src/stm32f10x_rcc.c **** 
 593:../src/stm32f10x_rcc.c **** /**
 594:../src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 595:../src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 596:../src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 597:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 598:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 599:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 600:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 601:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 602:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 603:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 604:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 605:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 606:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 607:../src/stm32f10x_rcc.c ****   * @retval None
 608:../src/stm32f10x_rcc.c ****   */
 609:../src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 610:../src/stm32f10x_rcc.c **** {
 557              		.loc 1 610 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 16
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562 02b8 80B4     		push	{r7}
 563              	.LCFI25:
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 02ba 85B0     		sub	sp, sp, #20
 567              	.LCFI26:
 568              		.cfi_def_cfa_offset 24
 569 02bc 00AF     		add	r7, sp, #0
 570              	.LCFI27:
 571              		.cfi_def_cfa_register 7
 572 02be 7860     		str	r0, [r7, #4]
 611:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 573              		.loc 1 611 0
 574 02c0 4FF00003 		mov	r3, #0
 575 02c4 FB60     		str	r3, [r7, #12]
 612:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 613:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 614:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 576              		.loc 1 614 0
 577 02c6 4FF48053 		mov	r3, #4096
 578 02ca C4F20203 		movt	r3, 16386
 579 02ce 5B68     		ldr	r3, [r3, #4]
 580 02d0 FB60     		str	r3, [r7, #12]
 615:../src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 616:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 581              		.loc 1 616 0
 582 02d2 FB68     		ldr	r3, [r7, #12]
 583 02d4 23F0F003 		bic	r3, r3, #240
 584 02d8 FB60     		str	r3, [r7, #12]
 617:../src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 618:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 585              		.loc 1 618 0
 586 02da FA68     		ldr	r2, [r7, #12]
 587 02dc 7B68     		ldr	r3, [r7, #4]
 588 02de 1343     		orrs	r3, r3, r2
 589 02e0 FB60     		str	r3, [r7, #12]
 619:../src/stm32f10x_rcc.c ****   /* Store the new value */
 620:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 590              		.loc 1 620 0
 591 02e2 4FF48053 		mov	r3, #4096
 592 02e6 C4F20203 		movt	r3, 16386
 593 02ea FA68     		ldr	r2, [r7, #12]
 594 02ec 5A60     		str	r2, [r3, #4]
 621:../src/stm32f10x_rcc.c **** }
 595              		.loc 1 621 0
 596 02ee 07F11407 		add	r7, r7, #20
 597 02f2 BD46     		mov	sp, r7
 598 02f4 80BC     		pop	{r7}
 599 02f6 7047     		bx	lr
 600              		.cfi_endproc
 601              	.LFE38:
 603              		.align	2
 604              		.global	RCC_PCLK1Config
 605              		.thumb
 606              		.thumb_func
 608              	RCC_PCLK1Config:
 609              	.LFB39:
 622:../src/stm32f10x_rcc.c **** 
 623:../src/stm32f10x_rcc.c **** /**
 624:../src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 625:../src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 626:../src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 627:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 628:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 629:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 630:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 631:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 632:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 633:../src/stm32f10x_rcc.c ****   * @retval None
 634:../src/stm32f10x_rcc.c ****   */
 635:../src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 636:../src/stm32f10x_rcc.c **** {
 610              		.loc 1 636 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 16
 613              		@ frame_needed = 1, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615 02f8 80B4     		push	{r7}
 616              	.LCFI28:
 617              		.cfi_def_cfa_offset 4
 618              		.cfi_offset 7, -4
 619 02fa 85B0     		sub	sp, sp, #20
 620              	.LCFI29:
 621              		.cfi_def_cfa_offset 24
 622 02fc 00AF     		add	r7, sp, #0
 623              	.LCFI30:
 624              		.cfi_def_cfa_register 7
 625 02fe 7860     		str	r0, [r7, #4]
 637:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 626              		.loc 1 637 0
 627 0300 4FF00003 		mov	r3, #0
 628 0304 FB60     		str	r3, [r7, #12]
 638:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 639:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 640:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 629              		.loc 1 640 0
 630 0306 4FF48053 		mov	r3, #4096
 631 030a C4F20203 		movt	r3, 16386
 632 030e 5B68     		ldr	r3, [r3, #4]
 633 0310 FB60     		str	r3, [r7, #12]
 641:../src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 642:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 634              		.loc 1 642 0
 635 0312 FB68     		ldr	r3, [r7, #12]
 636 0314 23F4E063 		bic	r3, r3, #1792
 637 0318 FB60     		str	r3, [r7, #12]
 643:../src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 644:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 638              		.loc 1 644 0
 639 031a FA68     		ldr	r2, [r7, #12]
 640 031c 7B68     		ldr	r3, [r7, #4]
 641 031e 1343     		orrs	r3, r3, r2
 642 0320 FB60     		str	r3, [r7, #12]
 645:../src/stm32f10x_rcc.c ****   /* Store the new value */
 646:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 643              		.loc 1 646 0
 644 0322 4FF48053 		mov	r3, #4096
 645 0326 C4F20203 		movt	r3, 16386
 646 032a FA68     		ldr	r2, [r7, #12]
 647 032c 5A60     		str	r2, [r3, #4]
 647:../src/stm32f10x_rcc.c **** }
 648              		.loc 1 647 0
 649 032e 07F11407 		add	r7, r7, #20
 650 0332 BD46     		mov	sp, r7
 651 0334 80BC     		pop	{r7}
 652 0336 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE39:
 656              		.align	2
 657              		.global	RCC_PCLK2Config
 658              		.thumb
 659              		.thumb_func
 661              	RCC_PCLK2Config:
 662              	.LFB40:
 648:../src/stm32f10x_rcc.c **** 
 649:../src/stm32f10x_rcc.c **** /**
 650:../src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 651:../src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 652:../src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 653:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 654:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 655:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 656:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 657:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 658:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 659:../src/stm32f10x_rcc.c ****   * @retval None
 660:../src/stm32f10x_rcc.c ****   */
 661:../src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 662:../src/stm32f10x_rcc.c **** {
 663              		.loc 1 662 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 16
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667              		@ link register save eliminated.
 668 0338 80B4     		push	{r7}
 669              	.LCFI31:
 670              		.cfi_def_cfa_offset 4
 671              		.cfi_offset 7, -4
 672 033a 85B0     		sub	sp, sp, #20
 673              	.LCFI32:
 674              		.cfi_def_cfa_offset 24
 675 033c 00AF     		add	r7, sp, #0
 676              	.LCFI33:
 677              		.cfi_def_cfa_register 7
 678 033e 7860     		str	r0, [r7, #4]
 663:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 679              		.loc 1 663 0
 680 0340 4FF00003 		mov	r3, #0
 681 0344 FB60     		str	r3, [r7, #12]
 664:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 665:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 666:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 682              		.loc 1 666 0
 683 0346 4FF48053 		mov	r3, #4096
 684 034a C4F20203 		movt	r3, 16386
 685 034e 5B68     		ldr	r3, [r3, #4]
 686 0350 FB60     		str	r3, [r7, #12]
 667:../src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 668:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 687              		.loc 1 668 0
 688 0352 FB68     		ldr	r3, [r7, #12]
 689 0354 23F46053 		bic	r3, r3, #14336
 690 0358 FB60     		str	r3, [r7, #12]
 669:../src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 670:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 691              		.loc 1 670 0
 692 035a 7B68     		ldr	r3, [r7, #4]
 693 035c 4FEAC303 		lsl	r3, r3, #3
 694 0360 FA68     		ldr	r2, [r7, #12]
 695 0362 1343     		orrs	r3, r3, r2
 696 0364 FB60     		str	r3, [r7, #12]
 671:../src/stm32f10x_rcc.c ****   /* Store the new value */
 672:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 697              		.loc 1 672 0
 698 0366 4FF48053 		mov	r3, #4096
 699 036a C4F20203 		movt	r3, 16386
 700 036e FA68     		ldr	r2, [r7, #12]
 701 0370 5A60     		str	r2, [r3, #4]
 673:../src/stm32f10x_rcc.c **** }
 702              		.loc 1 673 0
 703 0372 07F11407 		add	r7, r7, #20
 704 0376 BD46     		mov	sp, r7
 705 0378 80BC     		pop	{r7}
 706 037a 7047     		bx	lr
 707              		.cfi_endproc
 708              	.LFE40:
 710              		.align	2
 711              		.global	RCC_ITConfig
 712              		.thumb
 713              		.thumb_func
 715              	RCC_ITConfig:
 716              	.LFB41:
 674:../src/stm32f10x_rcc.c **** 
 675:../src/stm32f10x_rcc.c **** /**
 676:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 677:../src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 678:../src/stm32f10x_rcc.c ****   * 
 679:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 680:../src/stm32f10x_rcc.c ****   *   of the following values        
 681:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 682:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 683:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 684:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 685:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 686:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 687:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 688:../src/stm32f10x_rcc.c ****   * 
 689:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 690:../src/stm32f10x_rcc.c ****   *   following values        
 691:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 692:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 693:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 694:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 695:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 696:../src/stm32f10x_rcc.c ****   *       
 697:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 698:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 699:../src/stm32f10x_rcc.c ****   * @retval None
 700:../src/stm32f10x_rcc.c ****   */
 701:../src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 702:../src/stm32f10x_rcc.c **** {
 717              		.loc 1 702 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 8
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722 037c 80B4     		push	{r7}
 723              	.LCFI34:
 724              		.cfi_def_cfa_offset 4
 725              		.cfi_offset 7, -4
 726 037e 83B0     		sub	sp, sp, #12
 727              	.LCFI35:
 728              		.cfi_def_cfa_offset 16
 729 0380 00AF     		add	r7, sp, #0
 730              	.LCFI36:
 731              		.cfi_def_cfa_register 7
 732 0382 0246     		mov	r2, r0
 733 0384 0B46     		mov	r3, r1
 734 0386 FA71     		strb	r2, [r7, #7]
 735 0388 BB71     		strb	r3, [r7, #6]
 703:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 704:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 705:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 706:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 736              		.loc 1 706 0
 737 038a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 738 038c 002B     		cmp	r3, #0
 739 038e 0ED0     		beq	.L23
 707:../src/stm32f10x_rcc.c ****   {
 708:../src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 709:../src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 740              		.loc 1 709 0
 741 0390 41F20903 		movw	r3, #4105
 742 0394 C4F20203 		movt	r3, 16386
 743 0398 41F20902 		movw	r2, #4105
 744 039c C4F20202 		movt	r2, 16386
 745 03a0 1278     		ldrb	r2, [r2, #0]
 746 03a2 D1B2     		uxtb	r1, r2
 747 03a4 FA79     		ldrb	r2, [r7, #7]
 748 03a6 0A43     		orrs	r2, r2, r1
 749 03a8 D2B2     		uxtb	r2, r2
 750 03aa 1A70     		strb	r2, [r3, #0]
 751 03ac 10E0     		b	.L22
 752              	.L23:
 710:../src/stm32f10x_rcc.c ****   }
 711:../src/stm32f10x_rcc.c ****   else
 712:../src/stm32f10x_rcc.c ****   {
 713:../src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 714:../src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 753              		.loc 1 714 0
 754 03ae 41F20903 		movw	r3, #4105
 755 03b2 C4F20203 		movt	r3, 16386
 756 03b6 41F20902 		movw	r2, #4105
 757 03ba C4F20202 		movt	r2, 16386
 758 03be 1278     		ldrb	r2, [r2, #0]
 759 03c0 D1B2     		uxtb	r1, r2
 760 03c2 FA79     		ldrb	r2, [r7, #7]
 761 03c4 6FEA0202 		mvn	r2, r2
 762 03c8 D2B2     		uxtb	r2, r2
 763 03ca 0A40     		ands	r2, r2, r1
 764 03cc D2B2     		uxtb	r2, r2
 765 03ce 1A70     		strb	r2, [r3, #0]
 766              	.L22:
 715:../src/stm32f10x_rcc.c ****   }
 716:../src/stm32f10x_rcc.c **** }
 767              		.loc 1 716 0
 768 03d0 07F10C07 		add	r7, r7, #12
 769 03d4 BD46     		mov	sp, r7
 770 03d6 80BC     		pop	{r7}
 771 03d8 7047     		bx	lr
 772              		.cfi_endproc
 773              	.LFE41:
 775 03da 00BF     		.align	2
 776              		.global	RCC_USBCLKConfig
 777              		.thumb
 778              		.thumb_func
 780              	RCC_USBCLKConfig:
 781              	.LFB42:
 717:../src/stm32f10x_rcc.c **** 
 718:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 719:../src/stm32f10x_rcc.c **** /**
 720:../src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 721:../src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 722:../src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 723:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 724:../src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 725:../src/stm32f10x_rcc.c ****   *                                     clock source
 726:../src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 727:../src/stm32f10x_rcc.c ****   * @retval None
 728:../src/stm32f10x_rcc.c ****   */
 729:../src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 730:../src/stm32f10x_rcc.c **** {
 782              		.loc 1 730 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 8
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 03dc 80B4     		push	{r7}
 788              	.LCFI37:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 03de 83B0     		sub	sp, sp, #12
 792              	.LCFI38:
 793              		.cfi_def_cfa_offset 16
 794 03e0 00AF     		add	r7, sp, #0
 795              	.LCFI39:
 796              		.cfi_def_cfa_register 7
 797 03e2 7860     		str	r0, [r7, #4]
 731:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 732:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 733:../src/stm32f10x_rcc.c **** 
 734:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 798              		.loc 1 734 0
 799 03e4 4FF0D803 		mov	r3, #216
 800 03e8 C4F24223 		movt	r3, 16962
 801 03ec 7A68     		ldr	r2, [r7, #4]
 802 03ee 1A60     		str	r2, [r3, #0]
 735:../src/stm32f10x_rcc.c **** }
 803              		.loc 1 735 0
 804 03f0 07F10C07 		add	r7, r7, #12
 805 03f4 BD46     		mov	sp, r7
 806 03f6 80BC     		pop	{r7}
 807 03f8 7047     		bx	lr
 808              		.cfi_endproc
 809              	.LFE42:
 811 03fa 00BF     		.align	2
 812              		.global	RCC_ADCCLKConfig
 813              		.thumb
 814              		.thumb_func
 816              	RCC_ADCCLKConfig:
 817              	.LFB43:
 736:../src/stm32f10x_rcc.c **** #else
 737:../src/stm32f10x_rcc.c **** /**
 738:../src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 739:../src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 740:../src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 741:../src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 742:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 743:../src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 745:../src/stm32f10x_rcc.c ****   * @retval None
 746:../src/stm32f10x_rcc.c ****   */
 747:../src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 748:../src/stm32f10x_rcc.c **** {
 749:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 750:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 751:../src/stm32f10x_rcc.c **** 
 752:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 753:../src/stm32f10x_rcc.c **** }
 754:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 755:../src/stm32f10x_rcc.c **** 
 756:../src/stm32f10x_rcc.c **** /**
 757:../src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 758:../src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 759:../src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 760:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 761:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 762:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 763:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 764:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 765:../src/stm32f10x_rcc.c ****   * @retval None
 766:../src/stm32f10x_rcc.c ****   */
 767:../src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 768:../src/stm32f10x_rcc.c **** {
 818              		.loc 1 768 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 16
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 03fc 80B4     		push	{r7}
 824              	.LCFI40:
 825              		.cfi_def_cfa_offset 4
 826              		.cfi_offset 7, -4
 827 03fe 85B0     		sub	sp, sp, #20
 828              	.LCFI41:
 829              		.cfi_def_cfa_offset 24
 830 0400 00AF     		add	r7, sp, #0
 831              	.LCFI42:
 832              		.cfi_def_cfa_register 7
 833 0402 7860     		str	r0, [r7, #4]
 769:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 834              		.loc 1 769 0
 835 0404 4FF00003 		mov	r3, #0
 836 0408 FB60     		str	r3, [r7, #12]
 770:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 771:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 772:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 837              		.loc 1 772 0
 838 040a 4FF48053 		mov	r3, #4096
 839 040e C4F20203 		movt	r3, 16386
 840 0412 5B68     		ldr	r3, [r3, #4]
 841 0414 FB60     		str	r3, [r7, #12]
 773:../src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 774:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 842              		.loc 1 774 0
 843 0416 FB68     		ldr	r3, [r7, #12]
 844 0418 23F44043 		bic	r3, r3, #49152
 845 041c FB60     		str	r3, [r7, #12]
 775:../src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 776:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 846              		.loc 1 776 0
 847 041e FA68     		ldr	r2, [r7, #12]
 848 0420 7B68     		ldr	r3, [r7, #4]
 849 0422 1343     		orrs	r3, r3, r2
 850 0424 FB60     		str	r3, [r7, #12]
 777:../src/stm32f10x_rcc.c ****   /* Store the new value */
 778:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 851              		.loc 1 778 0
 852 0426 4FF48053 		mov	r3, #4096
 853 042a C4F20203 		movt	r3, 16386
 854 042e FA68     		ldr	r2, [r7, #12]
 855 0430 5A60     		str	r2, [r3, #4]
 779:../src/stm32f10x_rcc.c **** }
 856              		.loc 1 779 0
 857 0432 07F11407 		add	r7, r7, #20
 858 0436 BD46     		mov	sp, r7
 859 0438 80BC     		pop	{r7}
 860 043a 7047     		bx	lr
 861              		.cfi_endproc
 862              	.LFE43:
 864              		.align	2
 865              		.global	RCC_LSEConfig
 866              		.thumb
 867              		.thumb_func
 869              	RCC_LSEConfig:
 870              	.LFB44:
 780:../src/stm32f10x_rcc.c **** 
 781:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 782:../src/stm32f10x_rcc.c **** /**
 783:../src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 784:../src/stm32f10x_rcc.c ****   * @note
 785:../src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 786:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 787:../src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 788:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 789:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 790:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 791:../src/stm32f10x_rcc.c ****   * @retval None
 792:../src/stm32f10x_rcc.c ****   */
 793:../src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 794:../src/stm32f10x_rcc.c **** {
 795:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 796:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 797:../src/stm32f10x_rcc.c **** 
 798:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 799:../src/stm32f10x_rcc.c **** }
 800:../src/stm32f10x_rcc.c **** 
 801:../src/stm32f10x_rcc.c **** /**
 802:../src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 803:../src/stm32f10x_rcc.c ****   * @note
 804:../src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 805:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 806:../src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 807:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 808:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 809:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 810:../src/stm32f10x_rcc.c ****   * @retval None
 811:../src/stm32f10x_rcc.c ****   */
 812:../src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 813:../src/stm32f10x_rcc.c **** {
 814:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 815:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 816:../src/stm32f10x_rcc.c **** 
 817:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 818:../src/stm32f10x_rcc.c **** }
 819:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 820:../src/stm32f10x_rcc.c **** 
 821:../src/stm32f10x_rcc.c **** /**
 822:../src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 823:../src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 824:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 825:../src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 826:../src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 827:../src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 828:../src/stm32f10x_rcc.c ****   * @retval None
 829:../src/stm32f10x_rcc.c ****   */
 830:../src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 831:../src/stm32f10x_rcc.c **** {
 871              		.loc 1 831 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 8
 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875              		@ link register save eliminated.
 876 043c 80B4     		push	{r7}
 877              	.LCFI43:
 878              		.cfi_def_cfa_offset 4
 879              		.cfi_offset 7, -4
 880 043e 83B0     		sub	sp, sp, #12
 881              	.LCFI44:
 882              		.cfi_def_cfa_offset 16
 883 0440 00AF     		add	r7, sp, #0
 884              	.LCFI45:
 885              		.cfi_def_cfa_register 7
 886 0442 0346     		mov	r3, r0
 887 0444 FB71     		strb	r3, [r7, #7]
 832:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 833:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 834:../src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 835:../src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 836:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 888              		.loc 1 836 0
 889 0446 4FF48153 		mov	r3, #4128
 890 044a C4F20203 		movt	r3, 16386
 891 044e 4FF00002 		mov	r2, #0
 892 0452 1A70     		strb	r2, [r3, #0]
 837:../src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 838:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 893              		.loc 1 838 0
 894 0454 4FF48153 		mov	r3, #4128
 895 0458 C4F20203 		movt	r3, 16386
 896 045c 4FF00002 		mov	r2, #0
 897 0460 1A70     		strb	r2, [r3, #0]
 839:../src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 840:../src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 898              		.loc 1 840 0
 899 0462 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 900 0464 012B     		cmp	r3, #1
 901 0466 02D0     		beq	.L29
 902 0468 042B     		cmp	r3, #4
 903 046a 08D0     		beq	.L30
 904 046c 0FE0     		b	.L32
 905              	.L29:
 841:../src/stm32f10x_rcc.c ****   {
 842:../src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 843:../src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 844:../src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 906              		.loc 1 844 0
 907 046e 4FF48153 		mov	r3, #4128
 908 0472 C4F20203 		movt	r3, 16386
 909 0476 4FF00102 		mov	r2, #1
 910 047a 1A70     		strb	r2, [r3, #0]
 845:../src/stm32f10x_rcc.c ****       break;
 911              		.loc 1 845 0
 912 047c 08E0     		b	.L27
 913              	.L30:
 846:../src/stm32f10x_rcc.c ****       
 847:../src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 848:../src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 849:../src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 914              		.loc 1 849 0
 915 047e 4FF48153 		mov	r3, #4128
 916 0482 C4F20203 		movt	r3, 16386
 917 0486 4FF00502 		mov	r2, #5
 918 048a 1A70     		strb	r2, [r3, #0]
 850:../src/stm32f10x_rcc.c ****       break;            
 919              		.loc 1 850 0
 920 048c 00E0     		b	.L27
 921              	.L32:
 851:../src/stm32f10x_rcc.c ****       
 852:../src/stm32f10x_rcc.c ****     default:
 853:../src/stm32f10x_rcc.c ****       break;      
 922              		.loc 1 853 0
 923 048e 00BF     		nop
 924              	.L27:
 854:../src/stm32f10x_rcc.c ****   }
 855:../src/stm32f10x_rcc.c **** }
 925              		.loc 1 855 0
 926 0490 07F10C07 		add	r7, r7, #12
 927 0494 BD46     		mov	sp, r7
 928 0496 80BC     		pop	{r7}
 929 0498 7047     		bx	lr
 930              		.cfi_endproc
 931              	.LFE44:
 933 049a 00BF     		.align	2
 934              		.global	RCC_LSICmd
 935              		.thumb
 936              		.thumb_func
 938              	RCC_LSICmd:
 939              	.LFB45:
 856:../src/stm32f10x_rcc.c **** 
 857:../src/stm32f10x_rcc.c **** /**
 858:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 859:../src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 860:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 861:../src/stm32f10x_rcc.c ****   * @retval None
 862:../src/stm32f10x_rcc.c ****   */
 863:../src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 864:../src/stm32f10x_rcc.c **** {
 940              		.loc 1 864 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 8
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 945 049c 80B4     		push	{r7}
 946              	.LCFI46:
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 7, -4
 949 049e 83B0     		sub	sp, sp, #12
 950              	.LCFI47:
 951              		.cfi_def_cfa_offset 16
 952 04a0 00AF     		add	r7, sp, #0
 953              	.LCFI48:
 954              		.cfi_def_cfa_register 7
 955 04a2 0346     		mov	r3, r0
 956 04a4 FB71     		strb	r3, [r7, #7]
 865:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 866:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 867:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 957              		.loc 1 867 0
 958 04a6 4FF49063 		mov	r3, #1152
 959 04aa C4F24223 		movt	r3, 16962
 960 04ae FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 961 04b0 1A60     		str	r2, [r3, #0]
 868:../src/stm32f10x_rcc.c **** }
 962              		.loc 1 868 0
 963 04b2 07F10C07 		add	r7, r7, #12
 964 04b6 BD46     		mov	sp, r7
 965 04b8 80BC     		pop	{r7}
 966 04ba 7047     		bx	lr
 967              		.cfi_endproc
 968              	.LFE45:
 970              		.align	2
 971              		.global	RCC_RTCCLKConfig
 972              		.thumb
 973              		.thumb_func
 975              	RCC_RTCCLKConfig:
 976              	.LFB46:
 869:../src/stm32f10x_rcc.c **** 
 870:../src/stm32f10x_rcc.c **** /**
 871:../src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 872:../src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 873:../src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 874:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 875:../src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 876:../src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 877:../src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 878:../src/stm32f10x_rcc.c ****   * @retval None
 879:../src/stm32f10x_rcc.c ****   */
 880:../src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 881:../src/stm32f10x_rcc.c **** {
 977              		.loc 1 881 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 8
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981              		@ link register save eliminated.
 982 04bc 80B4     		push	{r7}
 983              	.LCFI49:
 984              		.cfi_def_cfa_offset 4
 985              		.cfi_offset 7, -4
 986 04be 83B0     		sub	sp, sp, #12
 987              	.LCFI50:
 988              		.cfi_def_cfa_offset 16
 989 04c0 00AF     		add	r7, sp, #0
 990              	.LCFI51:
 991              		.cfi_def_cfa_register 7
 992 04c2 7860     		str	r0, [r7, #4]
 882:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 883:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 884:../src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 885:../src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 993              		.loc 1 885 0
 994 04c4 4FF48053 		mov	r3, #4096
 995 04c8 C4F20203 		movt	r3, 16386
 996 04cc 4FF48052 		mov	r2, #4096
 997 04d0 C4F20202 		movt	r2, 16386
 998 04d4 126A     		ldr	r2, [r2, #32]
 999 04d6 1146     		mov	r1, r2
 1000 04d8 7A68     		ldr	r2, [r7, #4]
 1001 04da 0A43     		orrs	r2, r2, r1
 1002 04dc 1A62     		str	r2, [r3, #32]
 886:../src/stm32f10x_rcc.c **** }
 1003              		.loc 1 886 0
 1004 04de 07F10C07 		add	r7, r7, #12
 1005 04e2 BD46     		mov	sp, r7
 1006 04e4 80BC     		pop	{r7}
 1007 04e6 7047     		bx	lr
 1008              		.cfi_endproc
 1009              	.LFE46:
 1011              		.align	2
 1012              		.global	RCC_RTCCLKCmd
 1013              		.thumb
 1014              		.thumb_func
 1016              	RCC_RTCCLKCmd:
 1017              	.LFB47:
 887:../src/stm32f10x_rcc.c **** 
 888:../src/stm32f10x_rcc.c **** /**
 889:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 890:../src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 891:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 892:../src/stm32f10x_rcc.c ****   * @retval None
 893:../src/stm32f10x_rcc.c ****   */
 894:../src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 895:../src/stm32f10x_rcc.c **** {
 1018              		.loc 1 895 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 8
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023 04e8 80B4     		push	{r7}
 1024              	.LCFI52:
 1025              		.cfi_def_cfa_offset 4
 1026              		.cfi_offset 7, -4
 1027 04ea 83B0     		sub	sp, sp, #12
 1028              	.LCFI53:
 1029              		.cfi_def_cfa_offset 16
 1030 04ec 00AF     		add	r7, sp, #0
 1031              	.LCFI54:
 1032              		.cfi_def_cfa_register 7
 1033 04ee 0346     		mov	r3, r0
 1034 04f0 FB71     		strb	r3, [r7, #7]
 896:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 897:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 898:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1035              		.loc 1 898 0
 1036 04f2 40F23C43 		movw	r3, #1084
 1037 04f6 C4F24223 		movt	r3, 16962
 1038 04fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1039 04fc 1A60     		str	r2, [r3, #0]
 899:../src/stm32f10x_rcc.c **** }
 1040              		.loc 1 899 0
 1041 04fe 07F10C07 		add	r7, r7, #12
 1042 0502 BD46     		mov	sp, r7
 1043 0504 80BC     		pop	{r7}
 1044 0506 7047     		bx	lr
 1045              		.cfi_endproc
 1046              	.LFE47:
 1048              		.align	2
 1049              		.global	RCC_GetClocksFreq
 1050              		.thumb
 1051              		.thumb_func
 1053              	RCC_GetClocksFreq:
 1054              	.LFB48:
 900:../src/stm32f10x_rcc.c **** 
 901:../src/stm32f10x_rcc.c **** /**
 902:../src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 903:../src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 904:../src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 905:../src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 906:../src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 907:../src/stm32f10x_rcc.c ****   * @retval None
 908:../src/stm32f10x_rcc.c ****   */
 909:../src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 910:../src/stm32f10x_rcc.c **** {
 1055              		.loc 1 910 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 24
 1058              		@ frame_needed = 1, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 1060 0508 80B4     		push	{r7}
 1061              	.LCFI55:
 1062              		.cfi_def_cfa_offset 4
 1063              		.cfi_offset 7, -4
 1064 050a 87B0     		sub	sp, sp, #28
 1065              	.LCFI56:
 1066              		.cfi_def_cfa_offset 32
 1067 050c 00AF     		add	r7, sp, #0
 1068              	.LCFI57:
 1069              		.cfi_def_cfa_register 7
 1070 050e 7860     		str	r0, [r7, #4]
 911:../src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1071              		.loc 1 911 0
 1072 0510 4FF00003 		mov	r3, #0
 1073 0514 7B61     		str	r3, [r7, #20]
 1074 0516 4FF00003 		mov	r3, #0
 1075 051a 3B61     		str	r3, [r7, #16]
 1076 051c 4FF00003 		mov	r3, #0
 1077 0520 FB60     		str	r3, [r7, #12]
 1078 0522 4FF00003 		mov	r3, #0
 1079 0526 BB60     		str	r3, [r7, #8]
 912:../src/stm32f10x_rcc.c **** 
 913:../src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 914:../src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 915:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 916:../src/stm32f10x_rcc.c **** 
 917:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 918:../src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 919:../src/stm32f10x_rcc.c **** #endif
 920:../src/stm32f10x_rcc.c ****     
 921:../src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 922:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1080              		.loc 1 922 0
 1081 0528 4FF48053 		mov	r3, #4096
 1082 052c C4F20203 		movt	r3, 16386
 1083 0530 5B68     		ldr	r3, [r3, #4]
 1084 0532 03F00C03 		and	r3, r3, #12
 1085 0536 7B61     		str	r3, [r7, #20]
 923:../src/stm32f10x_rcc.c ****   
 924:../src/stm32f10x_rcc.c ****   switch (tmp)
 1086              		.loc 1 924 0
 1087 0538 7B69     		ldr	r3, [r7, #20]
 1088 053a 042B     		cmp	r3, #4
 1089 053c 0AD0     		beq	.L39
 1090 053e 082B     		cmp	r3, #8
 1091 0540 0FD0     		beq	.L40
 1092 0542 002B     		cmp	r3, #0
 1093 0544 4DD1     		bne	.L45
 1094              	.L38:
 925:../src/stm32f10x_rcc.c ****   {
 926:../src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 927:../src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1095              		.loc 1 927 0
 1096 0546 7A68     		ldr	r2, [r7, #4]
 1097 0548 4FF49053 		mov	r3, #4608
 1098 054c C0F27A03 		movt	r3, 122
 1099 0550 1360     		str	r3, [r2, #0]
 928:../src/stm32f10x_rcc.c ****       break;
 1100              		.loc 1 928 0
 1101 0552 4DE0     		b	.L41
 1102              	.L39:
 929:../src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 930:../src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1103              		.loc 1 930 0
 1104 0554 7A68     		ldr	r2, [r7, #4]
 1105 0556 4FF49053 		mov	r3, #4608
 1106 055a C0F27A03 		movt	r3, 122
 1107 055e 1360     		str	r3, [r2, #0]
 931:../src/stm32f10x_rcc.c ****       break;
 1108              		.loc 1 931 0
 1109 0560 46E0     		b	.L41
 1110              	.L40:
 932:../src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 933:../src/stm32f10x_rcc.c **** 
 934:../src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 935:../src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1111              		.loc 1 935 0
 1112 0562 4FF48053 		mov	r3, #4096
 1113 0566 C4F20203 		movt	r3, 16386
 1114 056a 5B68     		ldr	r3, [r3, #4]
 1115 056c 03F47013 		and	r3, r3, #3932160
 1116 0570 3B61     		str	r3, [r7, #16]
 936:../src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1117              		.loc 1 936 0
 1118 0572 4FF48053 		mov	r3, #4096
 1119 0576 C4F20203 		movt	r3, 16386
 1120 057a 5B68     		ldr	r3, [r3, #4]
 1121 057c 03F48033 		and	r3, r3, #65536
 1122 0580 FB60     		str	r3, [r7, #12]
 937:../src/stm32f10x_rcc.c ****       
 938:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 939:../src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1123              		.loc 1 939 0
 1124 0582 3B69     		ldr	r3, [r7, #16]
 1125 0584 4FEA9343 		lsr	r3, r3, #18
 1126 0588 03F10203 		add	r3, r3, #2
 1127 058c 3B61     		str	r3, [r7, #16]
 940:../src/stm32f10x_rcc.c ****       
 941:../src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1128              		.loc 1 941 0
 1129 058e FB68     		ldr	r3, [r7, #12]
 1130 0590 002B     		cmp	r3, #0
 1131 0592 09D1     		bne	.L42
 942:../src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 943:../src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1132              		.loc 1 943 0
 1133 0594 3A69     		ldr	r2, [r7, #16]
 1134 0596 4FF41063 		mov	r3, #2304
 1135 059a C0F23D03 		movt	r3, 61
 1136 059e 03FB02F2 		mul	r2, r3, r2
 1137 05a2 7B68     		ldr	r3, [r7, #4]
 1138 05a4 1A60     		str	r2, [r3, #0]
 944:../src/stm32f10x_rcc.c ****       }
 945:../src/stm32f10x_rcc.c ****       else
 946:../src/stm32f10x_rcc.c ****       {
 947:../src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 948:../src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 949:../src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 950:../src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 951:../src/stm32f10x_rcc.c ****  #else
 952:../src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 953:../src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 954:../src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 955:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 956:../src/stm32f10x_rcc.c ****         }
 957:../src/stm32f10x_rcc.c ****         else
 958:../src/stm32f10x_rcc.c ****         {
 959:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 960:../src/stm32f10x_rcc.c ****         }
 961:../src/stm32f10x_rcc.c ****  #endif
 962:../src/stm32f10x_rcc.c ****       }
 963:../src/stm32f10x_rcc.c **** #else
 964:../src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 965:../src/stm32f10x_rcc.c ****       
 966:../src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 967:../src/stm32f10x_rcc.c ****       {
 968:../src/stm32f10x_rcc.c ****          pllmull += 2;
 969:../src/stm32f10x_rcc.c ****       }
 970:../src/stm32f10x_rcc.c ****       else
 971:../src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 972:../src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 973:../src/stm32f10x_rcc.c ****       }
 974:../src/stm32f10x_rcc.c ****             
 975:../src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 976:../src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 977:../src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 978:../src/stm32f10x_rcc.c ****       }
 979:../src/stm32f10x_rcc.c ****       else
 980:../src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 981:../src/stm32f10x_rcc.c ****         
 982:../src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 983:../src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 984:../src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 985:../src/stm32f10x_rcc.c ****         
 986:../src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 987:../src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 988:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 989:../src/stm32f10x_rcc.c ****         }
 990:../src/stm32f10x_rcc.c ****         else
 991:../src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 992:../src/stm32f10x_rcc.c ****           
 993:../src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 994:../src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 995:../src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 996:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 997:../src/stm32f10x_rcc.c ****         }
 998:../src/stm32f10x_rcc.c ****       }
 999:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1000:../src/stm32f10x_rcc.c ****       break;
 1139              		.loc 1 1000 0
 1140 05a6 23E0     		b	.L41
 1141              	.L42:
 953:../src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 1142              		.loc 1 953 0
 1143 05a8 4FF48053 		mov	r3, #4096
 1144 05ac C4F20203 		movt	r3, 16386
 1145 05b0 5B68     		ldr	r3, [r3, #4]
 1146 05b2 03F40033 		and	r3, r3, #131072
 1147 05b6 002B     		cmp	r3, #0
 1148 05b8 09D0     		beq	.L44
 955:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 1149              		.loc 1 955 0
 1150 05ba 3A69     		ldr	r2, [r7, #16]
 1151 05bc 4FF41063 		mov	r3, #2304
 1152 05c0 C0F23D03 		movt	r3, 61
 1153 05c4 03FB02F2 		mul	r2, r3, r2
 1154 05c8 7B68     		ldr	r3, [r7, #4]
 1155 05ca 1A60     		str	r2, [r3, #0]
 1156              		.loc 1 1000 0
 1157 05cc 10E0     		b	.L41
 1158              	.L44:
 959:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 1159              		.loc 1 959 0
 1160 05ce 3A69     		ldr	r2, [r7, #16]
 1161 05d0 4FF49053 		mov	r3, #4608
 1162 05d4 C0F27A03 		movt	r3, 122
 1163 05d8 03FB02F2 		mul	r2, r3, r2
 1164 05dc 7B68     		ldr	r3, [r7, #4]
 1165 05de 1A60     		str	r2, [r3, #0]
 1166              		.loc 1 1000 0
 1167 05e0 06E0     		b	.L41
 1168              	.L45:
1001:../src/stm32f10x_rcc.c **** 
1002:../src/stm32f10x_rcc.c ****     default:
1003:../src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1169              		.loc 1 1003 0
 1170 05e2 7A68     		ldr	r2, [r7, #4]
 1171 05e4 4FF49053 		mov	r3, #4608
 1172 05e8 C0F27A03 		movt	r3, 122
 1173 05ec 1360     		str	r3, [r2, #0]
1004:../src/stm32f10x_rcc.c ****       break;
 1174              		.loc 1 1004 0
 1175 05ee 00BF     		nop
 1176              	.L41:
1005:../src/stm32f10x_rcc.c ****   }
1006:../src/stm32f10x_rcc.c **** 
1007:../src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1008:../src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1009:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1177              		.loc 1 1009 0
 1178 05f0 4FF48053 		mov	r3, #4096
 1179 05f4 C4F20203 		movt	r3, 16386
 1180 05f8 5B68     		ldr	r3, [r3, #4]
 1181 05fa 03F0F003 		and	r3, r3, #240
 1182 05fe 7B61     		str	r3, [r7, #20]
1010:../src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1183              		.loc 1 1010 0
 1184 0600 7B69     		ldr	r3, [r7, #20]
 1185 0602 4FEA1313 		lsr	r3, r3, #4
 1186 0606 7B61     		str	r3, [r7, #20]
1011:../src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1187              		.loc 1 1011 0
 1188 0608 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1189 060c C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1190 0610 7A69     		ldr	r2, [r7, #20]
 1191 0612 9B18     		adds	r3, r3, r2
 1192 0614 1B78     		ldrb	r3, [r3, #0]
 1193 0616 DBB2     		uxtb	r3, r3
 1194 0618 BB60     		str	r3, [r7, #8]
1012:../src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1013:../src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1195              		.loc 1 1013 0
 1196 061a 7B68     		ldr	r3, [r7, #4]
 1197 061c 1A68     		ldr	r2, [r3, #0]
 1198 061e BB68     		ldr	r3, [r7, #8]
 1199 0620 22FA03F2 		lsr	r2, r2, r3
 1200 0624 7B68     		ldr	r3, [r7, #4]
 1201 0626 5A60     		str	r2, [r3, #4]
1014:../src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1015:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1202              		.loc 1 1015 0
 1203 0628 4FF48053 		mov	r3, #4096
 1204 062c C4F20203 		movt	r3, 16386
 1205 0630 5B68     		ldr	r3, [r3, #4]
 1206 0632 03F4E063 		and	r3, r3, #1792
 1207 0636 7B61     		str	r3, [r7, #20]
1016:../src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1208              		.loc 1 1016 0
 1209 0638 7B69     		ldr	r3, [r7, #20]
 1210 063a 4FEA1323 		lsr	r3, r3, #8
 1211 063e 7B61     		str	r3, [r7, #20]
1017:../src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1212              		.loc 1 1017 0
 1213 0640 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1214 0644 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1215 0648 7A69     		ldr	r2, [r7, #20]
 1216 064a 9B18     		adds	r3, r3, r2
 1217 064c 1B78     		ldrb	r3, [r3, #0]
 1218 064e DBB2     		uxtb	r3, r3
 1219 0650 BB60     		str	r3, [r7, #8]
1018:../src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1019:../src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1220              		.loc 1 1019 0
 1221 0652 7B68     		ldr	r3, [r7, #4]
 1222 0654 5A68     		ldr	r2, [r3, #4]
 1223 0656 BB68     		ldr	r3, [r7, #8]
 1224 0658 22FA03F2 		lsr	r2, r2, r3
 1225 065c 7B68     		ldr	r3, [r7, #4]
 1226 065e 9A60     		str	r2, [r3, #8]
1020:../src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1021:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1227              		.loc 1 1021 0
 1228 0660 4FF48053 		mov	r3, #4096
 1229 0664 C4F20203 		movt	r3, 16386
 1230 0668 5B68     		ldr	r3, [r3, #4]
 1231 066a 03F46053 		and	r3, r3, #14336
 1232 066e 7B61     		str	r3, [r7, #20]
1022:../src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1233              		.loc 1 1022 0
 1234 0670 7B69     		ldr	r3, [r7, #20]
 1235 0672 4FEAD323 		lsr	r3, r3, #11
 1236 0676 7B61     		str	r3, [r7, #20]
1023:../src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1237              		.loc 1 1023 0
 1238 0678 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1239 067c C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1240 0680 7A69     		ldr	r2, [r7, #20]
 1241 0682 9B18     		adds	r3, r3, r2
 1242 0684 1B78     		ldrb	r3, [r3, #0]
 1243 0686 DBB2     		uxtb	r3, r3
 1244 0688 BB60     		str	r3, [r7, #8]
1024:../src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1025:../src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1245              		.loc 1 1025 0
 1246 068a 7B68     		ldr	r3, [r7, #4]
 1247 068c 5A68     		ldr	r2, [r3, #4]
 1248 068e BB68     		ldr	r3, [r7, #8]
 1249 0690 22FA03F2 		lsr	r2, r2, r3
 1250 0694 7B68     		ldr	r3, [r7, #4]
 1251 0696 DA60     		str	r2, [r3, #12]
1026:../src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1027:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1252              		.loc 1 1027 0
 1253 0698 4FF48053 		mov	r3, #4096
 1254 069c C4F20203 		movt	r3, 16386
 1255 06a0 5B68     		ldr	r3, [r3, #4]
 1256 06a2 03F44043 		and	r3, r3, #49152
 1257 06a6 7B61     		str	r3, [r7, #20]
1028:../src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1258              		.loc 1 1028 0
 1259 06a8 7B69     		ldr	r3, [r7, #20]
 1260 06aa 4FEA9333 		lsr	r3, r3, #14
 1261 06ae 7B61     		str	r3, [r7, #20]
1029:../src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1262              		.loc 1 1029 0
 1263 06b0 40F20003 		movw	r3, #:lower16:ADCPrescTable
 1264 06b4 C0F20003 		movt	r3, #:upper16:ADCPrescTable
 1265 06b8 7A69     		ldr	r2, [r7, #20]
 1266 06ba 9B18     		adds	r3, r3, r2
 1267 06bc 1B78     		ldrb	r3, [r3, #0]
 1268 06be DBB2     		uxtb	r3, r3
 1269 06c0 BB60     		str	r3, [r7, #8]
1030:../src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1031:../src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1270              		.loc 1 1031 0
 1271 06c2 7B68     		ldr	r3, [r7, #4]
 1272 06c4 DA68     		ldr	r2, [r3, #12]
 1273 06c6 BB68     		ldr	r3, [r7, #8]
 1274 06c8 B2FBF3F2 		udiv	r2, r2, r3
 1275 06cc 7B68     		ldr	r3, [r7, #4]
 1276 06ce 1A61     		str	r2, [r3, #16]
1032:../src/stm32f10x_rcc.c **** }
 1277              		.loc 1 1032 0
 1278 06d0 07F11C07 		add	r7, r7, #28
 1279 06d4 BD46     		mov	sp, r7
 1280 06d6 80BC     		pop	{r7}
 1281 06d8 7047     		bx	lr
 1282              		.cfi_endproc
 1283              	.LFE48:
 1285 06da 00BF     		.align	2
 1286              		.global	RCC_AHBPeriphClockCmd
 1287              		.thumb
 1288              		.thumb_func
 1290              	RCC_AHBPeriphClockCmd:
 1291              	.LFB49:
1033:../src/stm32f10x_rcc.c **** 
1034:../src/stm32f10x_rcc.c **** /**
1035:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1036:../src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1037:../src/stm32f10x_rcc.c ****   *   
1038:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1039:../src/stm32f10x_rcc.c ****   *   of the following values:        
1040:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1041:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1042:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1043:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1044:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1045:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1046:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1047:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1048:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1049:../src/stm32f10x_rcc.c ****   * 
1050:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1051:../src/stm32f10x_rcc.c ****   *   following values:        
1052:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1053:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1054:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1055:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1056:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1057:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1058:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1059:../src/stm32f10x_rcc.c ****   *   
1060:../src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1061:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1062:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1063:../src/stm32f10x_rcc.c ****   * @retval None
1064:../src/stm32f10x_rcc.c ****   */
1065:../src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1066:../src/stm32f10x_rcc.c **** {
 1292              		.loc 1 1066 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 8
 1295              		@ frame_needed = 1, uses_anonymous_args = 0
 1296              		@ link register save eliminated.
 1297 06dc 80B4     		push	{r7}
 1298              	.LCFI58:
 1299              		.cfi_def_cfa_offset 4
 1300              		.cfi_offset 7, -4
 1301 06de 83B0     		sub	sp, sp, #12
 1302              	.LCFI59:
 1303              		.cfi_def_cfa_offset 16
 1304 06e0 00AF     		add	r7, sp, #0
 1305              	.LCFI60:
 1306              		.cfi_def_cfa_register 7
 1307 06e2 7860     		str	r0, [r7, #4]
 1308 06e4 0B46     		mov	r3, r1
 1309 06e6 FB70     		strb	r3, [r7, #3]
1067:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1068:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1069:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1070:../src/stm32f10x_rcc.c **** 
1071:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1310              		.loc 1 1071 0
 1311 06e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1312 06ea 002B     		cmp	r3, #0
 1313 06ec 0DD0     		beq	.L47
1072:../src/stm32f10x_rcc.c ****   {
1073:../src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1314              		.loc 1 1073 0
 1315 06ee 4FF48053 		mov	r3, #4096
 1316 06f2 C4F20203 		movt	r3, 16386
 1317 06f6 4FF48052 		mov	r2, #4096
 1318 06fa C4F20202 		movt	r2, 16386
 1319 06fe 5269     		ldr	r2, [r2, #20]
 1320 0700 1146     		mov	r1, r2
 1321 0702 7A68     		ldr	r2, [r7, #4]
 1322 0704 0A43     		orrs	r2, r2, r1
 1323 0706 5A61     		str	r2, [r3, #20]
 1324 0708 0EE0     		b	.L46
 1325              	.L47:
1074:../src/stm32f10x_rcc.c ****   }
1075:../src/stm32f10x_rcc.c ****   else
1076:../src/stm32f10x_rcc.c ****   {
1077:../src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1326              		.loc 1 1077 0
 1327 070a 4FF48053 		mov	r3, #4096
 1328 070e C4F20203 		movt	r3, 16386
 1329 0712 4FF48052 		mov	r2, #4096
 1330 0716 C4F20202 		movt	r2, 16386
 1331 071a 5269     		ldr	r2, [r2, #20]
 1332 071c 1146     		mov	r1, r2
 1333 071e 7A68     		ldr	r2, [r7, #4]
 1334 0720 6FEA0202 		mvn	r2, r2
 1335 0724 0A40     		ands	r2, r2, r1
 1336 0726 5A61     		str	r2, [r3, #20]
 1337              	.L46:
1078:../src/stm32f10x_rcc.c ****   }
1079:../src/stm32f10x_rcc.c **** }
 1338              		.loc 1 1079 0
 1339 0728 07F10C07 		add	r7, r7, #12
 1340 072c BD46     		mov	sp, r7
 1341 072e 80BC     		pop	{r7}
 1342 0730 7047     		bx	lr
 1343              		.cfi_endproc
 1344              	.LFE49:
 1346 0732 00BF     		.align	2
 1347              		.global	RCC_APB2PeriphClockCmd
 1348              		.thumb
 1349              		.thumb_func
 1351              	RCC_APB2PeriphClockCmd:
 1352              	.LFB50:
1080:../src/stm32f10x_rcc.c **** 
1081:../src/stm32f10x_rcc.c **** /**
1082:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1083:../src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1084:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1085:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1086:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1087:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1088:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1089:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1090:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1091:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1092:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1093:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1094:../src/stm32f10x_rcc.c ****   * @retval None
1095:../src/stm32f10x_rcc.c ****   */
1096:../src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1097:../src/stm32f10x_rcc.c **** {
 1353              		.loc 1 1097 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 8
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358 0734 80B4     		push	{r7}
 1359              	.LCFI61:
 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 0736 83B0     		sub	sp, sp, #12
 1363              	.LCFI62:
 1364              		.cfi_def_cfa_offset 16
 1365 0738 00AF     		add	r7, sp, #0
 1366              	.LCFI63:
 1367              		.cfi_def_cfa_register 7
 1368 073a 7860     		str	r0, [r7, #4]
 1369 073c 0B46     		mov	r3, r1
 1370 073e FB70     		strb	r3, [r7, #3]
1098:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1099:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1100:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1101:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1371              		.loc 1 1101 0
 1372 0740 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1373 0742 002B     		cmp	r3, #0
 1374 0744 0DD0     		beq	.L50
1102:../src/stm32f10x_rcc.c ****   {
1103:../src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1375              		.loc 1 1103 0
 1376 0746 4FF48053 		mov	r3, #4096
 1377 074a C4F20203 		movt	r3, 16386
 1378 074e 4FF48052 		mov	r2, #4096
 1379 0752 C4F20202 		movt	r2, 16386
 1380 0756 9269     		ldr	r2, [r2, #24]
 1381 0758 1146     		mov	r1, r2
 1382 075a 7A68     		ldr	r2, [r7, #4]
 1383 075c 0A43     		orrs	r2, r2, r1
 1384 075e 9A61     		str	r2, [r3, #24]
 1385 0760 0EE0     		b	.L49
 1386              	.L50:
1104:../src/stm32f10x_rcc.c ****   }
1105:../src/stm32f10x_rcc.c ****   else
1106:../src/stm32f10x_rcc.c ****   {
1107:../src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1387              		.loc 1 1107 0
 1388 0762 4FF48053 		mov	r3, #4096
 1389 0766 C4F20203 		movt	r3, 16386
 1390 076a 4FF48052 		mov	r2, #4096
 1391 076e C4F20202 		movt	r2, 16386
 1392 0772 9269     		ldr	r2, [r2, #24]
 1393 0774 1146     		mov	r1, r2
 1394 0776 7A68     		ldr	r2, [r7, #4]
 1395 0778 6FEA0202 		mvn	r2, r2
 1396 077c 0A40     		ands	r2, r2, r1
 1397 077e 9A61     		str	r2, [r3, #24]
 1398              	.L49:
1108:../src/stm32f10x_rcc.c ****   }
1109:../src/stm32f10x_rcc.c **** }
 1399              		.loc 1 1109 0
 1400 0780 07F10C07 		add	r7, r7, #12
 1401 0784 BD46     		mov	sp, r7
 1402 0786 80BC     		pop	{r7}
 1403 0788 7047     		bx	lr
 1404              		.cfi_endproc
 1405              	.LFE50:
 1407 078a 00BF     		.align	2
 1408              		.global	RCC_APB1PeriphClockCmd
 1409              		.thumb
 1410              		.thumb_func
 1412              	RCC_APB1PeriphClockCmd:
 1413              	.LFB51:
1110:../src/stm32f10x_rcc.c **** 
1111:../src/stm32f10x_rcc.c **** /**
1112:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1113:../src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1114:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1115:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1116:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1117:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1118:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1119:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1120:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1121:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1122:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1123:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1124:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1125:../src/stm32f10x_rcc.c ****   * @retval None
1126:../src/stm32f10x_rcc.c ****   */
1127:../src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1128:../src/stm32f10x_rcc.c **** {
 1414              		.loc 1 1128 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 8
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418              		@ link register save eliminated.
 1419 078c 80B4     		push	{r7}
 1420              	.LCFI64:
 1421              		.cfi_def_cfa_offset 4
 1422              		.cfi_offset 7, -4
 1423 078e 83B0     		sub	sp, sp, #12
 1424              	.LCFI65:
 1425              		.cfi_def_cfa_offset 16
 1426 0790 00AF     		add	r7, sp, #0
 1427              	.LCFI66:
 1428              		.cfi_def_cfa_register 7
 1429 0792 7860     		str	r0, [r7, #4]
 1430 0794 0B46     		mov	r3, r1
 1431 0796 FB70     		strb	r3, [r7, #3]
1129:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1130:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1131:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1132:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1432              		.loc 1 1132 0
 1433 0798 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1434 079a 002B     		cmp	r3, #0
 1435 079c 0DD0     		beq	.L53
1133:../src/stm32f10x_rcc.c ****   {
1134:../src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1436              		.loc 1 1134 0
 1437 079e 4FF48053 		mov	r3, #4096
 1438 07a2 C4F20203 		movt	r3, 16386
 1439 07a6 4FF48052 		mov	r2, #4096
 1440 07aa C4F20202 		movt	r2, 16386
 1441 07ae D269     		ldr	r2, [r2, #28]
 1442 07b0 1146     		mov	r1, r2
 1443 07b2 7A68     		ldr	r2, [r7, #4]
 1444 07b4 0A43     		orrs	r2, r2, r1
 1445 07b6 DA61     		str	r2, [r3, #28]
 1446 07b8 0EE0     		b	.L52
 1447              	.L53:
1135:../src/stm32f10x_rcc.c ****   }
1136:../src/stm32f10x_rcc.c ****   else
1137:../src/stm32f10x_rcc.c ****   {
1138:../src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1448              		.loc 1 1138 0
 1449 07ba 4FF48053 		mov	r3, #4096
 1450 07be C4F20203 		movt	r3, 16386
 1451 07c2 4FF48052 		mov	r2, #4096
 1452 07c6 C4F20202 		movt	r2, 16386
 1453 07ca D269     		ldr	r2, [r2, #28]
 1454 07cc 1146     		mov	r1, r2
 1455 07ce 7A68     		ldr	r2, [r7, #4]
 1456 07d0 6FEA0202 		mvn	r2, r2
 1457 07d4 0A40     		ands	r2, r2, r1
 1458 07d6 DA61     		str	r2, [r3, #28]
 1459              	.L52:
1139:../src/stm32f10x_rcc.c ****   }
1140:../src/stm32f10x_rcc.c **** }
 1460              		.loc 1 1140 0
 1461 07d8 07F10C07 		add	r7, r7, #12
 1462 07dc BD46     		mov	sp, r7
 1463 07de 80BC     		pop	{r7}
 1464 07e0 7047     		bx	lr
 1465              		.cfi_endproc
 1466              	.LFE51:
 1468 07e2 00BF     		.align	2
 1469              		.global	RCC_APB2PeriphResetCmd
 1470              		.thumb
 1471              		.thumb_func
 1473              	RCC_APB2PeriphResetCmd:
 1474              	.LFB52:
1141:../src/stm32f10x_rcc.c **** 
1142:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1143:../src/stm32f10x_rcc.c **** /**
1144:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1145:../src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1146:../src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1147:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1148:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1149:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1150:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1151:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1152:../src/stm32f10x_rcc.c ****   * @retval None
1153:../src/stm32f10x_rcc.c ****   */
1154:../src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1155:../src/stm32f10x_rcc.c **** {
1156:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1157:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1158:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1159:../src/stm32f10x_rcc.c **** 
1160:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1161:../src/stm32f10x_rcc.c ****   {
1162:../src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1163:../src/stm32f10x_rcc.c ****   }
1164:../src/stm32f10x_rcc.c ****   else
1165:../src/stm32f10x_rcc.c ****   {
1166:../src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1167:../src/stm32f10x_rcc.c ****   }
1168:../src/stm32f10x_rcc.c **** }
1169:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1170:../src/stm32f10x_rcc.c **** 
1171:../src/stm32f10x_rcc.c **** /**
1172:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1173:../src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1174:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1175:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1176:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1177:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1178:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1179:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1180:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1181:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1182:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1183:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1184:../src/stm32f10x_rcc.c ****   * @retval None
1185:../src/stm32f10x_rcc.c ****   */
1186:../src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1187:../src/stm32f10x_rcc.c **** {
 1475              		.loc 1 1187 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 8
 1478              		@ frame_needed = 1, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
 1480 07e4 80B4     		push	{r7}
 1481              	.LCFI67:
 1482              		.cfi_def_cfa_offset 4
 1483              		.cfi_offset 7, -4
 1484 07e6 83B0     		sub	sp, sp, #12
 1485              	.LCFI68:
 1486              		.cfi_def_cfa_offset 16
 1487 07e8 00AF     		add	r7, sp, #0
 1488              	.LCFI69:
 1489              		.cfi_def_cfa_register 7
 1490 07ea 7860     		str	r0, [r7, #4]
 1491 07ec 0B46     		mov	r3, r1
 1492 07ee FB70     		strb	r3, [r7, #3]
1188:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1189:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1190:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1191:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1493              		.loc 1 1191 0
 1494 07f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1495 07f2 002B     		cmp	r3, #0
 1496 07f4 0DD0     		beq	.L56
1192:../src/stm32f10x_rcc.c ****   {
1193:../src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1497              		.loc 1 1193 0
 1498 07f6 4FF48053 		mov	r3, #4096
 1499 07fa C4F20203 		movt	r3, 16386
 1500 07fe 4FF48052 		mov	r2, #4096
 1501 0802 C4F20202 		movt	r2, 16386
 1502 0806 D268     		ldr	r2, [r2, #12]
 1503 0808 1146     		mov	r1, r2
 1504 080a 7A68     		ldr	r2, [r7, #4]
 1505 080c 0A43     		orrs	r2, r2, r1
 1506 080e DA60     		str	r2, [r3, #12]
 1507 0810 0EE0     		b	.L55
 1508              	.L56:
1194:../src/stm32f10x_rcc.c ****   }
1195:../src/stm32f10x_rcc.c ****   else
1196:../src/stm32f10x_rcc.c ****   {
1197:../src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1509              		.loc 1 1197 0
 1510 0812 4FF48053 		mov	r3, #4096
 1511 0816 C4F20203 		movt	r3, 16386
 1512 081a 4FF48052 		mov	r2, #4096
 1513 081e C4F20202 		movt	r2, 16386
 1514 0822 D268     		ldr	r2, [r2, #12]
 1515 0824 1146     		mov	r1, r2
 1516 0826 7A68     		ldr	r2, [r7, #4]
 1517 0828 6FEA0202 		mvn	r2, r2
 1518 082c 0A40     		ands	r2, r2, r1
 1519 082e DA60     		str	r2, [r3, #12]
 1520              	.L55:
1198:../src/stm32f10x_rcc.c ****   }
1199:../src/stm32f10x_rcc.c **** }
 1521              		.loc 1 1199 0
 1522 0830 07F10C07 		add	r7, r7, #12
 1523 0834 BD46     		mov	sp, r7
 1524 0836 80BC     		pop	{r7}
 1525 0838 7047     		bx	lr
 1526              		.cfi_endproc
 1527              	.LFE52:
 1529 083a 00BF     		.align	2
 1530              		.global	RCC_APB1PeriphResetCmd
 1531              		.thumb
 1532              		.thumb_func
 1534              	RCC_APB1PeriphResetCmd:
 1535              	.LFB53:
1200:../src/stm32f10x_rcc.c **** 
1201:../src/stm32f10x_rcc.c **** /**
1202:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1203:../src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1204:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1205:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1206:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1207:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1208:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1209:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1210:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1211:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1212:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1213:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1214:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1215:../src/stm32f10x_rcc.c ****   * @retval None
1216:../src/stm32f10x_rcc.c ****   */
1217:../src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1218:../src/stm32f10x_rcc.c **** {
 1536              		.loc 1 1218 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 8
 1539              		@ frame_needed = 1, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 1541 083c 80B4     		push	{r7}
 1542              	.LCFI70:
 1543              		.cfi_def_cfa_offset 4
 1544              		.cfi_offset 7, -4
 1545 083e 83B0     		sub	sp, sp, #12
 1546              	.LCFI71:
 1547              		.cfi_def_cfa_offset 16
 1548 0840 00AF     		add	r7, sp, #0
 1549              	.LCFI72:
 1550              		.cfi_def_cfa_register 7
 1551 0842 7860     		str	r0, [r7, #4]
 1552 0844 0B46     		mov	r3, r1
 1553 0846 FB70     		strb	r3, [r7, #3]
1219:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1220:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1221:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1222:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1554              		.loc 1 1222 0
 1555 0848 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1556 084a 002B     		cmp	r3, #0
 1557 084c 0DD0     		beq	.L59
1223:../src/stm32f10x_rcc.c ****   {
1224:../src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1558              		.loc 1 1224 0
 1559 084e 4FF48053 		mov	r3, #4096
 1560 0852 C4F20203 		movt	r3, 16386
 1561 0856 4FF48052 		mov	r2, #4096
 1562 085a C4F20202 		movt	r2, 16386
 1563 085e 1269     		ldr	r2, [r2, #16]
 1564 0860 1146     		mov	r1, r2
 1565 0862 7A68     		ldr	r2, [r7, #4]
 1566 0864 0A43     		orrs	r2, r2, r1
 1567 0866 1A61     		str	r2, [r3, #16]
 1568 0868 0EE0     		b	.L58
 1569              	.L59:
1225:../src/stm32f10x_rcc.c ****   }
1226:../src/stm32f10x_rcc.c ****   else
1227:../src/stm32f10x_rcc.c ****   {
1228:../src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1570              		.loc 1 1228 0
 1571 086a 4FF48053 		mov	r3, #4096
 1572 086e C4F20203 		movt	r3, 16386
 1573 0872 4FF48052 		mov	r2, #4096
 1574 0876 C4F20202 		movt	r2, 16386
 1575 087a 1269     		ldr	r2, [r2, #16]
 1576 087c 1146     		mov	r1, r2
 1577 087e 7A68     		ldr	r2, [r7, #4]
 1578 0880 6FEA0202 		mvn	r2, r2
 1579 0884 0A40     		ands	r2, r2, r1
 1580 0886 1A61     		str	r2, [r3, #16]
 1581              	.L58:
1229:../src/stm32f10x_rcc.c ****   }
1230:../src/stm32f10x_rcc.c **** }
 1582              		.loc 1 1230 0
 1583 0888 07F10C07 		add	r7, r7, #12
 1584 088c BD46     		mov	sp, r7
 1585 088e 80BC     		pop	{r7}
 1586 0890 7047     		bx	lr
 1587              		.cfi_endproc
 1588              	.LFE53:
 1590 0892 00BF     		.align	2
 1591              		.global	RCC_BackupResetCmd
 1592              		.thumb
 1593              		.thumb_func
 1595              	RCC_BackupResetCmd:
 1596              	.LFB54:
1231:../src/stm32f10x_rcc.c **** 
1232:../src/stm32f10x_rcc.c **** /**
1233:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1234:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1235:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1236:../src/stm32f10x_rcc.c ****   * @retval None
1237:../src/stm32f10x_rcc.c ****   */
1238:../src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1239:../src/stm32f10x_rcc.c **** {
 1597              		.loc 1 1239 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 8
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602 0894 80B4     		push	{r7}
 1603              	.LCFI73:
 1604              		.cfi_def_cfa_offset 4
 1605              		.cfi_offset 7, -4
 1606 0896 83B0     		sub	sp, sp, #12
 1607              	.LCFI74:
 1608              		.cfi_def_cfa_offset 16
 1609 0898 00AF     		add	r7, sp, #0
 1610              	.LCFI75:
 1611              		.cfi_def_cfa_register 7
 1612 089a 0346     		mov	r3, r0
 1613 089c FB71     		strb	r3, [r7, #7]
1240:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1241:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1614              		.loc 1 1242 0
 1615 089e 4FF48863 		mov	r3, #1088
 1616 08a2 C4F24223 		movt	r3, 16962
 1617 08a6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1618 08a8 1A60     		str	r2, [r3, #0]
1243:../src/stm32f10x_rcc.c **** }
 1619              		.loc 1 1243 0
 1620 08aa 07F10C07 		add	r7, r7, #12
 1621 08ae BD46     		mov	sp, r7
 1622 08b0 80BC     		pop	{r7}
 1623 08b2 7047     		bx	lr
 1624              		.cfi_endproc
 1625              	.LFE54:
 1627              		.align	2
 1628              		.global	RCC_ClockSecuritySystemCmd
 1629              		.thumb
 1630              		.thumb_func
 1632              	RCC_ClockSecuritySystemCmd:
 1633              	.LFB55:
1244:../src/stm32f10x_rcc.c **** 
1245:../src/stm32f10x_rcc.c **** /**
1246:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1247:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1248:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1249:../src/stm32f10x_rcc.c ****   * @retval None
1250:../src/stm32f10x_rcc.c ****   */
1251:../src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1252:../src/stm32f10x_rcc.c **** {
 1634              		.loc 1 1252 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 8
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639 08b4 80B4     		push	{r7}
 1640              	.LCFI76:
 1641              		.cfi_def_cfa_offset 4
 1642              		.cfi_offset 7, -4
 1643 08b6 83B0     		sub	sp, sp, #12
 1644              	.LCFI77:
 1645              		.cfi_def_cfa_offset 16
 1646 08b8 00AF     		add	r7, sp, #0
 1647              	.LCFI78:
 1648              		.cfi_def_cfa_register 7
 1649 08ba 0346     		mov	r3, r0
 1650 08bc FB71     		strb	r3, [r7, #7]
1253:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1254:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1255:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1651              		.loc 1 1255 0
 1652 08be 4FF04C03 		mov	r3, #76
 1653 08c2 C4F24223 		movt	r3, 16962
 1654 08c6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1655 08c8 1A60     		str	r2, [r3, #0]
1256:../src/stm32f10x_rcc.c **** }
 1656              		.loc 1 1256 0
 1657 08ca 07F10C07 		add	r7, r7, #12
 1658 08ce BD46     		mov	sp, r7
 1659 08d0 80BC     		pop	{r7}
 1660 08d2 7047     		bx	lr
 1661              		.cfi_endproc
 1662              	.LFE55:
 1664              		.align	2
 1665              		.global	RCC_MCOConfig
 1666              		.thumb
 1667              		.thumb_func
 1669              	RCC_MCOConfig:
 1670              	.LFB56:
1257:../src/stm32f10x_rcc.c **** 
1258:../src/stm32f10x_rcc.c **** /**
1259:../src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1260:../src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1261:../src/stm32f10x_rcc.c ****   *   
1262:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1263:../src/stm32f10x_rcc.c ****   *   following values:       
1264:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1265:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1266:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1267:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1268:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1269:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1270:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1271:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1272:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1273:../src/stm32f10x_rcc.c ****   * 
1274:../src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1275:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1276:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1277:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1278:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1279:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1280:../src/stm32f10x_rcc.c ****   *   
1281:../src/stm32f10x_rcc.c ****   * @retval None
1282:../src/stm32f10x_rcc.c ****   */
1283:../src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1284:../src/stm32f10x_rcc.c **** {
 1671              		.loc 1 1284 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 8
 1674              		@ frame_needed = 1, uses_anonymous_args = 0
 1675              		@ link register save eliminated.
 1676 08d4 80B4     		push	{r7}
 1677              	.LCFI79:
 1678              		.cfi_def_cfa_offset 4
 1679              		.cfi_offset 7, -4
 1680 08d6 83B0     		sub	sp, sp, #12
 1681              	.LCFI80:
 1682              		.cfi_def_cfa_offset 16
 1683 08d8 00AF     		add	r7, sp, #0
 1684              	.LCFI81:
 1685              		.cfi_def_cfa_register 7
 1686 08da 0346     		mov	r3, r0
 1687 08dc FB71     		strb	r3, [r7, #7]
1285:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1286:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1287:../src/stm32f10x_rcc.c **** 
1288:../src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1289:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1688              		.loc 1 1289 0
 1689 08de 41F20703 		movw	r3, #4103
 1690 08e2 C4F20203 		movt	r3, 16386
 1691 08e6 FA79     		ldrb	r2, [r7, #7]
 1692 08e8 1A70     		strb	r2, [r3, #0]
1290:../src/stm32f10x_rcc.c **** }
 1693              		.loc 1 1290 0
 1694 08ea 07F10C07 		add	r7, r7, #12
 1695 08ee BD46     		mov	sp, r7
 1696 08f0 80BC     		pop	{r7}
 1697 08f2 7047     		bx	lr
 1698              		.cfi_endproc
 1699              	.LFE56:
 1701              		.align	2
 1702              		.global	RCC_GetFlagStatus
 1703              		.thumb
 1704              		.thumb_func
 1706              	RCC_GetFlagStatus:
 1707              	.LFB57:
1291:../src/stm32f10x_rcc.c **** 
1292:../src/stm32f10x_rcc.c **** /**
1293:../src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1294:../src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1295:../src/stm32f10x_rcc.c ****   *   
1296:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1297:../src/stm32f10x_rcc.c ****   *   following values:
1298:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1299:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1300:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1301:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1302:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1303:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1304:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1305:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1306:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1307:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1308:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1309:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1310:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1311:../src/stm32f10x_rcc.c ****   * 
1312:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1313:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1314:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1315:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1316:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1317:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1318:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1319:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1320:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1321:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1322:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1323:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1324:../src/stm32f10x_rcc.c ****   *   
1325:../src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1326:../src/stm32f10x_rcc.c ****   */
1327:../src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1328:../src/stm32f10x_rcc.c **** {
 1708              		.loc 1 1328 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 24
 1711              		@ frame_needed = 1, uses_anonymous_args = 0
 1712              		@ link register save eliminated.
 1713 08f4 80B4     		push	{r7}
 1714              	.LCFI82:
 1715              		.cfi_def_cfa_offset 4
 1716              		.cfi_offset 7, -4
 1717 08f6 87B0     		sub	sp, sp, #28
 1718              	.LCFI83:
 1719              		.cfi_def_cfa_offset 32
 1720 08f8 00AF     		add	r7, sp, #0
 1721              	.LCFI84:
 1722              		.cfi_def_cfa_register 7
 1723 08fa 0346     		mov	r3, r0
 1724 08fc FB71     		strb	r3, [r7, #7]
1329:../src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 1725              		.loc 1 1329 0
 1726 08fe 4FF00003 		mov	r3, #0
 1727 0902 FB60     		str	r3, [r7, #12]
1330:../src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 1728              		.loc 1 1330 0
 1729 0904 4FF00003 		mov	r3, #0
 1730 0908 7B61     		str	r3, [r7, #20]
1331:../src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 1731              		.loc 1 1331 0
 1732 090a 4FF00003 		mov	r3, #0
 1733 090e FB74     		strb	r3, [r7, #19]
1332:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1333:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1334:../src/stm32f10x_rcc.c **** 
1335:../src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1336:../src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1734              		.loc 1 1336 0
 1735 0910 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1736 0912 4FEA5313 		lsr	r3, r3, #5
 1737 0916 DBB2     		uxtb	r3, r3
 1738 0918 FB60     		str	r3, [r7, #12]
1337:../src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1739              		.loc 1 1337 0
 1740 091a FB68     		ldr	r3, [r7, #12]
 1741 091c 012B     		cmp	r3, #1
 1742 091e 06D1     		bne	.L65
1338:../src/stm32f10x_rcc.c ****   {
1339:../src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 1743              		.loc 1 1339 0
 1744 0920 4FF48053 		mov	r3, #4096
 1745 0924 C4F20203 		movt	r3, 16386
 1746 0928 1B68     		ldr	r3, [r3, #0]
 1747 092a 7B61     		str	r3, [r7, #20]
 1748 092c 0FE0     		b	.L66
 1749              	.L65:
1340:../src/stm32f10x_rcc.c ****   }
1341:../src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1750              		.loc 1 1341 0
 1751 092e FB68     		ldr	r3, [r7, #12]
 1752 0930 022B     		cmp	r3, #2
 1753 0932 06D1     		bne	.L67
1342:../src/stm32f10x_rcc.c ****   {
1343:../src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 1754              		.loc 1 1343 0
 1755 0934 4FF48053 		mov	r3, #4096
 1756 0938 C4F20203 		movt	r3, 16386
 1757 093c 1B6A     		ldr	r3, [r3, #32]
 1758 093e 7B61     		str	r3, [r7, #20]
 1759 0940 05E0     		b	.L66
 1760              	.L67:
1344:../src/stm32f10x_rcc.c ****   }
1345:../src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1346:../src/stm32f10x_rcc.c ****   {
1347:../src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1761              		.loc 1 1347 0
 1762 0942 4FF48053 		mov	r3, #4096
 1763 0946 C4F20203 		movt	r3, 16386
 1764 094a 5B6A     		ldr	r3, [r3, #36]
 1765 094c 7B61     		str	r3, [r7, #20]
 1766              	.L66:
1348:../src/stm32f10x_rcc.c ****   }
1349:../src/stm32f10x_rcc.c **** 
1350:../src/stm32f10x_rcc.c ****   /* Get the flag position */
1351:../src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1767              		.loc 1 1351 0
 1768 094e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1769 0950 03F01F03 		and	r3, r3, #31
 1770 0954 FB60     		str	r3, [r7, #12]
1352:../src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1771              		.loc 1 1352 0
 1772 0956 FB68     		ldr	r3, [r7, #12]
 1773 0958 7A69     		ldr	r2, [r7, #20]
 1774 095a 22FA03F3 		lsr	r3, r2, r3
 1775 095e 03F00103 		and	r3, r3, #1
 1776 0962 DBB2     		uxtb	r3, r3
 1777 0964 002B     		cmp	r3, #0
 1778 0966 03D0     		beq	.L68
1353:../src/stm32f10x_rcc.c ****   {
1354:../src/stm32f10x_rcc.c ****     bitstatus = SET;
 1779              		.loc 1 1354 0
 1780 0968 4FF00103 		mov	r3, #1
 1781 096c FB74     		strb	r3, [r7, #19]
 1782 096e 02E0     		b	.L69
 1783              	.L68:
1355:../src/stm32f10x_rcc.c ****   }
1356:../src/stm32f10x_rcc.c ****   else
1357:../src/stm32f10x_rcc.c ****   {
1358:../src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1784              		.loc 1 1358 0
 1785 0970 4FF00003 		mov	r3, #0
 1786 0974 FB74     		strb	r3, [r7, #19]
 1787              	.L69:
1359:../src/stm32f10x_rcc.c ****   }
1360:../src/stm32f10x_rcc.c **** 
1361:../src/stm32f10x_rcc.c ****   /* Return the flag status */
1362:../src/stm32f10x_rcc.c ****   return bitstatus;
 1788              		.loc 1 1362 0
 1789 0976 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1363:../src/stm32f10x_rcc.c **** }
 1790              		.loc 1 1363 0
 1791 0978 1846     		mov	r0, r3
 1792 097a 07F11C07 		add	r7, r7, #28
 1793 097e BD46     		mov	sp, r7
 1794 0980 80BC     		pop	{r7}
 1795 0982 7047     		bx	lr
 1796              		.cfi_endproc
 1797              	.LFE57:
 1799              		.align	2
 1800              		.global	RCC_ClearFlag
 1801              		.thumb
 1802              		.thumb_func
 1804              	RCC_ClearFlag:
 1805              	.LFB58:
1364:../src/stm32f10x_rcc.c **** 
1365:../src/stm32f10x_rcc.c **** /**
1366:../src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1367:../src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1368:../src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1369:../src/stm32f10x_rcc.c ****   * @param  None
1370:../src/stm32f10x_rcc.c ****   * @retval None
1371:../src/stm32f10x_rcc.c ****   */
1372:../src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1373:../src/stm32f10x_rcc.c **** {
 1806              		.loc 1 1373 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810              		@ link register save eliminated.
 1811 0984 80B4     		push	{r7}
 1812              	.LCFI85:
 1813              		.cfi_def_cfa_offset 4
 1814              		.cfi_offset 7, -4
 1815 0986 00AF     		add	r7, sp, #0
 1816              	.LCFI86:
 1817              		.cfi_def_cfa_register 7
1374:../src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1375:../src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1818              		.loc 1 1375 0
 1819 0988 4FF48053 		mov	r3, #4096
 1820 098c C4F20203 		movt	r3, 16386
 1821 0990 4FF48052 		mov	r2, #4096
 1822 0994 C4F20202 		movt	r2, 16386
 1823 0998 526A     		ldr	r2, [r2, #36]
 1824 099a 42F08072 		orr	r2, r2, #16777216
 1825 099e 5A62     		str	r2, [r3, #36]
1376:../src/stm32f10x_rcc.c **** }
 1826              		.loc 1 1376 0
 1827 09a0 BD46     		mov	sp, r7
 1828 09a2 80BC     		pop	{r7}
 1829 09a4 7047     		bx	lr
 1830              		.cfi_endproc
 1831              	.LFE58:
 1833 09a6 00BF     		.align	2
 1834              		.global	RCC_GetITStatus
 1835              		.thumb
 1836              		.thumb_func
 1838              	RCC_GetITStatus:
 1839              	.LFB59:
1377:../src/stm32f10x_rcc.c **** 
1378:../src/stm32f10x_rcc.c **** /**
1379:../src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1380:../src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1381:../src/stm32f10x_rcc.c ****   *   
1382:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1383:../src/stm32f10x_rcc.c ****   *   following values:
1384:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1385:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1386:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1387:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1388:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1389:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1390:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1391:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1392:../src/stm32f10x_rcc.c ****   * 
1393:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1394:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1395:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1396:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1397:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1398:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1399:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1400:../src/stm32f10x_rcc.c ****   *   
1401:../src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1402:../src/stm32f10x_rcc.c ****   */
1403:../src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1404:../src/stm32f10x_rcc.c **** {
 1840              		.loc 1 1404 0
 1841              		.cfi_startproc
 1842              		@ args = 0, pretend = 0, frame = 16
 1843              		@ frame_needed = 1, uses_anonymous_args = 0
 1844              		@ link register save eliminated.
 1845 09a8 80B4     		push	{r7}
 1846              	.LCFI87:
 1847              		.cfi_def_cfa_offset 4
 1848              		.cfi_offset 7, -4
 1849 09aa 85B0     		sub	sp, sp, #20
 1850              	.LCFI88:
 1851              		.cfi_def_cfa_offset 24
 1852 09ac 00AF     		add	r7, sp, #0
 1853              	.LCFI89:
 1854              		.cfi_def_cfa_register 7
 1855 09ae 0346     		mov	r3, r0
 1856 09b0 FB71     		strb	r3, [r7, #7]
1405:../src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 1857              		.loc 1 1405 0
 1858 09b2 4FF00003 		mov	r3, #0
 1859 09b6 FB73     		strb	r3, [r7, #15]
1406:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1407:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1408:../src/stm32f10x_rcc.c **** 
1409:../src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1410:../src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1860              		.loc 1 1410 0
 1861 09b8 4FF48053 		mov	r3, #4096
 1862 09bc C4F20203 		movt	r3, 16386
 1863 09c0 9B68     		ldr	r3, [r3, #8]
 1864 09c2 1A46     		mov	r2, r3
 1865 09c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1866 09c6 1340     		ands	r3, r3, r2
 1867 09c8 002B     		cmp	r3, #0
 1868 09ca 03D0     		beq	.L72
1411:../src/stm32f10x_rcc.c ****   {
1412:../src/stm32f10x_rcc.c ****     bitstatus = SET;
 1869              		.loc 1 1412 0
 1870 09cc 4FF00103 		mov	r3, #1
 1871 09d0 FB73     		strb	r3, [r7, #15]
 1872 09d2 02E0     		b	.L73
 1873              	.L72:
1413:../src/stm32f10x_rcc.c ****   }
1414:../src/stm32f10x_rcc.c ****   else
1415:../src/stm32f10x_rcc.c ****   {
1416:../src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1874              		.loc 1 1416 0
 1875 09d4 4FF00003 		mov	r3, #0
 1876 09d8 FB73     		strb	r3, [r7, #15]
 1877              	.L73:
1417:../src/stm32f10x_rcc.c ****   }
1418:../src/stm32f10x_rcc.c **** 
1419:../src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1420:../src/stm32f10x_rcc.c ****   return  bitstatus;
 1878              		.loc 1 1420 0
 1879 09da FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1421:../src/stm32f10x_rcc.c **** }
 1880              		.loc 1 1421 0
 1881 09dc 1846     		mov	r0, r3
 1882 09de 07F11407 		add	r7, r7, #20
 1883 09e2 BD46     		mov	sp, r7
 1884 09e4 80BC     		pop	{r7}
 1885 09e6 7047     		bx	lr
 1886              		.cfi_endproc
 1887              	.LFE59:
 1889              		.align	2
 1890              		.global	RCC_ClearITPendingBit
 1891              		.thumb
 1892              		.thumb_func
 1894              	RCC_ClearITPendingBit:
 1895              	.LFB60:
1422:../src/stm32f10x_rcc.c **** 
1423:../src/stm32f10x_rcc.c **** /**
1424:../src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1425:../src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1426:../src/stm32f10x_rcc.c ****   *   
1427:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1428:../src/stm32f10x_rcc.c ****   *   of the following values:
1429:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1430:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1431:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1432:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1433:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1434:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1435:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1436:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1437:../src/stm32f10x_rcc.c ****   * 
1438:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1439:../src/stm32f10x_rcc.c ****   *   following values:        
1440:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1441:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1442:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1443:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1444:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1445:../src/stm32f10x_rcc.c ****   *   
1446:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1447:../src/stm32f10x_rcc.c ****   * @retval None
1448:../src/stm32f10x_rcc.c ****   */
1449:../src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1450:../src/stm32f10x_rcc.c **** {
 1896              		.loc 1 1450 0
 1897              		.cfi_startproc
 1898              		@ args = 0, pretend = 0, frame = 8
 1899              		@ frame_needed = 1, uses_anonymous_args = 0
 1900              		@ link register save eliminated.
 1901 09e8 80B4     		push	{r7}
 1902              	.LCFI90:
 1903              		.cfi_def_cfa_offset 4
 1904              		.cfi_offset 7, -4
 1905 09ea 83B0     		sub	sp, sp, #12
 1906              	.LCFI91:
 1907              		.cfi_def_cfa_offset 16
 1908 09ec 00AF     		add	r7, sp, #0
 1909              	.LCFI92:
 1910              		.cfi_def_cfa_register 7
 1911 09ee 0346     		mov	r3, r0
 1912 09f0 FB71     		strb	r3, [r7, #7]
1451:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1452:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1453:../src/stm32f10x_rcc.c **** 
1454:../src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1455:../src/stm32f10x_rcc.c ****      pending bits */
1456:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1913              		.loc 1 1456 0
 1914 09f2 41F20A03 		movw	r3, #4106
 1915 09f6 C4F20203 		movt	r3, 16386
 1916 09fa FA79     		ldrb	r2, [r7, #7]
 1917 09fc 1A70     		strb	r2, [r3, #0]
1457:../src/stm32f10x_rcc.c **** }
 1918              		.loc 1 1457 0
 1919 09fe 07F10C07 		add	r7, r7, #12
 1920 0a02 BD46     		mov	sp, r7
 1921 0a04 80BC     		pop	{r7}
 1922 0a06 7047     		bx	lr
 1923              		.cfi_endproc
 1924              	.LFE60:
 1926              	.Letext0:
 1927              		.file 2 "/home/jachu/elektronika/STM32/gcc-arm-none-eabi-4_6-2012q4/bin/../lib/gcc/arm-none-eabi/4
 1928              		.file 3 "/home/jachu/workspaceSTM/Sumo_STM/src/stm32f10x.h"
 1929              		.file 4 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 1930              		.file 5 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupp
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/ccwN5HIk.s:19     .data:00000000 $d
     /tmp/ccwN5HIk.s:22     .data:00000000 APBAHBPrescTable
     /tmp/ccwN5HIk.s:42     .data:00000010 ADCPrescTable
     /tmp/ccwN5HIk.s:48     .text:00000000 $t
     /tmp/ccwN5HIk.s:53     .text:00000000 RCC_DeInit
     /tmp/ccwN5HIk.s:129    .text:0000009c RCC_HSEConfig
     /tmp/ccwN5HIk.s:209    .text:00000124 RCC_WaitForHSEStartUp
     /tmp/ccwN5HIk.s:1706   .text:000008f4 RCC_GetFlagStatus
     /tmp/ccwN5HIk.s:283    .text:00000188 RCC_AdjustHSICalibrationValue
     /tmp/ccwN5HIk.s:338    .text:000001d0 RCC_HSICmd
     /tmp/ccwN5HIk.s:375    .text:000001f0 RCC_PLLConfig
     /tmp/ccwN5HIk.s:431    .text:00000238 RCC_PLLCmd
     /tmp/ccwN5HIk.s:468    .text:00000258 RCC_SYSCLKConfig
     /tmp/ccwN5HIk.s:521    .text:00000298 RCC_GetSYSCLKSource
     /tmp/ccwN5HIk.s:555    .text:000002b8 RCC_HCLKConfig
     /tmp/ccwN5HIk.s:608    .text:000002f8 RCC_PCLK1Config
     /tmp/ccwN5HIk.s:661    .text:00000338 RCC_PCLK2Config
     /tmp/ccwN5HIk.s:715    .text:0000037c RCC_ITConfig
     /tmp/ccwN5HIk.s:780    .text:000003dc RCC_USBCLKConfig
     /tmp/ccwN5HIk.s:816    .text:000003fc RCC_ADCCLKConfig
     /tmp/ccwN5HIk.s:869    .text:0000043c RCC_LSEConfig
     /tmp/ccwN5HIk.s:938    .text:0000049c RCC_LSICmd
     /tmp/ccwN5HIk.s:975    .text:000004bc RCC_RTCCLKConfig
     /tmp/ccwN5HIk.s:1016   .text:000004e8 RCC_RTCCLKCmd
     /tmp/ccwN5HIk.s:1053   .text:00000508 RCC_GetClocksFreq
     /tmp/ccwN5HIk.s:1290   .text:000006dc RCC_AHBPeriphClockCmd
     /tmp/ccwN5HIk.s:1351   .text:00000734 RCC_APB2PeriphClockCmd
     /tmp/ccwN5HIk.s:1412   .text:0000078c RCC_APB1PeriphClockCmd
     /tmp/ccwN5HIk.s:1473   .text:000007e4 RCC_APB2PeriphResetCmd
     /tmp/ccwN5HIk.s:1534   .text:0000083c RCC_APB1PeriphResetCmd
     /tmp/ccwN5HIk.s:1595   .text:00000894 RCC_BackupResetCmd
     /tmp/ccwN5HIk.s:1632   .text:000008b4 RCC_ClockSecuritySystemCmd
     /tmp/ccwN5HIk.s:1669   .text:000008d4 RCC_MCOConfig
     /tmp/ccwN5HIk.s:1804   .text:00000984 RCC_ClearFlag
     /tmp/ccwN5HIk.s:1838   .text:000009a8 RCC_GetITStatus
     /tmp/ccwN5HIk.s:1894   .text:000009e8 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
