   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f10x.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.data
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 00512502 		.word	36000000
  25              		.global	AHBPrescTable
  26              		.align	2
  29              	AHBPrescTable:
  30 0004 00       		.byte	0
  31 0005 00       		.byte	0
  32 0006 00       		.byte	0
  33 0007 00       		.byte	0
  34 0008 00       		.byte	0
  35 0009 00       		.byte	0
  36 000a 00       		.byte	0
  37 000b 00       		.byte	0
  38 000c 01       		.byte	1
  39 000d 02       		.byte	2
  40 000e 03       		.byte	3
  41 000f 04       		.byte	4
  42 0010 06       		.byte	6
  43 0011 07       		.byte	7
  44 0012 08       		.byte	8
  45 0013 09       		.byte	9
  46              		.text
  47              		.align	2
  48              		.global	SystemInit
  49              		.thumb
  50              		.thumb_func
  52              	SystemInit:
  53              	.LFB29:
  54              		.file 1 "../src/system_stm32f10x.c"
   1:../src/system_stm32f10x.c **** /**
   2:../src/system_stm32f10x.c ****   ******************************************************************************
   3:../src/system_stm32f10x.c ****   * @file    system_stm32f10x.c
   4:../src/system_stm32f10x.c ****   * @author  MCD Application Team
   5:../src/system_stm32f10x.c ****   * @version V3.5.0
   6:../src/system_stm32f10x.c ****   * @date    11-March-2011
   7:../src/system_stm32f10x.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:../src/system_stm32f10x.c ****   * 
   9:../src/system_stm32f10x.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:../src/system_stm32f10x.c ****   *     user application:
  11:../src/system_stm32f10x.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:../src/system_stm32f10x.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:../src/system_stm32f10x.c ****   *                      This function is called at startup just after reset and 
  14:../src/system_stm32f10x.c ****   *                      before branch to main program. This call is made inside
  15:../src/system_stm32f10x.c ****   *                      the "startup_stm32f10x_xx.s" file.
  16:../src/system_stm32f10x.c ****   *
  17:../src/system_stm32f10x.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:../src/system_stm32f10x.c ****   *                                  by the user application to setup the SysTick 
  19:../src/system_stm32f10x.c ****   *                                  timer or configure other parameters.
  20:../src/system_stm32f10x.c ****   *                                     
  21:../src/system_stm32f10x.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:../src/system_stm32f10x.c ****   *                                 be called whenever the core clock is changed
  23:../src/system_stm32f10x.c ****   *                                 during program execution.
  24:../src/system_stm32f10x.c ****   *
  25:../src/system_stm32f10x.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:../src/system_stm32f10x.c ****   *    Then SystemInit() function is called, in "startup_stm32f10x_xx.s" file, to
  27:../src/system_stm32f10x.c ****   *    configure the system clock before to branch to main program.
  28:../src/system_stm32f10x.c ****   *
  29:../src/system_stm32f10x.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  30:../src/system_stm32f10x.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  31:../src/system_stm32f10x.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  32:../src/system_stm32f10x.c ****   *
  33:../src/system_stm32f10x.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depedning on
  34:../src/system_stm32f10x.c ****   *    the product used), refer to "HSE_VALUE" define in "stm32f10x.h" file. 
  35:../src/system_stm32f10x.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  36:../src/system_stm32f10x.c ****   *    are using different crystal you have to adapt the HSE value to your own
  37:../src/system_stm32f10x.c ****   *    configuration.
  38:../src/system_stm32f10x.c ****   *        
  39:../src/system_stm32f10x.c ****   ******************************************************************************
  40:../src/system_stm32f10x.c ****   * @attention
  41:../src/system_stm32f10x.c ****   *
  42:../src/system_stm32f10x.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  43:../src/system_stm32f10x.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  44:../src/system_stm32f10x.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  45:../src/system_stm32f10x.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  46:../src/system_stm32f10x.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  47:../src/system_stm32f10x.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  48:../src/system_stm32f10x.c ****   *
  49:../src/system_stm32f10x.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  50:../src/system_stm32f10x.c ****   ******************************************************************************
  51:../src/system_stm32f10x.c ****   */
  52:../src/system_stm32f10x.c **** 
  53:../src/system_stm32f10x.c **** /** @addtogroup CMSIS
  54:../src/system_stm32f10x.c ****   * @{
  55:../src/system_stm32f10x.c ****   */
  56:../src/system_stm32f10x.c **** 
  57:../src/system_stm32f10x.c **** /** @addtogroup stm32f10x_system
  58:../src/system_stm32f10x.c ****   * @{
  59:../src/system_stm32f10x.c ****   */  
  60:../src/system_stm32f10x.c ****   
  61:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Includes
  62:../src/system_stm32f10x.c ****   * @{
  63:../src/system_stm32f10x.c ****   */
  64:../src/system_stm32f10x.c **** 
  65:../src/system_stm32f10x.c **** #include "stm32f10x.h"
  66:../src/system_stm32f10x.c **** 
  67:../src/system_stm32f10x.c **** /**
  68:../src/system_stm32f10x.c ****   * @}
  69:../src/system_stm32f10x.c ****   */
  70:../src/system_stm32f10x.c **** 
  71:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  72:../src/system_stm32f10x.c ****   * @{
  73:../src/system_stm32f10x.c ****   */
  74:../src/system_stm32f10x.c **** 
  75:../src/system_stm32f10x.c **** /**
  76:../src/system_stm32f10x.c ****   * @}
  77:../src/system_stm32f10x.c ****   */
  78:../src/system_stm32f10x.c **** 
  79:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Defines
  80:../src/system_stm32f10x.c ****   * @{
  81:../src/system_stm32f10x.c ****   */
  82:../src/system_stm32f10x.c **** 
  83:../src/system_stm32f10x.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  84:../src/system_stm32f10x.c ****    frequency (after reset the HSI is used as SYSCLK source)
  85:../src/system_stm32f10x.c ****    
  86:../src/system_stm32f10x.c ****    IMPORTANT NOTE:
  87:../src/system_stm32f10x.c ****    ============== 
  88:../src/system_stm32f10x.c ****    1. After each device reset the HSI is used as System clock source.
  89:../src/system_stm32f10x.c **** 
  90:../src/system_stm32f10x.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  91:../src/system_stm32f10x.c ****       maximum frequency.
  92:../src/system_stm32f10x.c ****       
  93:../src/system_stm32f10x.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  94:../src/system_stm32f10x.c ****     source.
  95:../src/system_stm32f10x.c **** 
  96:../src/system_stm32f10x.c ****    4. The System clock configuration functions provided within this file assume that:
  97:../src/system_stm32f10x.c ****         - For Low, Medium and High density Value line devices an external 8MHz 
  98:../src/system_stm32f10x.c ****           crystal is used to drive the System clock.
  99:../src/system_stm32f10x.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
 100:../src/system_stm32f10x.c ****           used to drive the System clock.
 101:../src/system_stm32f10x.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
 102:../src/system_stm32f10x.c ****           the System clock.
 103:../src/system_stm32f10x.c ****      If you are using different crystal you have to adapt those functions accordingly.
 104:../src/system_stm32f10x.c ****     */
 105:../src/system_stm32f10x.c ****     
 106:../src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 107:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 108:../src/system_stm32f10x.c ****  #define SYSCLK_FREQ_24MHz  24000000
 109:../src/system_stm32f10x.c **** #else
 110:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 111:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
 112:../src/system_stm32f10x.c **** #define SYSCLK_FREQ_36MHz  36000000
 113:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
 114:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
 115:../src/system_stm32f10x.c **** /* #define SYSCLK_FREQ_72MHz  72000000 */
 116:../src/system_stm32f10x.c **** #endif
 117:../src/system_stm32f10x.c **** 
 118:../src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 119:../src/system_stm32f10x.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) or on 
 120:../src/system_stm32f10x.c ****      STM32100E-EVAL board (STM32 High-density value line devices) as data memory */ 
 121:../src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 122:../src/system_stm32f10x.c **** /* #define DATA_IN_ExtSRAM */
 123:../src/system_stm32f10x.c **** #endif
 124:../src/system_stm32f10x.c **** 
 125:../src/system_stm32f10x.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 126:../src/system_stm32f10x.c ****      Internal SRAM. */ 
 127:../src/system_stm32f10x.c **** /* #define VECT_TAB_SRAM */
 128:../src/system_stm32f10x.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
 129:../src/system_stm32f10x.c ****                                   This value must be a multiple of 0x200. */
 130:../src/system_stm32f10x.c **** 
 131:../src/system_stm32f10x.c **** 
 132:../src/system_stm32f10x.c **** /**
 133:../src/system_stm32f10x.c ****   * @}
 134:../src/system_stm32f10x.c ****   */
 135:../src/system_stm32f10x.c **** 
 136:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Macros
 137:../src/system_stm32f10x.c ****   * @{
 138:../src/system_stm32f10x.c ****   */
 139:../src/system_stm32f10x.c **** 
 140:../src/system_stm32f10x.c **** /**
 141:../src/system_stm32f10x.c ****   * @}
 142:../src/system_stm32f10x.c ****   */
 143:../src/system_stm32f10x.c **** 
 144:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Variables
 145:../src/system_stm32f10x.c ****   * @{
 146:../src/system_stm32f10x.c ****   */
 147:../src/system_stm32f10x.c **** 
 148:../src/system_stm32f10x.c **** /*******************************************************************************
 149:../src/system_stm32f10x.c **** *  Clock Definitions
 150:../src/system_stm32f10x.c **** *******************************************************************************/
 151:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 152:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 153:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 154:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 155:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 156:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 157:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 158:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 159:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 160:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 161:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 162:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 163:../src/system_stm32f10x.c **** #else /*!< HSI Selected as System Clock source */
 164:../src/system_stm32f10x.c ****   uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
 165:../src/system_stm32f10x.c **** #endif
 166:../src/system_stm32f10x.c **** 
 167:../src/system_stm32f10x.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 168:../src/system_stm32f10x.c **** /**
 169:../src/system_stm32f10x.c ****   * @}
 170:../src/system_stm32f10x.c ****   */
 171:../src/system_stm32f10x.c **** 
 172:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 173:../src/system_stm32f10x.c ****   * @{
 174:../src/system_stm32f10x.c ****   */
 175:../src/system_stm32f10x.c **** 
 176:../src/system_stm32f10x.c **** static void SetSysClock(void);
 177:../src/system_stm32f10x.c **** 
 178:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 179:../src/system_stm32f10x.c ****   static void SetSysClockToHSE(void);
 180:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 181:../src/system_stm32f10x.c ****   static void SetSysClockTo24(void);
 182:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 183:../src/system_stm32f10x.c ****   static void SetSysClockTo36(void);
 184:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 185:../src/system_stm32f10x.c ****   static void SetSysClockTo48(void);
 186:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 187:../src/system_stm32f10x.c ****   static void SetSysClockTo56(void);  
 188:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 189:../src/system_stm32f10x.c ****   static void SetSysClockTo72(void);
 190:../src/system_stm32f10x.c **** #endif
 191:../src/system_stm32f10x.c **** 
 192:../src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 193:../src/system_stm32f10x.c ****   static void SystemInit_ExtMemCtl(void); 
 194:../src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 195:../src/system_stm32f10x.c **** 
 196:../src/system_stm32f10x.c **** /**
 197:../src/system_stm32f10x.c ****   * @}
 198:../src/system_stm32f10x.c ****   */
 199:../src/system_stm32f10x.c **** 
 200:../src/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Functions
 201:../src/system_stm32f10x.c ****   * @{
 202:../src/system_stm32f10x.c ****   */
 203:../src/system_stm32f10x.c **** 
 204:../src/system_stm32f10x.c **** /**
 205:../src/system_stm32f10x.c ****   * @brief  Setup the microcontroller system
 206:../src/system_stm32f10x.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 207:../src/system_stm32f10x.c ****   *         SystemCoreClock variable.
 208:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 209:../src/system_stm32f10x.c ****   * @param  None
 210:../src/system_stm32f10x.c ****   * @retval None
 211:../src/system_stm32f10x.c ****   */
 212:../src/system_stm32f10x.c **** void SystemInit (void)
 213:../src/system_stm32f10x.c **** {
  55              		.loc 1 213 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59 0000 80B5     		push	{r7, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 14, -4
  63              		.cfi_offset 7, -8
  64 0002 00AF     		add	r7, sp, #0
  65              	.LCFI1:
  66              		.cfi_def_cfa_register 7
 214:../src/system_stm32f10x.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 215:../src/system_stm32f10x.c ****   /* Set HSION bit */
 216:../src/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  67              		.loc 1 216 0
  68 0004 4FF48053 		mov	r3, #4096
  69 0008 C4F20203 		movt	r3, 16386
  70 000c 4FF48052 		mov	r2, #4096
  71 0010 C4F20202 		movt	r2, 16386
  72 0014 1268     		ldr	r2, [r2, #0]
  73 0016 42F00102 		orr	r2, r2, #1
  74 001a 1A60     		str	r2, [r3, #0]
 217:../src/system_stm32f10x.c **** 
 218:../src/system_stm32f10x.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 219:../src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 220:../src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  75              		.loc 1 220 0
  76 001c 4FF48052 		mov	r2, #4096
  77 0020 C4F20202 		movt	r2, 16386
  78 0024 4FF48053 		mov	r3, #4096
  79 0028 C4F20203 		movt	r3, 16386
  80 002c 5B68     		ldr	r3, [r3, #4]
  81 002e 1946     		mov	r1, r3
  82 0030 4FF00003 		mov	r3, #0
  83 0034 CFF6FF03 		movt	r3, 63743
  84 0038 0B40     		ands	r3, r3, r1
  85 003a 5360     		str	r3, [r2, #4]
 221:../src/system_stm32f10x.c **** #else
 222:../src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 223:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */   
 224:../src/system_stm32f10x.c ****   
 225:../src/system_stm32f10x.c ****   /* Reset HSEON, CSSON and PLLON bits */
 226:../src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  86              		.loc 1 226 0
  87 003c 4FF48053 		mov	r3, #4096
  88 0040 C4F20203 		movt	r3, 16386
  89 0044 4FF48052 		mov	r2, #4096
  90 0048 C4F20202 		movt	r2, 16386
  91 004c 1268     		ldr	r2, [r2, #0]
  92 004e 22F08472 		bic	r2, r2, #17301504
  93 0052 22F48032 		bic	r2, r2, #65536
  94 0056 1A60     		str	r2, [r3, #0]
 227:../src/system_stm32f10x.c **** 
 228:../src/system_stm32f10x.c ****   /* Reset HSEBYP bit */
 229:../src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  95              		.loc 1 229 0
  96 0058 4FF48053 		mov	r3, #4096
  97 005c C4F20203 		movt	r3, 16386
  98 0060 4FF48052 		mov	r2, #4096
  99 0064 C4F20202 		movt	r2, 16386
 100 0068 1268     		ldr	r2, [r2, #0]
 101 006a 22F48022 		bic	r2, r2, #262144
 102 006e 1A60     		str	r2, [r3, #0]
 230:../src/system_stm32f10x.c **** 
 231:../src/system_stm32f10x.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 232:../src/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 103              		.loc 1 232 0
 104 0070 4FF48053 		mov	r3, #4096
 105 0074 C4F20203 		movt	r3, 16386
 106 0078 4FF48052 		mov	r2, #4096
 107 007c C4F20202 		movt	r2, 16386
 108 0080 5268     		ldr	r2, [r2, #4]
 109 0082 22F4FE02 		bic	r2, r2, #8323072
 110 0086 5A60     		str	r2, [r3, #4]
 233:../src/system_stm32f10x.c **** 
 234:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 235:../src/system_stm32f10x.c ****   /* Reset PLL2ON and PLL3ON bits */
 236:../src/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 237:../src/system_stm32f10x.c **** 
 238:../src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 239:../src/system_stm32f10x.c ****   RCC->CIR = 0x00FF0000;
 240:../src/system_stm32f10x.c **** 
 241:../src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 242:../src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;
 243:../src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 244:../src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 245:../src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 246:../src/system_stm32f10x.c **** 
 247:../src/system_stm32f10x.c ****   /* Reset CFGR2 register */
 248:../src/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;      
 249:../src/system_stm32f10x.c **** #else
 250:../src/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 251:../src/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 111              		.loc 1 251 0
 112 0088 4FF48053 		mov	r3, #4096
 113 008c C4F20203 		movt	r3, 16386
 114 0090 4FF41F02 		mov	r2, #10420224
 115 0094 9A60     		str	r2, [r3, #8]
 252:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 253:../src/system_stm32f10x.c ****     
 254:../src/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 255:../src/system_stm32f10x.c ****   #ifdef DATA_IN_ExtSRAM
 256:../src/system_stm32f10x.c ****     SystemInit_ExtMemCtl(); 
 257:../src/system_stm32f10x.c ****   #endif /* DATA_IN_ExtSRAM */
 258:../src/system_stm32f10x.c **** #endif 
 259:../src/system_stm32f10x.c **** 
 260:../src/system_stm32f10x.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 261:../src/system_stm32f10x.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 262:../src/system_stm32f10x.c ****   SetSysClock();
 116              		.loc 1 262 0
 117 0096 00F0ADF8 		bl	SetSysClock
 263:../src/system_stm32f10x.c **** 
 264:../src/system_stm32f10x.c **** #ifdef VECT_TAB_SRAM
 265:../src/system_stm32f10x.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 266:../src/system_stm32f10x.c **** #else
 267:../src/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 118              		.loc 1 267 0
 119 009a 4FF46D43 		mov	r3, #60672
 120 009e CEF20003 		movt	r3, 57344
 121 00a2 4FF00062 		mov	r2, #134217728
 122 00a6 9A60     		str	r2, [r3, #8]
 268:../src/system_stm32f10x.c **** #endif 
 269:../src/system_stm32f10x.c **** }
 123              		.loc 1 269 0
 124 00a8 80BD     		pop	{r7, pc}
 125              		.cfi_endproc
 126              	.LFE29:
 128 00aa 00BF     		.align	2
 129              		.global	SystemCoreClockUpdate
 130              		.thumb
 131              		.thumb_func
 133              	SystemCoreClockUpdate:
 134              	.LFB30:
 270:../src/system_stm32f10x.c **** 
 271:../src/system_stm32f10x.c **** /**
 272:../src/system_stm32f10x.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 273:../src/system_stm32f10x.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 274:../src/system_stm32f10x.c ****   *         be used by the user application to setup the SysTick timer or configure
 275:../src/system_stm32f10x.c ****   *         other parameters.
 276:../src/system_stm32f10x.c ****   *           
 277:../src/system_stm32f10x.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 278:../src/system_stm32f10x.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 279:../src/system_stm32f10x.c ****   *         based on this variable will be incorrect.         
 280:../src/system_stm32f10x.c ****   *     
 281:../src/system_stm32f10x.c ****   * @note   - The system frequency computed by this function is not the real 
 282:../src/system_stm32f10x.c ****   *           frequency in the chip. It is calculated based on the predefined 
 283:../src/system_stm32f10x.c ****   *           constant and the selected clock source:
 284:../src/system_stm32f10x.c ****   *             
 285:../src/system_stm32f10x.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 286:../src/system_stm32f10x.c ****   *                                              
 287:../src/system_stm32f10x.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 288:../src/system_stm32f10x.c ****   *                          
 289:../src/system_stm32f10x.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 290:../src/system_stm32f10x.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 291:../src/system_stm32f10x.c ****   *         
 292:../src/system_stm32f10x.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 293:../src/system_stm32f10x.c ****   *             8 MHz) but the real value may vary depending on the variations
 294:../src/system_stm32f10x.c ****   *             in voltage and temperature.   
 295:../src/system_stm32f10x.c ****   *    
 296:../src/system_stm32f10x.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 297:../src/system_stm32f10x.c ****   *              8 MHz or 25 MHz, depedning on the product used), user has to ensure
 298:../src/system_stm32f10x.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 299:../src/system_stm32f10x.c ****   *              Otherwise, this function may have wrong result.
 300:../src/system_stm32f10x.c ****   *                
 301:../src/system_stm32f10x.c ****   *         - The result of this function could be not correct when using fractional
 302:../src/system_stm32f10x.c ****   *           value for HSE crystal.
 303:../src/system_stm32f10x.c ****   * @param  None
 304:../src/system_stm32f10x.c ****   * @retval None
 305:../src/system_stm32f10x.c ****   */
 306:../src/system_stm32f10x.c **** void SystemCoreClockUpdate (void)
 307:../src/system_stm32f10x.c **** {
 135              		.loc 1 307 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 16
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 140 00ac 80B4     		push	{r7}
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 7, -4
 144 00ae 85B0     		sub	sp, sp, #20
 145              	.LCFI3:
 146              		.cfi_def_cfa_offset 24
 147 00b0 00AF     		add	r7, sp, #0
 148              	.LCFI4:
 149              		.cfi_def_cfa_register 7
 308:../src/system_stm32f10x.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 150              		.loc 1 308 0
 151 00b2 4FF00003 		mov	r3, #0
 152 00b6 FB60     		str	r3, [r7, #12]
 153 00b8 4FF00003 		mov	r3, #0
 154 00bc BB60     		str	r3, [r7, #8]
 155 00be 4FF00003 		mov	r3, #0
 156 00c2 7B60     		str	r3, [r7, #4]
 309:../src/system_stm32f10x.c **** 
 310:../src/system_stm32f10x.c **** #ifdef  STM32F10X_CL
 311:../src/system_stm32f10x.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 312:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 313:../src/system_stm32f10x.c **** 
 314:../src/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 315:../src/system_stm32f10x.c ****   uint32_t prediv1factor = 0;
 316:../src/system_stm32f10x.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
 317:../src/system_stm32f10x.c ****     
 318:../src/system_stm32f10x.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 319:../src/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 157              		.loc 1 319 0
 158 00c4 4FF48053 		mov	r3, #4096
 159 00c8 C4F20203 		movt	r3, 16386
 160 00cc 5B68     		ldr	r3, [r3, #4]
 161 00ce 03F00C03 		and	r3, r3, #12
 162 00d2 FB60     		str	r3, [r7, #12]
 320:../src/system_stm32f10x.c ****   
 321:../src/system_stm32f10x.c ****   switch (tmp)
 163              		.loc 1 321 0
 164 00d4 FB68     		ldr	r3, [r7, #12]
 165 00d6 042B     		cmp	r3, #4
 166 00d8 0DD0     		beq	.L5
 167 00da 082B     		cmp	r3, #8
 168 00dc 15D0     		beq	.L6
 169 00de 002B     		cmp	r3, #0
 170 00e0 5CD1     		bne	.L11
 171              	.L4:
 322:../src/system_stm32f10x.c ****   {
 323:../src/system_stm32f10x.c ****     case 0x00:  /* HSI used as system clock */
 324:../src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 172              		.loc 1 324 0
 173 00e2 40F20003 		movw	r3, #:lower16:SystemCoreClock
 174 00e6 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 175 00ea 4FF49052 		mov	r2, #4608
 176 00ee C0F27A02 		movt	r2, 122
 177 00f2 1A60     		str	r2, [r3, #0]
 325:../src/system_stm32f10x.c ****       break;
 178              		.loc 1 325 0
 179 00f4 5CE0     		b	.L7
 180              	.L5:
 326:../src/system_stm32f10x.c ****     case 0x04:  /* HSE used as system clock */
 327:../src/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 181              		.loc 1 327 0
 182 00f6 40F20003 		movw	r3, #:lower16:SystemCoreClock
 183 00fa C0F20003 		movt	r3, #:upper16:SystemCoreClock
 184 00fe 4FF49052 		mov	r2, #4608
 185 0102 C0F27A02 		movt	r2, 122
 186 0106 1A60     		str	r2, [r3, #0]
 328:../src/system_stm32f10x.c ****       break;
 187              		.loc 1 328 0
 188 0108 52E0     		b	.L7
 189              	.L6:
 329:../src/system_stm32f10x.c ****     case 0x08:  /* PLL used as system clock */
 330:../src/system_stm32f10x.c **** 
 331:../src/system_stm32f10x.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 332:../src/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 190              		.loc 1 332 0
 191 010a 4FF48053 		mov	r3, #4096
 192 010e C4F20203 		movt	r3, 16386
 193 0112 5B68     		ldr	r3, [r3, #4]
 194 0114 03F47013 		and	r3, r3, #3932160
 195 0118 BB60     		str	r3, [r7, #8]
 333:../src/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 196              		.loc 1 333 0
 197 011a 4FF48053 		mov	r3, #4096
 198 011e C4F20203 		movt	r3, 16386
 199 0122 5B68     		ldr	r3, [r3, #4]
 200 0124 03F48033 		and	r3, r3, #65536
 201 0128 7B60     		str	r3, [r7, #4]
 334:../src/system_stm32f10x.c ****       
 335:../src/system_stm32f10x.c **** #ifndef STM32F10X_CL      
 336:../src/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 202              		.loc 1 336 0
 203 012a BB68     		ldr	r3, [r7, #8]
 204 012c 4FEA9343 		lsr	r3, r3, #18
 205 0130 03F10203 		add	r3, r3, #2
 206 0134 BB60     		str	r3, [r7, #8]
 337:../src/system_stm32f10x.c ****       
 338:../src/system_stm32f10x.c ****       if (pllsource == 0x00)
 207              		.loc 1 338 0
 208 0136 7B68     		ldr	r3, [r7, #4]
 209 0138 002B     		cmp	r3, #0
 210 013a 0CD1     		bne	.L8
 339:../src/system_stm32f10x.c ****       {
 340:../src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 341:../src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 211              		.loc 1 341 0
 212 013c BA68     		ldr	r2, [r7, #8]
 213 013e 4FF41063 		mov	r3, #2304
 214 0142 C0F23D03 		movt	r3, 61
 215 0146 03FB02F2 		mul	r2, r3, r2
 216 014a 40F20003 		movw	r3, #:lower16:SystemCoreClock
 217 014e C0F20003 		movt	r3, #:upper16:SystemCoreClock
 218 0152 1A60     		str	r2, [r3, #0]
 342:../src/system_stm32f10x.c ****       }
 343:../src/system_stm32f10x.c ****       else
 344:../src/system_stm32f10x.c ****       {
 345:../src/system_stm32f10x.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 346:../src/system_stm32f10x.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 347:../src/system_stm32f10x.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 348:../src/system_stm32f10x.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 349:../src/system_stm32f10x.c ****  #else
 350:../src/system_stm32f10x.c ****         /* HSE selected as PLL clock entry */
 351:../src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 352:../src/system_stm32f10x.c ****         {/* HSE oscillator clock divided by 2 */
 353:../src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 354:../src/system_stm32f10x.c ****         }
 355:../src/system_stm32f10x.c ****         else
 356:../src/system_stm32f10x.c ****         {
 357:../src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 358:../src/system_stm32f10x.c ****         }
 359:../src/system_stm32f10x.c ****  #endif
 360:../src/system_stm32f10x.c ****       }
 361:../src/system_stm32f10x.c **** #else
 362:../src/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 363:../src/system_stm32f10x.c ****       
 364:../src/system_stm32f10x.c ****       if (pllmull != 0x0D)
 365:../src/system_stm32f10x.c ****       {
 366:../src/system_stm32f10x.c ****          pllmull += 2;
 367:../src/system_stm32f10x.c ****       }
 368:../src/system_stm32f10x.c ****       else
 369:../src/system_stm32f10x.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 370:../src/system_stm32f10x.c ****         pllmull = 13 / 2; 
 371:../src/system_stm32f10x.c ****       }
 372:../src/system_stm32f10x.c ****             
 373:../src/system_stm32f10x.c ****       if (pllsource == 0x00)
 374:../src/system_stm32f10x.c ****       {
 375:../src/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 376:../src/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 377:../src/system_stm32f10x.c ****       }
 378:../src/system_stm32f10x.c ****       else
 379:../src/system_stm32f10x.c ****       {/* PREDIV1 selected as PLL clock entry */
 380:../src/system_stm32f10x.c ****         
 381:../src/system_stm32f10x.c ****         /* Get PREDIV1 clock source and division factor */
 382:../src/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 383:../src/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 384:../src/system_stm32f10x.c ****         
 385:../src/system_stm32f10x.c ****         if (prediv1source == 0)
 386:../src/system_stm32f10x.c ****         { 
 387:../src/system_stm32f10x.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 388:../src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 389:../src/system_stm32f10x.c ****         }
 390:../src/system_stm32f10x.c ****         else
 391:../src/system_stm32f10x.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 392:../src/system_stm32f10x.c ****           
 393:../src/system_stm32f10x.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 394:../src/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 395:../src/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 396:../src/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 397:../src/system_stm32f10x.c ****         }
 398:../src/system_stm32f10x.c ****       }
 399:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */ 
 400:../src/system_stm32f10x.c ****       break;
 219              		.loc 1 400 0
 220 0154 2CE0     		b	.L7
 221              	.L8:
 351:../src/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 222              		.loc 1 351 0
 223 0156 4FF48053 		mov	r3, #4096
 224 015a C4F20203 		movt	r3, 16386
 225 015e 5B68     		ldr	r3, [r3, #4]
 226 0160 03F40033 		and	r3, r3, #131072
 227 0164 002B     		cmp	r3, #0
 228 0166 0CD0     		beq	.L10
 353:../src/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 229              		.loc 1 353 0
 230 0168 BA68     		ldr	r2, [r7, #8]
 231 016a 4FF41063 		mov	r3, #2304
 232 016e C0F23D03 		movt	r3, 61
 233 0172 03FB02F2 		mul	r2, r3, r2
 234 0176 40F20003 		movw	r3, #:lower16:SystemCoreClock
 235 017a C0F20003 		movt	r3, #:upper16:SystemCoreClock
 236 017e 1A60     		str	r2, [r3, #0]
 237              		.loc 1 400 0
 238 0180 16E0     		b	.L7
 239              	.L10:
 357:../src/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 240              		.loc 1 357 0
 241 0182 BA68     		ldr	r2, [r7, #8]
 242 0184 4FF49053 		mov	r3, #4608
 243 0188 C0F27A03 		movt	r3, 122
 244 018c 03FB02F2 		mul	r2, r3, r2
 245 0190 40F20003 		movw	r3, #:lower16:SystemCoreClock
 246 0194 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 247 0198 1A60     		str	r2, [r3, #0]
 248              		.loc 1 400 0
 249 019a 09E0     		b	.L7
 250              	.L11:
 401:../src/system_stm32f10x.c **** 
 402:../src/system_stm32f10x.c ****     default:
 403:../src/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 251              		.loc 1 403 0
 252 019c 40F20003 		movw	r3, #:lower16:SystemCoreClock
 253 01a0 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 254 01a4 4FF49052 		mov	r2, #4608
 255 01a8 C0F27A02 		movt	r2, 122
 256 01ac 1A60     		str	r2, [r3, #0]
 404:../src/system_stm32f10x.c ****       break;
 257              		.loc 1 404 0
 258 01ae 00BF     		nop
 259              	.L7:
 405:../src/system_stm32f10x.c ****   }
 406:../src/system_stm32f10x.c ****   
 407:../src/system_stm32f10x.c ****   /* Compute HCLK clock frequency ----------------*/
 408:../src/system_stm32f10x.c ****   /* Get HCLK prescaler */
 409:../src/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 260              		.loc 1 409 0
 261 01b0 4FF48053 		mov	r3, #4096
 262 01b4 C4F20203 		movt	r3, 16386
 263 01b8 5B68     		ldr	r3, [r3, #4]
 264 01ba 03F0F003 		and	r3, r3, #240
 265 01be 4FEA1312 		lsr	r2, r3, #4
 266 01c2 40F20003 		movw	r3, #:lower16:AHBPrescTable
 267 01c6 C0F20003 		movt	r3, #:upper16:AHBPrescTable
 268 01ca 9B5C     		ldrb	r3, [r3, r2]
 269 01cc DBB2     		uxtb	r3, r3
 270 01ce FB60     		str	r3, [r7, #12]
 410:../src/system_stm32f10x.c ****   /* HCLK clock frequency */
 411:../src/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 271              		.loc 1 411 0
 272 01d0 40F20003 		movw	r3, #:lower16:SystemCoreClock
 273 01d4 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 274 01d8 1A68     		ldr	r2, [r3, #0]
 275 01da FB68     		ldr	r3, [r7, #12]
 276 01dc 22FA03F2 		lsr	r2, r2, r3
 277 01e0 40F20003 		movw	r3, #:lower16:SystemCoreClock
 278 01e4 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 279 01e8 1A60     		str	r2, [r3, #0]
 412:../src/system_stm32f10x.c **** }
 280              		.loc 1 412 0
 281 01ea 07F11407 		add	r7, r7, #20
 282 01ee BD46     		mov	sp, r7
 283 01f0 80BC     		pop	{r7}
 284 01f2 7047     		bx	lr
 285              		.cfi_endproc
 286              	.LFE30:
 288              		.align	2
 289              		.thumb
 290              		.thumb_func
 292              	SetSysClock:
 293              	.LFB31:
 413:../src/system_stm32f10x.c **** 
 414:../src/system_stm32f10x.c **** /**
 415:../src/system_stm32f10x.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 416:../src/system_stm32f10x.c ****   * @param  None
 417:../src/system_stm32f10x.c ****   * @retval None
 418:../src/system_stm32f10x.c ****   */
 419:../src/system_stm32f10x.c **** static void SetSysClock(void)
 420:../src/system_stm32f10x.c **** {
 294              		.loc 1 420 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 01f4 80B5     		push	{r7, lr}
 299              	.LCFI5:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 14, -4
 302              		.cfi_offset 7, -8
 303 01f6 00AF     		add	r7, sp, #0
 304              	.LCFI6:
 305              		.cfi_def_cfa_register 7
 421:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 422:../src/system_stm32f10x.c ****   SetSysClockToHSE();
 423:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 424:../src/system_stm32f10x.c ****   SetSysClockTo24();
 425:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 426:../src/system_stm32f10x.c ****   SetSysClockTo36();
 306              		.loc 1 426 0
 307 01f8 00F002F8 		bl	SetSysClockTo36
 427:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 428:../src/system_stm32f10x.c ****   SetSysClockTo48();
 429:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 430:../src/system_stm32f10x.c ****   SetSysClockTo56();  
 431:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 432:../src/system_stm32f10x.c ****   SetSysClockTo72();
 433:../src/system_stm32f10x.c **** #endif
 434:../src/system_stm32f10x.c ****  
 435:../src/system_stm32f10x.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 436:../src/system_stm32f10x.c ****     source (default after reset) */ 
 437:../src/system_stm32f10x.c **** }
 308              		.loc 1 437 0
 309 01fc 80BD     		pop	{r7, pc}
 310              		.cfi_endproc
 311              	.LFE31:
 313 01fe 00BF     		.align	2
 314              		.thumb
 315              		.thumb_func
 317              	SetSysClockTo36:
 318              	.LFB32:
 438:../src/system_stm32f10x.c **** 
 439:../src/system_stm32f10x.c **** /**
 440:../src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 441:../src/system_stm32f10x.c ****   *          before jump to __main
 442:../src/system_stm32f10x.c ****   * @param  None
 443:../src/system_stm32f10x.c ****   * @retval None
 444:../src/system_stm32f10x.c ****   */ 
 445:../src/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 446:../src/system_stm32f10x.c **** /**
 447:../src/system_stm32f10x.c ****   * @brief  Setup the external memory controller. 
 448:../src/system_stm32f10x.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 449:../src/system_stm32f10x.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
 450:../src/system_stm32f10x.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 451:../src/system_stm32f10x.c ****   *         data memory (including heap and stack).
 452:../src/system_stm32f10x.c ****   * @param  None
 453:../src/system_stm32f10x.c ****   * @retval None
 454:../src/system_stm32f10x.c ****   */ 
 455:../src/system_stm32f10x.c **** void SystemInit_ExtMemCtl(void) 
 456:../src/system_stm32f10x.c **** {
 457:../src/system_stm32f10x.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 458:../src/system_stm32f10x.c ****   required, then adjust the Register Addresses */
 459:../src/system_stm32f10x.c **** 
 460:../src/system_stm32f10x.c ****   /* Enable FSMC clock */
 461:../src/system_stm32f10x.c ****   RCC->AHBENR = 0x00000114;
 462:../src/system_stm32f10x.c ****   
 463:../src/system_stm32f10x.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 464:../src/system_stm32f10x.c ****   RCC->APB2ENR = 0x000001E0;
 465:../src/system_stm32f10x.c ****   
 466:../src/system_stm32f10x.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 467:../src/system_stm32f10x.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 468:../src/system_stm32f10x.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 469:../src/system_stm32f10x.c **** /*----------------  NE3 configuration ----------------------------------------*/
 470:../src/system_stm32f10x.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 471:../src/system_stm32f10x.c ****   
 472:../src/system_stm32f10x.c ****   GPIOD->CRL = 0x44BB44BB;  
 473:../src/system_stm32f10x.c ****   GPIOD->CRH = 0xBBBBBBBB;
 474:../src/system_stm32f10x.c **** 
 475:../src/system_stm32f10x.c ****   GPIOE->CRL = 0xB44444BB;  
 476:../src/system_stm32f10x.c ****   GPIOE->CRH = 0xBBBBBBBB;
 477:../src/system_stm32f10x.c **** 
 478:../src/system_stm32f10x.c ****   GPIOF->CRL = 0x44BBBBBB;  
 479:../src/system_stm32f10x.c ****   GPIOF->CRH = 0xBBBB4444;
 480:../src/system_stm32f10x.c **** 
 481:../src/system_stm32f10x.c ****   GPIOG->CRL = 0x44BBBBBB;  
 482:../src/system_stm32f10x.c ****   GPIOG->CRH = 0x44444B44;
 483:../src/system_stm32f10x.c ****    
 484:../src/system_stm32f10x.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 485:../src/system_stm32f10x.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 486:../src/system_stm32f10x.c ****   
 487:../src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 488:../src/system_stm32f10x.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 489:../src/system_stm32f10x.c **** }
 490:../src/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 491:../src/system_stm32f10x.c **** 
 492:../src/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 493:../src/system_stm32f10x.c **** /**
 494:../src/system_stm32f10x.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 495:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 496:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 497:../src/system_stm32f10x.c ****   * @param  None
 498:../src/system_stm32f10x.c ****   * @retval None
 499:../src/system_stm32f10x.c ****   */
 500:../src/system_stm32f10x.c **** static void SetSysClockToHSE(void)
 501:../src/system_stm32f10x.c **** {
 502:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 503:../src/system_stm32f10x.c ****   
 504:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 505:../src/system_stm32f10x.c ****   /* Enable HSE */    
 506:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 507:../src/system_stm32f10x.c ****  
 508:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 509:../src/system_stm32f10x.c ****   do
 510:../src/system_stm32f10x.c ****   {
 511:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 512:../src/system_stm32f10x.c ****     StartUpCounter++;  
 513:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 514:../src/system_stm32f10x.c **** 
 515:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 516:../src/system_stm32f10x.c ****   {
 517:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 518:../src/system_stm32f10x.c ****   }
 519:../src/system_stm32f10x.c ****   else
 520:../src/system_stm32f10x.c ****   {
 521:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 522:../src/system_stm32f10x.c ****   }  
 523:../src/system_stm32f10x.c **** 
 524:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 525:../src/system_stm32f10x.c ****   {
 526:../src/system_stm32f10x.c **** 
 527:../src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
 528:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 529:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 530:../src/system_stm32f10x.c **** 
 531:../src/system_stm32f10x.c ****     /* Flash 0 wait state */
 532:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 533:../src/system_stm32f10x.c **** 
 534:../src/system_stm32f10x.c **** #ifndef STM32F10X_CL
 535:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 536:../src/system_stm32f10x.c **** #else
 537:../src/system_stm32f10x.c ****     if (HSE_VALUE <= 24000000)
 538:../src/system_stm32f10x.c **** 	{
 539:../src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 540:../src/system_stm32f10x.c **** 	}
 541:../src/system_stm32f10x.c **** 	else
 542:../src/system_stm32f10x.c **** 	{
 543:../src/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 544:../src/system_stm32f10x.c **** 	}
 545:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 546:../src/system_stm32f10x.c **** #endif
 547:../src/system_stm32f10x.c ****  
 548:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 549:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 550:../src/system_stm32f10x.c ****       
 551:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 552:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 553:../src/system_stm32f10x.c ****     
 554:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 555:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 556:../src/system_stm32f10x.c ****     
 557:../src/system_stm32f10x.c ****     /* Select HSE as system clock source */
 558:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 559:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 560:../src/system_stm32f10x.c **** 
 561:../src/system_stm32f10x.c ****     /* Wait till HSE is used as system clock source */
 562:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 563:../src/system_stm32f10x.c ****     {
 564:../src/system_stm32f10x.c ****     }
 565:../src/system_stm32f10x.c ****   }
 566:../src/system_stm32f10x.c ****   else
 567:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 568:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 569:../src/system_stm32f10x.c ****   }  
 570:../src/system_stm32f10x.c **** }
 571:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 572:../src/system_stm32f10x.c **** /**
 573:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 574:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 575:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 576:../src/system_stm32f10x.c ****   * @param  None
 577:../src/system_stm32f10x.c ****   * @retval None
 578:../src/system_stm32f10x.c ****   */
 579:../src/system_stm32f10x.c **** static void SetSysClockTo24(void)
 580:../src/system_stm32f10x.c **** {
 581:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 582:../src/system_stm32f10x.c ****   
 583:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 584:../src/system_stm32f10x.c ****   /* Enable HSE */    
 585:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 586:../src/system_stm32f10x.c ****  
 587:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 588:../src/system_stm32f10x.c ****   do
 589:../src/system_stm32f10x.c ****   {
 590:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 591:../src/system_stm32f10x.c ****     StartUpCounter++;  
 592:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 593:../src/system_stm32f10x.c **** 
 594:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 595:../src/system_stm32f10x.c ****   {
 596:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 597:../src/system_stm32f10x.c ****   }
 598:../src/system_stm32f10x.c ****   else
 599:../src/system_stm32f10x.c ****   {
 600:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 601:../src/system_stm32f10x.c ****   }  
 602:../src/system_stm32f10x.c **** 
 603:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 604:../src/system_stm32f10x.c ****   {
 605:../src/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
 606:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 607:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 608:../src/system_stm32f10x.c **** 
 609:../src/system_stm32f10x.c ****     /* Flash 0 wait state */
 610:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 611:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 612:../src/system_stm32f10x.c **** #endif
 613:../src/system_stm32f10x.c ****  
 614:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 615:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 616:../src/system_stm32f10x.c ****       
 617:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 618:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 619:../src/system_stm32f10x.c ****     
 620:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 621:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 622:../src/system_stm32f10x.c ****     
 623:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 624:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 625:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 626:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 627:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 628:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 629:../src/system_stm32f10x.c **** 
 630:../src/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 631:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 632:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 633:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 634:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 635:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 636:../src/system_stm32f10x.c ****   
 637:../src/system_stm32f10x.c ****     /* Enable PLL2 */
 638:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 639:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 640:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 641:../src/system_stm32f10x.c ****     {
 642:../src/system_stm32f10x.c ****     }   
 643:../src/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 644:../src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 645:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 646:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 647:../src/system_stm32f10x.c **** #else    
 648:../src/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 649:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 650:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 651:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 652:../src/system_stm32f10x.c **** 
 653:../src/system_stm32f10x.c ****     /* Enable PLL */
 654:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 655:../src/system_stm32f10x.c **** 
 656:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 657:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 658:../src/system_stm32f10x.c ****     {
 659:../src/system_stm32f10x.c ****     }
 660:../src/system_stm32f10x.c **** 
 661:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 662:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 663:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 664:../src/system_stm32f10x.c **** 
 665:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 666:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 667:../src/system_stm32f10x.c ****     {
 668:../src/system_stm32f10x.c ****     }
 669:../src/system_stm32f10x.c ****   }
 670:../src/system_stm32f10x.c ****   else
 671:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 672:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 673:../src/system_stm32f10x.c ****   } 
 674:../src/system_stm32f10x.c **** }
 675:../src/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 676:../src/system_stm32f10x.c **** /**
 677:../src/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
 678:../src/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 679:../src/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 680:../src/system_stm32f10x.c ****   * @param  None
 681:../src/system_stm32f10x.c ****   * @retval None
 682:../src/system_stm32f10x.c ****   */
 683:../src/system_stm32f10x.c **** static void SetSysClockTo36(void)
 684:../src/system_stm32f10x.c **** {
 319              		.loc 1 684 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 8
 322              		@ frame_needed = 1, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 324 0200 80B4     		push	{r7}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 4
 327              		.cfi_offset 7, -4
 328 0202 83B0     		sub	sp, sp, #12
 329              	.LCFI8:
 330              		.cfi_def_cfa_offset 16
 331 0204 00AF     		add	r7, sp, #0
 332              	.LCFI9:
 333              		.cfi_def_cfa_register 7
 685:../src/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 334              		.loc 1 685 0
 335 0206 4FF00003 		mov	r3, #0
 336 020a 7B60     		str	r3, [r7, #4]
 337 020c 4FF00003 		mov	r3, #0
 338 0210 3B60     		str	r3, [r7, #0]
 686:../src/system_stm32f10x.c ****   
 687:../src/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 688:../src/system_stm32f10x.c ****   /* Enable HSE */    
 689:../src/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 339              		.loc 1 689 0
 340 0212 4FF48053 		mov	r3, #4096
 341 0216 C4F20203 		movt	r3, 16386
 342 021a 4FF48052 		mov	r2, #4096
 343 021e C4F20202 		movt	r2, 16386
 344 0222 1268     		ldr	r2, [r2, #0]
 345 0224 42F48032 		orr	r2, r2, #65536
 346 0228 1A60     		str	r2, [r3, #0]
 347              	.L15:
 690:../src/system_stm32f10x.c ****  
 691:../src/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 692:../src/system_stm32f10x.c ****   do
 693:../src/system_stm32f10x.c ****   {
 694:../src/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 348              		.loc 1 694 0 discriminator 1
 349 022a 4FF48053 		mov	r3, #4096
 350 022e C4F20203 		movt	r3, 16386
 351 0232 1B68     		ldr	r3, [r3, #0]
 352 0234 03F40033 		and	r3, r3, #131072
 353 0238 3B60     		str	r3, [r7, #0]
 695:../src/system_stm32f10x.c ****     StartUpCounter++;  
 354              		.loc 1 695 0 discriminator 1
 355 023a 7B68     		ldr	r3, [r7, #4]
 356 023c 03F10103 		add	r3, r3, #1
 357 0240 7B60     		str	r3, [r7, #4]
 696:../src/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 358              		.loc 1 696 0 discriminator 1
 359 0242 3B68     		ldr	r3, [r7, #0]
 360 0244 002B     		cmp	r3, #0
 361 0246 03D1     		bne	.L14
 362 0248 7B68     		ldr	r3, [r7, #4]
 363 024a B3F5A06F 		cmp	r3, #1280
 364 024e ECD1     		bne	.L15
 365              	.L14:
 697:../src/system_stm32f10x.c **** 
 698:../src/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 366              		.loc 1 698 0
 367 0250 4FF48053 		mov	r3, #4096
 368 0254 C4F20203 		movt	r3, 16386
 369 0258 1B68     		ldr	r3, [r3, #0]
 370 025a 03F40033 		and	r3, r3, #131072
 371 025e 002B     		cmp	r3, #0
 372 0260 03D0     		beq	.L16
 699:../src/system_stm32f10x.c ****   {
 700:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 373              		.loc 1 700 0
 374 0262 4FF00103 		mov	r3, #1
 375 0266 3B60     		str	r3, [r7, #0]
 376 0268 02E0     		b	.L17
 377              	.L16:
 701:../src/system_stm32f10x.c ****   }
 702:../src/system_stm32f10x.c ****   else
 703:../src/system_stm32f10x.c ****   {
 704:../src/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 378              		.loc 1 704 0
 379 026a 4FF00003 		mov	r3, #0
 380 026e 3B60     		str	r3, [r7, #0]
 381              	.L17:
 705:../src/system_stm32f10x.c ****   }  
 706:../src/system_stm32f10x.c **** 
 707:../src/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 382              		.loc 1 707 0
 383 0270 3B68     		ldr	r3, [r7, #0]
 384 0272 012B     		cmp	r3, #1
 385 0274 40F09280 		bne	.L13
 708:../src/system_stm32f10x.c ****   {
 709:../src/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 710:../src/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 386              		.loc 1 710 0
 387 0278 4FF40053 		mov	r3, #8192
 388 027c C4F20203 		movt	r3, 16386
 389 0280 4FF40052 		mov	r2, #8192
 390 0284 C4F20202 		movt	r2, 16386
 391 0288 1268     		ldr	r2, [r2, #0]
 392 028a 42F01002 		orr	r2, r2, #16
 393 028e 1A60     		str	r2, [r3, #0]
 711:../src/system_stm32f10x.c **** 
 712:../src/system_stm32f10x.c ****     /* Flash 1 wait state */
 713:../src/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 394              		.loc 1 713 0
 395 0290 4FF40053 		mov	r3, #8192
 396 0294 C4F20203 		movt	r3, 16386
 397 0298 4FF40052 		mov	r2, #8192
 398 029c C4F20202 		movt	r2, 16386
 399 02a0 1268     		ldr	r2, [r2, #0]
 400 02a2 22F00302 		bic	r2, r2, #3
 401 02a6 1A60     		str	r2, [r3, #0]
 714:../src/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 402              		.loc 1 714 0
 403 02a8 4FF40053 		mov	r3, #8192
 404 02ac C4F20203 		movt	r3, 16386
 405 02b0 4FF40052 		mov	r2, #8192
 406 02b4 C4F20202 		movt	r2, 16386
 407 02b8 1268     		ldr	r2, [r2, #0]
 408 02ba 42F00102 		orr	r2, r2, #1
 409 02be 1A60     		str	r2, [r3, #0]
 715:../src/system_stm32f10x.c ****  
 716:../src/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 717:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 410              		.loc 1 717 0
 411 02c0 4FF48053 		mov	r3, #4096
 412 02c4 C4F20203 		movt	r3, 16386
 413 02c8 4FF48052 		mov	r2, #4096
 414 02cc C4F20202 		movt	r2, 16386
 415 02d0 5268     		ldr	r2, [r2, #4]
 416 02d2 5A60     		str	r2, [r3, #4]
 718:../src/system_stm32f10x.c ****       
 719:../src/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 720:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 417              		.loc 1 720 0
 418 02d4 4FF48053 		mov	r3, #4096
 419 02d8 C4F20203 		movt	r3, 16386
 420 02dc 4FF48052 		mov	r2, #4096
 421 02e0 C4F20202 		movt	r2, 16386
 422 02e4 5268     		ldr	r2, [r2, #4]
 423 02e6 5A60     		str	r2, [r3, #4]
 721:../src/system_stm32f10x.c ****     
 722:../src/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 723:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 424              		.loc 1 723 0
 425 02e8 4FF48053 		mov	r3, #4096
 426 02ec C4F20203 		movt	r3, 16386
 427 02f0 4FF48052 		mov	r2, #4096
 428 02f4 C4F20202 		movt	r2, 16386
 429 02f8 5268     		ldr	r2, [r2, #4]
 430 02fa 5A60     		str	r2, [r3, #4]
 724:../src/system_stm32f10x.c ****     
 725:../src/system_stm32f10x.c **** #ifdef STM32F10X_CL
 726:../src/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 727:../src/system_stm32f10x.c ****     
 728:../src/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 729:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 730:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 731:../src/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
 732:../src/system_stm32f10x.c **** 
 733:../src/system_stm32f10x.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 734:../src/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
 735:../src/system_stm32f10x.c ****         
 736:../src/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 737:../src/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 738:../src/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 739:../src/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 740:../src/system_stm32f10x.c ****   
 741:../src/system_stm32f10x.c ****     /* Enable PLL2 */
 742:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 743:../src/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 744:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 745:../src/system_stm32f10x.c ****     {
 746:../src/system_stm32f10x.c ****     }
 747:../src/system_stm32f10x.c ****     
 748:../src/system_stm32f10x.c **** #else    
 749:../src/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 750:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 431              		.loc 1 750 0
 432 02fc 4FF48053 		mov	r3, #4096
 433 0300 C4F20203 		movt	r3, 16386
 434 0304 4FF48052 		mov	r2, #4096
 435 0308 C4F20202 		movt	r2, 16386
 436 030c 5268     		ldr	r2, [r2, #4]
 437 030e 22F47C12 		bic	r2, r2, #4128768
 438 0312 5A60     		str	r2, [r3, #4]
 751:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 439              		.loc 1 751 0
 440 0314 4FF48053 		mov	r3, #4096
 441 0318 C4F20203 		movt	r3, 16386
 442 031c 4FF48052 		mov	r2, #4096
 443 0320 C4F20202 		movt	r2, 16386
 444 0324 5268     		ldr	r2, [r2, #4]
 445 0326 42F4F812 		orr	r2, r2, #2031616
 446 032a 5A60     		str	r2, [r3, #4]
 752:../src/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 753:../src/system_stm32f10x.c **** 
 754:../src/system_stm32f10x.c ****     /* Enable PLL */
 755:../src/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 447              		.loc 1 755 0
 448 032c 4FF48053 		mov	r3, #4096
 449 0330 C4F20203 		movt	r3, 16386
 450 0334 4FF48052 		mov	r2, #4096
 451 0338 C4F20202 		movt	r2, 16386
 452 033c 1268     		ldr	r2, [r2, #0]
 453 033e 42F08072 		orr	r2, r2, #16777216
 454 0342 1A60     		str	r2, [r3, #0]
 756:../src/system_stm32f10x.c **** 
 757:../src/system_stm32f10x.c ****     /* Wait till PLL is ready */
 758:../src/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 455              		.loc 1 758 0
 456 0344 00BF     		nop
 457              	.L19:
 458              		.loc 1 758 0 is_stmt 0 discriminator 1
 459 0346 4FF48053 		mov	r3, #4096
 460 034a C4F20203 		movt	r3, 16386
 461 034e 1B68     		ldr	r3, [r3, #0]
 462 0350 03F00073 		and	r3, r3, #33554432
 463 0354 002B     		cmp	r3, #0
 464 0356 F6D0     		beq	.L19
 759:../src/system_stm32f10x.c ****     {
 760:../src/system_stm32f10x.c ****     }
 761:../src/system_stm32f10x.c **** 
 762:../src/system_stm32f10x.c ****     /* Select PLL as system clock source */
 763:../src/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 465              		.loc 1 763 0 is_stmt 1
 466 0358 4FF48053 		mov	r3, #4096
 467 035c C4F20203 		movt	r3, 16386
 468 0360 4FF48052 		mov	r2, #4096
 469 0364 C4F20202 		movt	r2, 16386
 470 0368 5268     		ldr	r2, [r2, #4]
 471 036a 22F00302 		bic	r2, r2, #3
 472 036e 5A60     		str	r2, [r3, #4]
 764:../src/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 473              		.loc 1 764 0
 474 0370 4FF48053 		mov	r3, #4096
 475 0374 C4F20203 		movt	r3, 16386
 476 0378 4FF48052 		mov	r2, #4096
 477 037c C4F20202 		movt	r2, 16386
 478 0380 5268     		ldr	r2, [r2, #4]
 479 0382 42F00202 		orr	r2, r2, #2
 480 0386 5A60     		str	r2, [r3, #4]
 765:../src/system_stm32f10x.c **** 
 766:../src/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 767:../src/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 481              		.loc 1 767 0
 482 0388 00BF     		nop
 483              	.L20:
 484              		.loc 1 767 0 is_stmt 0 discriminator 1
 485 038a 4FF48053 		mov	r3, #4096
 486 038e C4F20203 		movt	r3, 16386
 487 0392 5B68     		ldr	r3, [r3, #4]
 488 0394 03F00C03 		and	r3, r3, #12
 489 0398 082B     		cmp	r3, #8
 490 039a F6D1     		bne	.L20
 491              	.L13:
 768:../src/system_stm32f10x.c ****     {
 769:../src/system_stm32f10x.c ****     }
 770:../src/system_stm32f10x.c ****   }
 771:../src/system_stm32f10x.c ****   else
 772:../src/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 773:../src/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 774:../src/system_stm32f10x.c ****   } 
 775:../src/system_stm32f10x.c **** }
 492              		.loc 1 775 0 is_stmt 1
 493 039c 07F10C07 		add	r7, r7, #12
 494 03a0 BD46     		mov	sp, r7
 495 03a2 80BC     		pop	{r7}
 496 03a4 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE32:
 500              	.Letext0:
 501              		.file 2 "/home/jachu/elektronika/STM32/gcc-arm-none-eabi-4_6-2012q4/bin/../lib/gcc/arm-none-eabi/4
 502              		.file 3 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupp
 503              		.file 4 "../src/stm32f10x.h"
 504              		.file 5 "../src/system_stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f10x.c
     /tmp/cc14n7kd.s:23     .data:00000000 SystemCoreClock
     /tmp/cc14n7kd.s:20     .data:00000000 $d
     /tmp/cc14n7kd.s:29     .data:00000004 AHBPrescTable
     /tmp/cc14n7kd.s:47     .text:00000000 $t
     /tmp/cc14n7kd.s:52     .text:00000000 SystemInit
     /tmp/cc14n7kd.s:292    .text:000001f4 SetSysClock
     /tmp/cc14n7kd.s:133    .text:000000ac SystemCoreClockUpdate
     /tmp/cc14n7kd.s:317    .text:00000200 SetSysClockTo36
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
