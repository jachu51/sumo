   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	DMA_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	DMA_DeInit:
  24              	.LFB29:
  25              		.file 1 "../src/stm32f10x_dma.c"
   1:../src/stm32f10x_dma.c **** /**
   2:../src/stm32f10x_dma.c ****   ******************************************************************************
   3:../src/stm32f10x_dma.c ****   * @file    stm32f10x_dma.c
   4:../src/stm32f10x_dma.c ****   * @author  MCD Application Team
   5:../src/stm32f10x_dma.c ****   * @version V3.5.0
   6:../src/stm32f10x_dma.c ****   * @date    11-March-2011
   7:../src/stm32f10x_dma.c ****   * @brief   This file provides all the DMA firmware functions.
   8:../src/stm32f10x_dma.c ****   ******************************************************************************
   9:../src/stm32f10x_dma.c ****   * @attention
  10:../src/stm32f10x_dma.c ****   *
  11:../src/stm32f10x_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../src/stm32f10x_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../src/stm32f10x_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../src/stm32f10x_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../src/stm32f10x_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../src/stm32f10x_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../src/stm32f10x_dma.c ****   *
  18:../src/stm32f10x_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../src/stm32f10x_dma.c ****   ******************************************************************************
  20:../src/stm32f10x_dma.c ****   */
  21:../src/stm32f10x_dma.c **** 
  22:../src/stm32f10x_dma.c **** /* Includes ------------------------------------------------------------------*/
  23:../src/stm32f10x_dma.c **** #include "stm32f10x_dma.h"
  24:../src/stm32f10x_dma.c **** #include "stm32f10x_rcc.h"
  25:../src/stm32f10x_dma.c **** #include "stm32f10x_conf.h"
  26:../src/stm32f10x_dma.c **** 
  27:../src/stm32f10x_dma.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  28:../src/stm32f10x_dma.c ****   * @{
  29:../src/stm32f10x_dma.c ****   */
  30:../src/stm32f10x_dma.c **** 
  31:../src/stm32f10x_dma.c **** /** @defgroup DMA 
  32:../src/stm32f10x_dma.c ****   * @brief DMA driver modules
  33:../src/stm32f10x_dma.c ****   * @{
  34:../src/stm32f10x_dma.c ****   */ 
  35:../src/stm32f10x_dma.c **** 
  36:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_TypesDefinitions
  37:../src/stm32f10x_dma.c ****   * @{
  38:../src/stm32f10x_dma.c ****   */ 
  39:../src/stm32f10x_dma.c **** /**
  40:../src/stm32f10x_dma.c ****   * @}
  41:../src/stm32f10x_dma.c ****   */
  42:../src/stm32f10x_dma.c **** 
  43:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Defines
  44:../src/stm32f10x_dma.c ****   * @{
  45:../src/stm32f10x_dma.c ****   */
  46:../src/stm32f10x_dma.c **** 
  47:../src/stm32f10x_dma.c **** 
  48:../src/stm32f10x_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  49:../src/stm32f10x_dma.c **** #define DMA1_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  50:../src/stm32f10x_dma.c **** #define DMA1_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  51:../src/stm32f10x_dma.c **** #define DMA1_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  52:../src/stm32f10x_dma.c **** #define DMA1_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  53:../src/stm32f10x_dma.c **** #define DMA1_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  54:../src/stm32f10x_dma.c **** #define DMA1_Channel6_IT_Mask    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR
  55:../src/stm32f10x_dma.c **** #define DMA1_Channel7_IT_Mask    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR
  56:../src/stm32f10x_dma.c **** 
  57:../src/stm32f10x_dma.c **** /* DMA2 Channelx interrupt pending bit masks */
  58:../src/stm32f10x_dma.c **** #define DMA2_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  59:../src/stm32f10x_dma.c **** #define DMA2_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  60:../src/stm32f10x_dma.c **** #define DMA2_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  61:../src/stm32f10x_dma.c **** #define DMA2_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  62:../src/stm32f10x_dma.c **** #define DMA2_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  63:../src/stm32f10x_dma.c **** 
  64:../src/stm32f10x_dma.c **** /* DMA2 FLAG mask */
  65:../src/stm32f10x_dma.c **** #define FLAG_Mask                ((uint32_t)0x10000000)
  66:../src/stm32f10x_dma.c **** 
  67:../src/stm32f10x_dma.c **** /* DMA registers Masks */
  68:../src/stm32f10x_dma.c **** #define CCR_CLEAR_Mask           ((uint32_t)0xFFFF800F)
  69:../src/stm32f10x_dma.c **** 
  70:../src/stm32f10x_dma.c **** /**
  71:../src/stm32f10x_dma.c ****   * @}
  72:../src/stm32f10x_dma.c ****   */
  73:../src/stm32f10x_dma.c **** 
  74:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Macros
  75:../src/stm32f10x_dma.c ****   * @{
  76:../src/stm32f10x_dma.c ****   */
  77:../src/stm32f10x_dma.c **** 
  78:../src/stm32f10x_dma.c **** /**
  79:../src/stm32f10x_dma.c ****   * @}
  80:../src/stm32f10x_dma.c ****   */
  81:../src/stm32f10x_dma.c **** 
  82:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Variables
  83:../src/stm32f10x_dma.c ****   * @{
  84:../src/stm32f10x_dma.c ****   */
  85:../src/stm32f10x_dma.c **** 
  86:../src/stm32f10x_dma.c **** /**
  87:../src/stm32f10x_dma.c ****   * @}
  88:../src/stm32f10x_dma.c ****   */
  89:../src/stm32f10x_dma.c **** 
  90:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_FunctionPrototypes
  91:../src/stm32f10x_dma.c ****   * @{
  92:../src/stm32f10x_dma.c ****   */
  93:../src/stm32f10x_dma.c **** 
  94:../src/stm32f10x_dma.c **** /**
  95:../src/stm32f10x_dma.c ****   * @}
  96:../src/stm32f10x_dma.c ****   */
  97:../src/stm32f10x_dma.c **** 
  98:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Functions
  99:../src/stm32f10x_dma.c ****   * @{
 100:../src/stm32f10x_dma.c ****   */
 101:../src/stm32f10x_dma.c **** 
 102:../src/stm32f10x_dma.c **** /**
 103:../src/stm32f10x_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 104:../src/stm32f10x_dma.c ****   *         values.
 105:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
 106:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 107:../src/stm32f10x_dma.c ****   * @retval None
 108:../src/stm32f10x_dma.c ****   */
 109:../src/stm32f10x_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 110:../src/stm32f10x_dma.c **** {
  26              		.loc 1 110 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 111:../src/stm32f10x_dma.c ****   /* Check the parameters */
 112:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 113:../src/stm32f10x_dma.c ****   
 114:../src/stm32f10x_dma.c ****   /* Disable the selected DMAy Channelx */
 115:../src/stm32f10x_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  42              		.loc 1 115 0
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 1B68     		ldr	r3, [r3, #0]
  45 000c 1A46     		mov	r2, r3
  46 000e 4FF6FE73 		movw	r3, #65534
  47 0012 1340     		ands	r3, r3, r2
  48 0014 7A68     		ldr	r2, [r7, #4]
  49 0016 1360     		str	r3, [r2, #0]
 116:../src/stm32f10x_dma.c ****   
 117:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx control register */
 118:../src/stm32f10x_dma.c ****   DMAy_Channelx->CCR  = 0;
  50              		.loc 1 118 0
  51 0018 7B68     		ldr	r3, [r7, #4]
  52 001a 4FF00002 		mov	r2, #0
  53 001e 1A60     		str	r2, [r3, #0]
 119:../src/stm32f10x_dma.c ****   
 120:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 121:../src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = 0;
  54              		.loc 1 121 0
  55 0020 7B68     		ldr	r3, [r7, #4]
  56 0022 4FF00002 		mov	r2, #0
  57 0026 5A60     		str	r2, [r3, #4]
 122:../src/stm32f10x_dma.c ****   
 123:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 124:../src/stm32f10x_dma.c ****   DMAy_Channelx->CPAR  = 0;
  58              		.loc 1 124 0
  59 0028 7B68     		ldr	r3, [r7, #4]
  60 002a 4FF00002 		mov	r2, #0
  61 002e 9A60     		str	r2, [r3, #8]
 125:../src/stm32f10x_dma.c ****   
 126:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx memory address register */
 127:../src/stm32f10x_dma.c ****   DMAy_Channelx->CMAR = 0;
  62              		.loc 1 127 0
  63 0030 7B68     		ldr	r3, [r7, #4]
  64 0032 4FF00002 		mov	r2, #0
  65 0036 DA60     		str	r2, [r3, #12]
 128:../src/stm32f10x_dma.c ****   
 129:../src/stm32f10x_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  66              		.loc 1 129 0
  67 0038 7A68     		ldr	r2, [r7, #4]
  68 003a 4FF00803 		mov	r3, #8
  69 003e C4F20203 		movt	r3, 16386
  70 0042 9A42     		cmp	r2, r3
  71 0044 0CD1     		bne	.L2
 130:../src/stm32f10x_dma.c ****   {
 131:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 132:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel1_IT_Mask;
  72              		.loc 1 132 0
  73 0046 4FF00003 		mov	r3, #0
  74 004a C4F20203 		movt	r3, 16386
  75 004e 4FF00002 		mov	r2, #0
  76 0052 C4F20202 		movt	r2, 16386
  77 0056 5268     		ldr	r2, [r2, #4]
  78 0058 42F00F02 		orr	r2, r2, #15
  79 005c 5A60     		str	r2, [r3, #4]
  80 005e DAE0     		b	.L1
  81              	.L2:
 133:../src/stm32f10x_dma.c ****   }
 134:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
  82              		.loc 1 134 0
  83 0060 7A68     		ldr	r2, [r7, #4]
  84 0062 4FF01C03 		mov	r3, #28
  85 0066 C4F20203 		movt	r3, 16386
  86 006a 9A42     		cmp	r2, r3
  87 006c 0CD1     		bne	.L4
 135:../src/stm32f10x_dma.c ****   {
 136:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 137:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel2_IT_Mask;
  88              		.loc 1 137 0
  89 006e 4FF00003 		mov	r3, #0
  90 0072 C4F20203 		movt	r3, 16386
  91 0076 4FF00002 		mov	r2, #0
  92 007a C4F20202 		movt	r2, 16386
  93 007e 5268     		ldr	r2, [r2, #4]
  94 0080 42F0F002 		orr	r2, r2, #240
  95 0084 5A60     		str	r2, [r3, #4]
  96 0086 C6E0     		b	.L1
  97              	.L4:
 138:../src/stm32f10x_dma.c ****   }
 139:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
  98              		.loc 1 139 0
  99 0088 7A68     		ldr	r2, [r7, #4]
 100 008a 4FF03003 		mov	r3, #48
 101 008e C4F20203 		movt	r3, 16386
 102 0092 9A42     		cmp	r2, r3
 103 0094 0CD1     		bne	.L5
 140:../src/stm32f10x_dma.c ****   {
 141:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 142:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 104              		.loc 1 142 0
 105 0096 4FF00003 		mov	r3, #0
 106 009a C4F20203 		movt	r3, 16386
 107 009e 4FF00002 		mov	r2, #0
 108 00a2 C4F20202 		movt	r2, 16386
 109 00a6 5268     		ldr	r2, [r2, #4]
 110 00a8 42F47062 		orr	r2, r2, #3840
 111 00ac 5A60     		str	r2, [r3, #4]
 112 00ae B2E0     		b	.L1
 113              	.L5:
 143:../src/stm32f10x_dma.c ****   }
 144:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
 114              		.loc 1 144 0
 115 00b0 7A68     		ldr	r2, [r7, #4]
 116 00b2 4FF04403 		mov	r3, #68
 117 00b6 C4F20203 		movt	r3, 16386
 118 00ba 9A42     		cmp	r2, r3
 119 00bc 0CD1     		bne	.L6
 145:../src/stm32f10x_dma.c ****   {
 146:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 147:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 120              		.loc 1 147 0
 121 00be 4FF00003 		mov	r3, #0
 122 00c2 C4F20203 		movt	r3, 16386
 123 00c6 4FF00002 		mov	r2, #0
 124 00ca C4F20202 		movt	r2, 16386
 125 00ce 5268     		ldr	r2, [r2, #4]
 126 00d0 42F47042 		orr	r2, r2, #61440
 127 00d4 5A60     		str	r2, [r3, #4]
 128 00d6 9EE0     		b	.L1
 129              	.L6:
 148:../src/stm32f10x_dma.c ****   }
 149:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel5)
 130              		.loc 1 149 0
 131 00d8 7A68     		ldr	r2, [r7, #4]
 132 00da 4FF05803 		mov	r3, #88
 133 00de C4F20203 		movt	r3, 16386
 134 00e2 9A42     		cmp	r2, r3
 135 00e4 0CD1     		bne	.L7
 150:../src/stm32f10x_dma.c ****   {
 151:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel5 */
 152:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 136              		.loc 1 152 0
 137 00e6 4FF00003 		mov	r3, #0
 138 00ea C4F20203 		movt	r3, 16386
 139 00ee 4FF00002 		mov	r2, #0
 140 00f2 C4F20202 		movt	r2, 16386
 141 00f6 5268     		ldr	r2, [r2, #4]
 142 00f8 42F47022 		orr	r2, r2, #983040
 143 00fc 5A60     		str	r2, [r3, #4]
 144 00fe 8AE0     		b	.L1
 145              	.L7:
 153:../src/stm32f10x_dma.c ****   }
 154:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel6)
 146              		.loc 1 154 0
 147 0100 7A68     		ldr	r2, [r7, #4]
 148 0102 4FF06C03 		mov	r3, #108
 149 0106 C4F20203 		movt	r3, 16386
 150 010a 9A42     		cmp	r2, r3
 151 010c 0CD1     		bne	.L8
 155:../src/stm32f10x_dma.c ****   {
 156:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel6 */
 157:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 152              		.loc 1 157 0
 153 010e 4FF00003 		mov	r3, #0
 154 0112 C4F20203 		movt	r3, 16386
 155 0116 4FF00002 		mov	r2, #0
 156 011a C4F20202 		movt	r2, 16386
 157 011e 5268     		ldr	r2, [r2, #4]
 158 0120 42F47002 		orr	r2, r2, #15728640
 159 0124 5A60     		str	r2, [r3, #4]
 160 0126 76E0     		b	.L1
 161              	.L8:
 158:../src/stm32f10x_dma.c ****   }
 159:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel7)
 162              		.loc 1 159 0
 163 0128 7A68     		ldr	r2, [r7, #4]
 164 012a 4FF08003 		mov	r3, #128
 165 012e C4F20203 		movt	r3, 16386
 166 0132 9A42     		cmp	r2, r3
 167 0134 0CD1     		bne	.L9
 160:../src/stm32f10x_dma.c ****   {
 161:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel7 */
 162:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 168              		.loc 1 162 0
 169 0136 4FF00003 		mov	r3, #0
 170 013a C4F20203 		movt	r3, 16386
 171 013e 4FF00002 		mov	r2, #0
 172 0142 C4F20202 		movt	r2, 16386
 173 0146 5268     		ldr	r2, [r2, #4]
 174 0148 42F07062 		orr	r2, r2, #251658240
 175 014c 5A60     		str	r2, [r3, #4]
 176 014e 62E0     		b	.L1
 177              	.L9:
 163:../src/stm32f10x_dma.c ****   }
 164:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel1)
 178              		.loc 1 164 0
 179 0150 7A68     		ldr	r2, [r7, #4]
 180 0152 4FF48163 		mov	r3, #1032
 181 0156 C4F20203 		movt	r3, 16386
 182 015a 9A42     		cmp	r2, r3
 183 015c 0CD1     		bne	.L10
 165:../src/stm32f10x_dma.c ****   {
 166:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel1 */
 167:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 184              		.loc 1 167 0
 185 015e 4FF48063 		mov	r3, #1024
 186 0162 C4F20203 		movt	r3, 16386
 187 0166 4FF48062 		mov	r2, #1024
 188 016a C4F20202 		movt	r2, 16386
 189 016e 5268     		ldr	r2, [r2, #4]
 190 0170 42F00F02 		orr	r2, r2, #15
 191 0174 5A60     		str	r2, [r3, #4]
 192 0176 4EE0     		b	.L1
 193              	.L10:
 168:../src/stm32f10x_dma.c ****   }
 169:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel2)
 194              		.loc 1 169 0
 195 0178 7A68     		ldr	r2, [r7, #4]
 196 017a 40F21C43 		movw	r3, #1052
 197 017e C4F20203 		movt	r3, 16386
 198 0182 9A42     		cmp	r2, r3
 199 0184 0CD1     		bne	.L11
 170:../src/stm32f10x_dma.c ****   {
 171:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel2 */
 172:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 200              		.loc 1 172 0
 201 0186 4FF48063 		mov	r3, #1024
 202 018a C4F20203 		movt	r3, 16386
 203 018e 4FF48062 		mov	r2, #1024
 204 0192 C4F20202 		movt	r2, 16386
 205 0196 5268     		ldr	r2, [r2, #4]
 206 0198 42F0F002 		orr	r2, r2, #240
 207 019c 5A60     		str	r2, [r3, #4]
 208 019e 3AE0     		b	.L1
 209              	.L11:
 173:../src/stm32f10x_dma.c ****   }
 174:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel3)
 210              		.loc 1 174 0
 211 01a0 7A68     		ldr	r2, [r7, #4]
 212 01a2 4FF48663 		mov	r3, #1072
 213 01a6 C4F20203 		movt	r3, 16386
 214 01aa 9A42     		cmp	r2, r3
 215 01ac 0CD1     		bne	.L12
 175:../src/stm32f10x_dma.c ****   {
 176:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel3 */
 177:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 216              		.loc 1 177 0
 217 01ae 4FF48063 		mov	r3, #1024
 218 01b2 C4F20203 		movt	r3, 16386
 219 01b6 4FF48062 		mov	r2, #1024
 220 01ba C4F20202 		movt	r2, 16386
 221 01be 5268     		ldr	r2, [r2, #4]
 222 01c0 42F47062 		orr	r2, r2, #3840
 223 01c4 5A60     		str	r2, [r3, #4]
 224 01c6 26E0     		b	.L1
 225              	.L12:
 178:../src/stm32f10x_dma.c ****   }
 179:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel4)
 226              		.loc 1 179 0
 227 01c8 7A68     		ldr	r2, [r7, #4]
 228 01ca 40F24443 		movw	r3, #1092
 229 01ce C4F20203 		movt	r3, 16386
 230 01d2 9A42     		cmp	r2, r3
 231 01d4 0CD1     		bne	.L13
 180:../src/stm32f10x_dma.c ****   {
 181:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel4 */
 182:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 232              		.loc 1 182 0
 233 01d6 4FF48063 		mov	r3, #1024
 234 01da C4F20203 		movt	r3, 16386
 235 01de 4FF48062 		mov	r2, #1024
 236 01e2 C4F20202 		movt	r2, 16386
 237 01e6 5268     		ldr	r2, [r2, #4]
 238 01e8 42F47042 		orr	r2, r2, #61440
 239 01ec 5A60     		str	r2, [r3, #4]
 240 01ee 12E0     		b	.L1
 241              	.L13:
 183:../src/stm32f10x_dma.c ****   }
 184:../src/stm32f10x_dma.c ****   else
 185:../src/stm32f10x_dma.c ****   { 
 186:../src/stm32f10x_dma.c ****     if (DMAy_Channelx == DMA2_Channel5)
 242              		.loc 1 186 0
 243 01f0 7A68     		ldr	r2, [r7, #4]
 244 01f2 4FF48B63 		mov	r3, #1112
 245 01f6 C4F20203 		movt	r3, 16386
 246 01fa 9A42     		cmp	r2, r3
 247 01fc 0BD1     		bne	.L1
 187:../src/stm32f10x_dma.c ****     {
 188:../src/stm32f10x_dma.c ****       /* Reset interrupt pending bits for DMA2 Channel5 */
 189:../src/stm32f10x_dma.c ****       DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 248              		.loc 1 189 0
 249 01fe 4FF48063 		mov	r3, #1024
 250 0202 C4F20203 		movt	r3, 16386
 251 0206 4FF48062 		mov	r2, #1024
 252 020a C4F20202 		movt	r2, 16386
 253 020e 5268     		ldr	r2, [r2, #4]
 254 0210 42F47022 		orr	r2, r2, #983040
 255 0214 5A60     		str	r2, [r3, #4]
 256              	.L1:
 190:../src/stm32f10x_dma.c ****     }
 191:../src/stm32f10x_dma.c ****   }
 192:../src/stm32f10x_dma.c **** }
 257              		.loc 1 192 0
 258 0216 07F10C07 		add	r7, r7, #12
 259 021a BD46     		mov	sp, r7
 260 021c 80BC     		pop	{r7}
 261 021e 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE29:
 265              		.align	2
 266              		.global	DMA_Init
 267              		.thumb
 268              		.thumb_func
 270              	DMA_Init:
 271              	.LFB30:
 193:../src/stm32f10x_dma.c **** 
 194:../src/stm32f10x_dma.c **** /**
 195:../src/stm32f10x_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified
 196:../src/stm32f10x_dma.c ****   *         parameters in the DMA_InitStruct.
 197:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 198:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 199:../src/stm32f10x_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
 200:../src/stm32f10x_dma.c ****   *         contains the configuration information for the specified DMA Channel.
 201:../src/stm32f10x_dma.c ****   * @retval None
 202:../src/stm32f10x_dma.c ****   */
 203:../src/stm32f10x_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 204:../src/stm32f10x_dma.c **** {
 272              		.loc 1 204 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 16
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277 0220 80B4     		push	{r7}
 278              	.LCFI3:
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 0222 85B0     		sub	sp, sp, #20
 282              	.LCFI4:
 283              		.cfi_def_cfa_offset 24
 284 0224 00AF     		add	r7, sp, #0
 285              	.LCFI5:
 286              		.cfi_def_cfa_register 7
 287 0226 7860     		str	r0, [r7, #4]
 288 0228 3960     		str	r1, [r7, #0]
 205:../src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 289              		.loc 1 205 0
 290 022a 4FF00003 		mov	r3, #0
 291 022e FB60     		str	r3, [r7, #12]
 206:../src/stm32f10x_dma.c **** 
 207:../src/stm32f10x_dma.c ****   /* Check the parameters */
 208:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 209:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
 210:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 211:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 212:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
 213:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 214:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 215:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 216:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 217:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 218:../src/stm32f10x_dma.c **** 
 219:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
 220:../src/stm32f10x_dma.c ****   /* Get the DMAy_Channelx CCR value */
 221:../src/stm32f10x_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 292              		.loc 1 221 0
 293 0230 7B68     		ldr	r3, [r7, #4]
 294 0232 1B68     		ldr	r3, [r3, #0]
 295 0234 FB60     		str	r3, [r7, #12]
 222:../src/stm32f10x_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 223:../src/stm32f10x_dma.c ****   tmpreg &= CCR_CLEAR_Mask;
 296              		.loc 1 223 0
 297 0236 FB68     		ldr	r3, [r7, #12]
 298 0238 23F4FE43 		bic	r3, r3, #32512
 299 023c 23F0F003 		bic	r3, r3, #240
 300 0240 FB60     		str	r3, [r7, #12]
 224:../src/stm32f10x_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 225:../src/stm32f10x_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 226:../src/stm32f10x_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 227:../src/stm32f10x_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 228:../src/stm32f10x_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 229:../src/stm32f10x_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 230:../src/stm32f10x_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 231:../src/stm32f10x_dma.c ****   /* Set PL bits according to DMA_Priority value */
 232:../src/stm32f10x_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 233:../src/stm32f10x_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 301              		.loc 1 233 0
 302 0242 3B68     		ldr	r3, [r7, #0]
 303 0244 9A68     		ldr	r2, [r3, #8]
 304 0246 3B68     		ldr	r3, [r7, #0]
 305 0248 1B6A     		ldr	r3, [r3, #32]
 306 024a 1A43     		orrs	r2, r2, r3
 234:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 307              		.loc 1 234 0
 308 024c 3B68     		ldr	r3, [r7, #0]
 309 024e 1B69     		ldr	r3, [r3, #16]
 233:../src/stm32f10x_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 310              		.loc 1 233 0
 311 0250 1A43     		orrs	r2, r2, r3
 312              		.loc 1 234 0
 313 0252 3B68     		ldr	r3, [r7, #0]
 314 0254 5B69     		ldr	r3, [r3, #20]
 315 0256 1A43     		orrs	r2, r2, r3
 235:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 316              		.loc 1 235 0
 317 0258 3B68     		ldr	r3, [r7, #0]
 318 025a 9B69     		ldr	r3, [r3, #24]
 234:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 319              		.loc 1 234 0
 320 025c 1A43     		orrs	r2, r2, r3
 321              		.loc 1 235 0
 322 025e 3B68     		ldr	r3, [r7, #0]
 323 0260 DB69     		ldr	r3, [r3, #28]
 324 0262 1A43     		orrs	r2, r2, r3
 236:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 325              		.loc 1 236 0
 326 0264 3B68     		ldr	r3, [r7, #0]
 327 0266 5B6A     		ldr	r3, [r3, #36]
 235:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 328              		.loc 1 235 0
 329 0268 1A43     		orrs	r2, r2, r3
 330              		.loc 1 236 0
 331 026a 3B68     		ldr	r3, [r7, #0]
 332 026c 9B6A     		ldr	r3, [r3, #40]
 333 026e 1343     		orrs	r3, r3, r2
 233:../src/stm32f10x_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 334              		.loc 1 233 0
 335 0270 FA68     		ldr	r2, [r7, #12]
 336 0272 1343     		orrs	r3, r3, r2
 337 0274 FB60     		str	r3, [r7, #12]
 237:../src/stm32f10x_dma.c **** 
 238:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CCR */
 239:../src/stm32f10x_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 338              		.loc 1 239 0
 339 0276 7B68     		ldr	r3, [r7, #4]
 340 0278 FA68     		ldr	r2, [r7, #12]
 341 027a 1A60     		str	r2, [r3, #0]
 240:../src/stm32f10x_dma.c **** 
 241:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
 242:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 243:../src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 342              		.loc 1 243 0
 343 027c 3B68     		ldr	r3, [r7, #0]
 344 027e DA68     		ldr	r2, [r3, #12]
 345 0280 7B68     		ldr	r3, [r7, #4]
 346 0282 5A60     		str	r2, [r3, #4]
 244:../src/stm32f10x_dma.c **** 
 245:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
 246:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CPAR */
 247:../src/stm32f10x_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 347              		.loc 1 247 0
 348 0284 3B68     		ldr	r3, [r7, #0]
 349 0286 1A68     		ldr	r2, [r3, #0]
 350 0288 7B68     		ldr	r3, [r7, #4]
 351 028a 9A60     		str	r2, [r3, #8]
 248:../src/stm32f10x_dma.c **** 
 249:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
 250:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CMAR */
 251:../src/stm32f10x_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 352              		.loc 1 251 0
 353 028c 3B68     		ldr	r3, [r7, #0]
 354 028e 5A68     		ldr	r2, [r3, #4]
 355 0290 7B68     		ldr	r3, [r7, #4]
 356 0292 DA60     		str	r2, [r3, #12]
 252:../src/stm32f10x_dma.c **** }
 357              		.loc 1 252 0
 358 0294 07F11407 		add	r7, r7, #20
 359 0298 BD46     		mov	sp, r7
 360 029a 80BC     		pop	{r7}
 361 029c 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE30:
 365 029e 00BF     		.align	2
 366              		.global	DMA_StructInit
 367              		.thumb
 368              		.thumb_func
 370              	DMA_StructInit:
 371              	.LFB31:
 253:../src/stm32f10x_dma.c **** 
 254:../src/stm32f10x_dma.c **** /**
 255:../src/stm32f10x_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 256:../src/stm32f10x_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
 257:../src/stm32f10x_dma.c ****   *         be initialized.
 258:../src/stm32f10x_dma.c ****   * @retval None
 259:../src/stm32f10x_dma.c ****   */
 260:../src/stm32f10x_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 261:../src/stm32f10x_dma.c **** {
 372              		.loc 1 261 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 8
 375              		@ frame_needed = 1, uses_anonymous_args = 0
 376              		@ link register save eliminated.
 377 02a0 80B4     		push	{r7}
 378              	.LCFI6:
 379              		.cfi_def_cfa_offset 4
 380              		.cfi_offset 7, -4
 381 02a2 83B0     		sub	sp, sp, #12
 382              	.LCFI7:
 383              		.cfi_def_cfa_offset 16
 384 02a4 00AF     		add	r7, sp, #0
 385              	.LCFI8:
 386              		.cfi_def_cfa_register 7
 387 02a6 7860     		str	r0, [r7, #4]
 262:../src/stm32f10x_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 263:../src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 264:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 388              		.loc 1 264 0
 389 02a8 7B68     		ldr	r3, [r7, #4]
 390 02aa 4FF00002 		mov	r2, #0
 391 02ae 1A60     		str	r2, [r3, #0]
 265:../src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 266:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 392              		.loc 1 266 0
 393 02b0 7B68     		ldr	r3, [r7, #4]
 394 02b2 4FF00002 		mov	r2, #0
 395 02b6 5A60     		str	r2, [r3, #4]
 267:../src/stm32f10x_dma.c ****   /* Initialize the DMA_DIR member */
 268:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 396              		.loc 1 268 0
 397 02b8 7B68     		ldr	r3, [r7, #4]
 398 02ba 4FF00002 		mov	r2, #0
 399 02be 9A60     		str	r2, [r3, #8]
 269:../src/stm32f10x_dma.c ****   /* Initialize the DMA_BufferSize member */
 270:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 400              		.loc 1 270 0
 401 02c0 7B68     		ldr	r3, [r7, #4]
 402 02c2 4FF00002 		mov	r2, #0
 403 02c6 DA60     		str	r2, [r3, #12]
 271:../src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 272:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 404              		.loc 1 272 0
 405 02c8 7B68     		ldr	r3, [r7, #4]
 406 02ca 4FF00002 		mov	r2, #0
 407 02ce 1A61     		str	r2, [r3, #16]
 273:../src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryInc member */
 274:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 408              		.loc 1 274 0
 409 02d0 7B68     		ldr	r3, [r7, #4]
 410 02d2 4FF00002 		mov	r2, #0
 411 02d6 5A61     		str	r2, [r3, #20]
 275:../src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 276:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 412              		.loc 1 276 0
 413 02d8 7B68     		ldr	r3, [r7, #4]
 414 02da 4FF00002 		mov	r2, #0
 415 02de 9A61     		str	r2, [r3, #24]
 277:../src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 278:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 416              		.loc 1 278 0
 417 02e0 7B68     		ldr	r3, [r7, #4]
 418 02e2 4FF00002 		mov	r2, #0
 419 02e6 DA61     		str	r2, [r3, #28]
 279:../src/stm32f10x_dma.c ****   /* Initialize the DMA_Mode member */
 280:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 420              		.loc 1 280 0
 421 02e8 7B68     		ldr	r3, [r7, #4]
 422 02ea 4FF00002 		mov	r2, #0
 423 02ee 1A62     		str	r2, [r3, #32]
 281:../src/stm32f10x_dma.c ****   /* Initialize the DMA_Priority member */
 282:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 424              		.loc 1 282 0
 425 02f0 7B68     		ldr	r3, [r7, #4]
 426 02f2 4FF00002 		mov	r2, #0
 427 02f6 5A62     		str	r2, [r3, #36]
 283:../src/stm32f10x_dma.c ****   /* Initialize the DMA_M2M member */
 284:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 428              		.loc 1 284 0
 429 02f8 7B68     		ldr	r3, [r7, #4]
 430 02fa 4FF00002 		mov	r2, #0
 431 02fe 9A62     		str	r2, [r3, #40]
 285:../src/stm32f10x_dma.c **** }
 432              		.loc 1 285 0
 433 0300 07F10C07 		add	r7, r7, #12
 434 0304 BD46     		mov	sp, r7
 435 0306 80BC     		pop	{r7}
 436 0308 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE31:
 440 030a 00BF     		.align	2
 441              		.global	DMA_Cmd
 442              		.thumb
 443              		.thumb_func
 445              	DMA_Cmd:
 446              	.LFB32:
 286:../src/stm32f10x_dma.c **** 
 287:../src/stm32f10x_dma.c **** /**
 288:../src/stm32f10x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 289:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 290:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 291:../src/stm32f10x_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 292:../src/stm32f10x_dma.c ****   *   This parameter can be: ENABLE or DISABLE.
 293:../src/stm32f10x_dma.c ****   * @retval None
 294:../src/stm32f10x_dma.c ****   */
 295:../src/stm32f10x_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 296:../src/stm32f10x_dma.c **** {
 447              		.loc 1 296 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 030c 80B4     		push	{r7}
 453              	.LCFI9:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 7, -4
 456 030e 83B0     		sub	sp, sp, #12
 457              	.LCFI10:
 458              		.cfi_def_cfa_offset 16
 459 0310 00AF     		add	r7, sp, #0
 460              	.LCFI11:
 461              		.cfi_def_cfa_register 7
 462 0312 7860     		str	r0, [r7, #4]
 463 0314 0B46     		mov	r3, r1
 464 0316 FB70     		strb	r3, [r7, #3]
 297:../src/stm32f10x_dma.c ****   /* Check the parameters */
 298:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 299:../src/stm32f10x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 300:../src/stm32f10x_dma.c **** 
 301:../src/stm32f10x_dma.c ****   if (NewState != DISABLE)
 465              		.loc 1 301 0
 466 0318 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 467 031a 002B     		cmp	r3, #0
 468 031c 06D0     		beq	.L17
 302:../src/stm32f10x_dma.c ****   {
 303:../src/stm32f10x_dma.c ****     /* Enable the selected DMAy Channelx */
 304:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR1_EN;
 469              		.loc 1 304 0
 470 031e 7B68     		ldr	r3, [r7, #4]
 471 0320 1B68     		ldr	r3, [r3, #0]
 472 0322 43F00102 		orr	r2, r3, #1
 473 0326 7B68     		ldr	r3, [r7, #4]
 474 0328 1A60     		str	r2, [r3, #0]
 475 032a 07E0     		b	.L16
 476              	.L17:
 305:../src/stm32f10x_dma.c ****   }
 306:../src/stm32f10x_dma.c ****   else
 307:../src/stm32f10x_dma.c ****   {
 308:../src/stm32f10x_dma.c ****     /* Disable the selected DMAy Channelx */
 309:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 477              		.loc 1 309 0
 478 032c 7B68     		ldr	r3, [r7, #4]
 479 032e 1B68     		ldr	r3, [r3, #0]
 480 0330 1A46     		mov	r2, r3
 481 0332 4FF6FE73 		movw	r3, #65534
 482 0336 1340     		ands	r3, r3, r2
 483 0338 7A68     		ldr	r2, [r7, #4]
 484 033a 1360     		str	r3, [r2, #0]
 485              	.L16:
 310:../src/stm32f10x_dma.c ****   }
 311:../src/stm32f10x_dma.c **** }
 486              		.loc 1 311 0
 487 033c 07F10C07 		add	r7, r7, #12
 488 0340 BD46     		mov	sp, r7
 489 0342 80BC     		pop	{r7}
 490 0344 7047     		bx	lr
 491              		.cfi_endproc
 492              	.LFE32:
 494 0346 00BF     		.align	2
 495              		.global	DMA_ITConfig
 496              		.thumb
 497              		.thumb_func
 499              	DMA_ITConfig:
 500              	.LFB33:
 312:../src/stm32f10x_dma.c **** 
 313:../src/stm32f10x_dma.c **** /**
 314:../src/stm32f10x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 315:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 316:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 317:../src/stm32f10x_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 318:../src/stm32f10x_dma.c ****   *   or disabled. 
 319:../src/stm32f10x_dma.c ****   *   This parameter can be any combination of the following values:
 320:../src/stm32f10x_dma.c ****   *     @arg DMA_IT_TC:  Transfer complete interrupt mask
 321:../src/stm32f10x_dma.c ****   *     @arg DMA_IT_HT:  Half transfer interrupt mask
 322:../src/stm32f10x_dma.c ****   *     @arg DMA_IT_TE:  Transfer error interrupt mask
 323:../src/stm32f10x_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 324:../src/stm32f10x_dma.c ****   *   This parameter can be: ENABLE or DISABLE.
 325:../src/stm32f10x_dma.c ****   * @retval None
 326:../src/stm32f10x_dma.c ****   */
 327:../src/stm32f10x_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 328:../src/stm32f10x_dma.c **** {
 501              		.loc 1 328 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 16
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506 0348 80B4     		push	{r7}
 507              	.LCFI12:
 508              		.cfi_def_cfa_offset 4
 509              		.cfi_offset 7, -4
 510 034a 85B0     		sub	sp, sp, #20
 511              	.LCFI13:
 512              		.cfi_def_cfa_offset 24
 513 034c 00AF     		add	r7, sp, #0
 514              	.LCFI14:
 515              		.cfi_def_cfa_register 7
 516 034e F860     		str	r0, [r7, #12]
 517 0350 B960     		str	r1, [r7, #8]
 518 0352 1346     		mov	r3, r2
 519 0354 FB71     		strb	r3, [r7, #7]
 329:../src/stm32f10x_dma.c ****   /* Check the parameters */
 330:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 331:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 332:../src/stm32f10x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 333:../src/stm32f10x_dma.c ****   if (NewState != DISABLE)
 520              		.loc 1 333 0
 521 0356 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 522 0358 002B     		cmp	r3, #0
 523 035a 07D0     		beq	.L20
 334:../src/stm32f10x_dma.c ****   {
 335:../src/stm32f10x_dma.c ****     /* Enable the selected DMA interrupts */
 336:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 524              		.loc 1 336 0
 525 035c FB68     		ldr	r3, [r7, #12]
 526 035e 1B68     		ldr	r3, [r3, #0]
 527 0360 1A46     		mov	r2, r3
 528 0362 BB68     		ldr	r3, [r7, #8]
 529 0364 1A43     		orrs	r2, r2, r3
 530 0366 FB68     		ldr	r3, [r7, #12]
 531 0368 1A60     		str	r2, [r3, #0]
 532 036a 08E0     		b	.L19
 533              	.L20:
 337:../src/stm32f10x_dma.c ****   }
 338:../src/stm32f10x_dma.c ****   else
 339:../src/stm32f10x_dma.c ****   {
 340:../src/stm32f10x_dma.c ****     /* Disable the selected DMA interrupts */
 341:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 534              		.loc 1 341 0
 535 036c FB68     		ldr	r3, [r7, #12]
 536 036e 1B68     		ldr	r3, [r3, #0]
 537 0370 1A46     		mov	r2, r3
 538 0372 BB68     		ldr	r3, [r7, #8]
 539 0374 6FEA0303 		mvn	r3, r3
 540 0378 1A40     		ands	r2, r2, r3
 541 037a FB68     		ldr	r3, [r7, #12]
 542 037c 1A60     		str	r2, [r3, #0]
 543              	.L19:
 342:../src/stm32f10x_dma.c ****   }
 343:../src/stm32f10x_dma.c **** }
 544              		.loc 1 343 0
 545 037e 07F11407 		add	r7, r7, #20
 546 0382 BD46     		mov	sp, r7
 547 0384 80BC     		pop	{r7}
 548 0386 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE33:
 552              		.align	2
 553              		.global	DMA_SetCurrDataCounter
 554              		.thumb
 555              		.thumb_func
 557              	DMA_SetCurrDataCounter:
 558              	.LFB34:
 344:../src/stm32f10x_dma.c **** 
 345:../src/stm32f10x_dma.c **** /**
 346:../src/stm32f10x_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 347:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 348:../src/stm32f10x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 349:../src/stm32f10x_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 350:../src/stm32f10x_dma.c ****   *         transfer.   
 351:../src/stm32f10x_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.                 
 352:../src/stm32f10x_dma.c ****   * @retval None.
 353:../src/stm32f10x_dma.c ****   */
 354:../src/stm32f10x_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 355:../src/stm32f10x_dma.c **** {
 559              		.loc 1 355 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0388 80B4     		push	{r7}
 565              	.LCFI15:
 566              		.cfi_def_cfa_offset 4
 567              		.cfi_offset 7, -4
 568 038a 83B0     		sub	sp, sp, #12
 569              	.LCFI16:
 570              		.cfi_def_cfa_offset 16
 571 038c 00AF     		add	r7, sp, #0
 572              	.LCFI17:
 573              		.cfi_def_cfa_register 7
 574 038e 7860     		str	r0, [r7, #4]
 575 0390 0B46     		mov	r3, r1
 576 0392 7B80     		strh	r3, [r7, #2]	@ movhi
 356:../src/stm32f10x_dma.c ****   /* Check the parameters */
 357:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 358:../src/stm32f10x_dma.c ****   
 359:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
 360:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 361:../src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;  
 577              		.loc 1 361 0
 578 0394 7A88     		ldrh	r2, [r7, #2]
 579 0396 7B68     		ldr	r3, [r7, #4]
 580 0398 5A60     		str	r2, [r3, #4]
 362:../src/stm32f10x_dma.c **** }
 581              		.loc 1 362 0
 582 039a 07F10C07 		add	r7, r7, #12
 583 039e BD46     		mov	sp, r7
 584 03a0 80BC     		pop	{r7}
 585 03a2 7047     		bx	lr
 586              		.cfi_endproc
 587              	.LFE34:
 589              		.align	2
 590              		.global	DMA_GetCurrDataCounter
 591              		.thumb
 592              		.thumb_func
 594              	DMA_GetCurrDataCounter:
 595              	.LFB35:
 363:../src/stm32f10x_dma.c **** 
 364:../src/stm32f10x_dma.c **** /**
 365:../src/stm32f10x_dma.c ****   * @brief  Returns the number of remaining data units in the current
 366:../src/stm32f10x_dma.c ****   *         DMAy Channelx transfer.
 367:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 368:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 369:../src/stm32f10x_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 370:../src/stm32f10x_dma.c ****   *         transfer.
 371:../src/stm32f10x_dma.c ****   */
 372:../src/stm32f10x_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 373:../src/stm32f10x_dma.c **** {
 596              		.loc 1 373 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 8
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601 03a4 80B4     		push	{r7}
 602              	.LCFI18:
 603              		.cfi_def_cfa_offset 4
 604              		.cfi_offset 7, -4
 605 03a6 83B0     		sub	sp, sp, #12
 606              	.LCFI19:
 607              		.cfi_def_cfa_offset 16
 608 03a8 00AF     		add	r7, sp, #0
 609              	.LCFI20:
 610              		.cfi_def_cfa_register 7
 611 03aa 7860     		str	r0, [r7, #4]
 374:../src/stm32f10x_dma.c ****   /* Check the parameters */
 375:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 376:../src/stm32f10x_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 377:../src/stm32f10x_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 612              		.loc 1 377 0
 613 03ac 7B68     		ldr	r3, [r7, #4]
 614 03ae 5B68     		ldr	r3, [r3, #4]
 615 03b0 9BB2     		uxth	r3, r3
 378:../src/stm32f10x_dma.c **** }
 616              		.loc 1 378 0
 617 03b2 1846     		mov	r0, r3
 618 03b4 07F10C07 		add	r7, r7, #12
 619 03b8 BD46     		mov	sp, r7
 620 03ba 80BC     		pop	{r7}
 621 03bc 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE35:
 625 03be 00BF     		.align	2
 626              		.global	DMA_GetFlagStatus
 627              		.thumb
 628              		.thumb_func
 630              	DMA_GetFlagStatus:
 631              	.LFB36:
 379:../src/stm32f10x_dma.c **** 
 380:../src/stm32f10x_dma.c **** /**
 381:../src/stm32f10x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 382:../src/stm32f10x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to check.
 383:../src/stm32f10x_dma.c ****   *   This parameter can be one of the following values:
 384:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 385:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 386:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 387:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 388:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 389:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 390:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 391:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 392:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 393:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 394:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 395:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 396:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 397:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 398:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 399:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 400:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 401:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 402:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 403:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 404:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 405:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 406:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 407:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 408:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 409:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 410:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 411:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 412:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 413:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 414:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 415:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 416:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 417:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 418:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 419:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 420:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 421:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 422:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 423:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 424:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 425:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 426:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 427:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 428:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 429:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 430:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 431:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 432:../src/stm32f10x_dma.c ****   * @retval The new state of DMAy_FLAG (SET or RESET).
 433:../src/stm32f10x_dma.c ****   */
 434:../src/stm32f10x_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
 435:../src/stm32f10x_dma.c **** {
 632              		.loc 1 435 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 16
 635              		@ frame_needed = 1, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637 03c0 80B4     		push	{r7}
 638              	.LCFI21:
 639              		.cfi_def_cfa_offset 4
 640              		.cfi_offset 7, -4
 641 03c2 85B0     		sub	sp, sp, #20
 642              	.LCFI22:
 643              		.cfi_def_cfa_offset 24
 644 03c4 00AF     		add	r7, sp, #0
 645              	.LCFI23:
 646              		.cfi_def_cfa_register 7
 647 03c6 7860     		str	r0, [r7, #4]
 436:../src/stm32f10x_dma.c ****   FlagStatus bitstatus = RESET;
 648              		.loc 1 436 0
 649 03c8 4FF00003 		mov	r3, #0
 650 03cc FB73     		strb	r3, [r7, #15]
 437:../src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 651              		.loc 1 437 0
 652 03ce 4FF00003 		mov	r3, #0
 653 03d2 BB60     		str	r3, [r7, #8]
 438:../src/stm32f10x_dma.c ****   
 439:../src/stm32f10x_dma.c ****   /* Check the parameters */
 440:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
 441:../src/stm32f10x_dma.c **** 
 442:../src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 443:../src/stm32f10x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 654              		.loc 1 443 0
 655 03d4 7B68     		ldr	r3, [r7, #4]
 656 03d6 03F08053 		and	r3, r3, #268435456
 657 03da 002B     		cmp	r3, #0
 658 03dc 06D0     		beq	.L25
 444:../src/stm32f10x_dma.c ****   {
 445:../src/stm32f10x_dma.c ****     /* Get DMA2 ISR register value */
 446:../src/stm32f10x_dma.c ****     tmpreg = DMA2->ISR ;
 659              		.loc 1 446 0
 660 03de 4FF48063 		mov	r3, #1024
 661 03e2 C4F20203 		movt	r3, 16386
 662 03e6 1B68     		ldr	r3, [r3, #0]
 663 03e8 BB60     		str	r3, [r7, #8]
 664 03ea 05E0     		b	.L26
 665              	.L25:
 447:../src/stm32f10x_dma.c ****   }
 448:../src/stm32f10x_dma.c ****   else
 449:../src/stm32f10x_dma.c ****   {
 450:../src/stm32f10x_dma.c ****     /* Get DMA1 ISR register value */
 451:../src/stm32f10x_dma.c ****     tmpreg = DMA1->ISR ;
 666              		.loc 1 451 0
 667 03ec 4FF00003 		mov	r3, #0
 668 03f0 C4F20203 		movt	r3, 16386
 669 03f4 1B68     		ldr	r3, [r3, #0]
 670 03f6 BB60     		str	r3, [r7, #8]
 671              	.L26:
 452:../src/stm32f10x_dma.c ****   }
 453:../src/stm32f10x_dma.c **** 
 454:../src/stm32f10x_dma.c ****   /* Check the status of the specified DMAy flag */
 455:../src/stm32f10x_dma.c ****   if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 672              		.loc 1 455 0
 673 03f8 BA68     		ldr	r2, [r7, #8]
 674 03fa 7B68     		ldr	r3, [r7, #4]
 675 03fc 1340     		ands	r3, r3, r2
 676 03fe 002B     		cmp	r3, #0
 677 0400 03D0     		beq	.L27
 456:../src/stm32f10x_dma.c ****   {
 457:../src/stm32f10x_dma.c ****     /* DMAy_FLAG is set */
 458:../src/stm32f10x_dma.c ****     bitstatus = SET;
 678              		.loc 1 458 0
 679 0402 4FF00103 		mov	r3, #1
 680 0406 FB73     		strb	r3, [r7, #15]
 681 0408 02E0     		b	.L28
 682              	.L27:
 459:../src/stm32f10x_dma.c ****   }
 460:../src/stm32f10x_dma.c ****   else
 461:../src/stm32f10x_dma.c ****   {
 462:../src/stm32f10x_dma.c ****     /* DMAy_FLAG is reset */
 463:../src/stm32f10x_dma.c ****     bitstatus = RESET;
 683              		.loc 1 463 0
 684 040a 4FF00003 		mov	r3, #0
 685 040e FB73     		strb	r3, [r7, #15]
 686              	.L28:
 464:../src/stm32f10x_dma.c ****   }
 465:../src/stm32f10x_dma.c ****   
 466:../src/stm32f10x_dma.c ****   /* Return the DMAy_FLAG status */
 467:../src/stm32f10x_dma.c ****   return  bitstatus;
 687              		.loc 1 467 0
 688 0410 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 468:../src/stm32f10x_dma.c **** }
 689              		.loc 1 468 0
 690 0412 1846     		mov	r0, r3
 691 0414 07F11407 		add	r7, r7, #20
 692 0418 BD46     		mov	sp, r7
 693 041a 80BC     		pop	{r7}
 694 041c 7047     		bx	lr
 695              		.cfi_endproc
 696              	.LFE36:
 698 041e 00BF     		.align	2
 699              		.global	DMA_ClearFlag
 700              		.thumb
 701              		.thumb_func
 703              	DMA_ClearFlag:
 704              	.LFB37:
 469:../src/stm32f10x_dma.c **** 
 470:../src/stm32f10x_dma.c **** /**
 471:../src/stm32f10x_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 472:../src/stm32f10x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to clear.
 473:../src/stm32f10x_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 474:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 475:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 476:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 477:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 478:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 479:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 480:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 481:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 482:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 483:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 484:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 485:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 486:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 487:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 488:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 489:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 490:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 491:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 492:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 493:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 494:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 495:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 496:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 497:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 498:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 499:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 500:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 501:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 502:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 503:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 504:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 505:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 506:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 507:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 508:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 509:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 510:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 511:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 512:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 513:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 514:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 515:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 516:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 517:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 518:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 519:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 520:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 521:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 522:../src/stm32f10x_dma.c ****   * @retval None
 523:../src/stm32f10x_dma.c ****   */
 524:../src/stm32f10x_dma.c **** void DMA_ClearFlag(uint32_t DMAy_FLAG)
 525:../src/stm32f10x_dma.c **** {
 705              		.loc 1 525 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 8
 708              		@ frame_needed = 1, uses_anonymous_args = 0
 709              		@ link register save eliminated.
 710 0420 80B4     		push	{r7}
 711              	.LCFI24:
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 7, -4
 714 0422 83B0     		sub	sp, sp, #12
 715              	.LCFI25:
 716              		.cfi_def_cfa_offset 16
 717 0424 00AF     		add	r7, sp, #0
 718              	.LCFI26:
 719              		.cfi_def_cfa_register 7
 720 0426 7860     		str	r0, [r7, #4]
 526:../src/stm32f10x_dma.c ****   /* Check the parameters */
 527:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
 528:../src/stm32f10x_dma.c **** 
 529:../src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 530:../src/stm32f10x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 721              		.loc 1 530 0
 722 0428 7B68     		ldr	r3, [r7, #4]
 723 042a 03F08053 		and	r3, r3, #268435456
 724 042e 002B     		cmp	r3, #0
 725 0430 06D0     		beq	.L30
 531:../src/stm32f10x_dma.c ****   {
 532:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy flags */
 533:../src/stm32f10x_dma.c ****     DMA2->IFCR = DMAy_FLAG;
 726              		.loc 1 533 0
 727 0432 4FF48063 		mov	r3, #1024
 728 0436 C4F20203 		movt	r3, 16386
 729 043a 7A68     		ldr	r2, [r7, #4]
 730 043c 5A60     		str	r2, [r3, #4]
 731 043e 05E0     		b	.L29
 732              	.L30:
 534:../src/stm32f10x_dma.c ****   }
 535:../src/stm32f10x_dma.c ****   else
 536:../src/stm32f10x_dma.c ****   {
 537:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy flags */
 538:../src/stm32f10x_dma.c ****     DMA1->IFCR = DMAy_FLAG;
 733              		.loc 1 538 0
 734 0440 4FF00003 		mov	r3, #0
 735 0444 C4F20203 		movt	r3, 16386
 736 0448 7A68     		ldr	r2, [r7, #4]
 737 044a 5A60     		str	r2, [r3, #4]
 738              	.L29:
 539:../src/stm32f10x_dma.c ****   }
 540:../src/stm32f10x_dma.c **** }
 739              		.loc 1 540 0
 740 044c 07F10C07 		add	r7, r7, #12
 741 0450 BD46     		mov	sp, r7
 742 0452 80BC     		pop	{r7}
 743 0454 7047     		bx	lr
 744              		.cfi_endproc
 745              	.LFE37:
 747 0456 00BF     		.align	2
 748              		.global	DMA_GetITStatus
 749              		.thumb
 750              		.thumb_func
 752              	DMA_GetITStatus:
 753              	.LFB38:
 541:../src/stm32f10x_dma.c **** 
 542:../src/stm32f10x_dma.c **** /**
 543:../src/stm32f10x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 544:../src/stm32f10x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt source to check. 
 545:../src/stm32f10x_dma.c ****   *   This parameter can be one of the following values:
 546:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 547:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 548:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 549:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 550:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 551:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 552:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 553:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 554:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 555:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 556:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 557:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 558:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 559:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 560:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 561:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 562:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 563:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 564:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 565:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 566:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 567:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 568:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 569:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 570:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 571:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 572:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 573:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 574:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 575:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 576:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 577:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 578:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 579:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 580:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 581:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 582:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 583:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 584:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 585:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 586:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 587:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 588:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 589:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 590:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 591:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 592:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 593:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 594:../src/stm32f10x_dma.c ****   * @retval The new state of DMAy_IT (SET or RESET).
 595:../src/stm32f10x_dma.c ****   */
 596:../src/stm32f10x_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 597:../src/stm32f10x_dma.c **** {
 754              		.loc 1 597 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 16
 757              		@ frame_needed = 1, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759 0458 80B4     		push	{r7}
 760              	.LCFI27:
 761              		.cfi_def_cfa_offset 4
 762              		.cfi_offset 7, -4
 763 045a 85B0     		sub	sp, sp, #20
 764              	.LCFI28:
 765              		.cfi_def_cfa_offset 24
 766 045c 00AF     		add	r7, sp, #0
 767              	.LCFI29:
 768              		.cfi_def_cfa_register 7
 769 045e 7860     		str	r0, [r7, #4]
 598:../src/stm32f10x_dma.c ****   ITStatus bitstatus = RESET;
 770              		.loc 1 598 0
 771 0460 4FF00003 		mov	r3, #0
 772 0464 FB73     		strb	r3, [r7, #15]
 599:../src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 773              		.loc 1 599 0
 774 0466 4FF00003 		mov	r3, #0
 775 046a BB60     		str	r3, [r7, #8]
 600:../src/stm32f10x_dma.c **** 
 601:../src/stm32f10x_dma.c ****   /* Check the parameters */
 602:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_GET_IT(DMAy_IT));
 603:../src/stm32f10x_dma.c **** 
 604:../src/stm32f10x_dma.c ****   /* Calculate the used DMA */
 605:../src/stm32f10x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 776              		.loc 1 605 0
 777 046c 7B68     		ldr	r3, [r7, #4]
 778 046e 03F08053 		and	r3, r3, #268435456
 779 0472 002B     		cmp	r3, #0
 780 0474 06D0     		beq	.L33
 606:../src/stm32f10x_dma.c ****   {
 607:../src/stm32f10x_dma.c ****     /* Get DMA2 ISR register value */
 608:../src/stm32f10x_dma.c ****     tmpreg = DMA2->ISR;
 781              		.loc 1 608 0
 782 0476 4FF48063 		mov	r3, #1024
 783 047a C4F20203 		movt	r3, 16386
 784 047e 1B68     		ldr	r3, [r3, #0]
 785 0480 BB60     		str	r3, [r7, #8]
 786 0482 05E0     		b	.L34
 787              	.L33:
 609:../src/stm32f10x_dma.c ****   }
 610:../src/stm32f10x_dma.c ****   else
 611:../src/stm32f10x_dma.c ****   {
 612:../src/stm32f10x_dma.c ****     /* Get DMA1 ISR register value */
 613:../src/stm32f10x_dma.c ****     tmpreg = DMA1->ISR;
 788              		.loc 1 613 0
 789 0484 4FF00003 		mov	r3, #0
 790 0488 C4F20203 		movt	r3, 16386
 791 048c 1B68     		ldr	r3, [r3, #0]
 792 048e BB60     		str	r3, [r7, #8]
 793              	.L34:
 614:../src/stm32f10x_dma.c ****   }
 615:../src/stm32f10x_dma.c **** 
 616:../src/stm32f10x_dma.c ****   /* Check the status of the specified DMAy interrupt */
 617:../src/stm32f10x_dma.c ****   if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 794              		.loc 1 617 0
 795 0490 BA68     		ldr	r2, [r7, #8]
 796 0492 7B68     		ldr	r3, [r7, #4]
 797 0494 1340     		ands	r3, r3, r2
 798 0496 002B     		cmp	r3, #0
 799 0498 03D0     		beq	.L35
 618:../src/stm32f10x_dma.c ****   {
 619:../src/stm32f10x_dma.c ****     /* DMAy_IT is set */
 620:../src/stm32f10x_dma.c ****     bitstatus = SET;
 800              		.loc 1 620 0
 801 049a 4FF00103 		mov	r3, #1
 802 049e FB73     		strb	r3, [r7, #15]
 803 04a0 02E0     		b	.L36
 804              	.L35:
 621:../src/stm32f10x_dma.c ****   }
 622:../src/stm32f10x_dma.c ****   else
 623:../src/stm32f10x_dma.c ****   {
 624:../src/stm32f10x_dma.c ****     /* DMAy_IT is reset */
 625:../src/stm32f10x_dma.c ****     bitstatus = RESET;
 805              		.loc 1 625 0
 806 04a2 4FF00003 		mov	r3, #0
 807 04a6 FB73     		strb	r3, [r7, #15]
 808              	.L36:
 626:../src/stm32f10x_dma.c ****   }
 627:../src/stm32f10x_dma.c ****   /* Return the DMA_IT status */
 628:../src/stm32f10x_dma.c ****   return  bitstatus;
 809              		.loc 1 628 0
 810 04a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 629:../src/stm32f10x_dma.c **** }
 811              		.loc 1 629 0
 812 04aa 1846     		mov	r0, r3
 813 04ac 07F11407 		add	r7, r7, #20
 814 04b0 BD46     		mov	sp, r7
 815 04b2 80BC     		pop	{r7}
 816 04b4 7047     		bx	lr
 817              		.cfi_endproc
 818              	.LFE38:
 820 04b6 00BF     		.align	2
 821              		.global	DMA_ClearITPendingBit
 822              		.thumb
 823              		.thumb_func
 825              	DMA_ClearITPendingBit:
 826              	.LFB39:
 630:../src/stm32f10x_dma.c **** 
 631:../src/stm32f10x_dma.c **** /**
 632:../src/stm32f10x_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 633:../src/stm32f10x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt pending bit to clear.
 634:../src/stm32f10x_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 635:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 636:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 637:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 638:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 639:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 640:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 641:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 642:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 643:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 644:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 645:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 646:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 647:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 648:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 649:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 650:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 651:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 652:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 653:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 654:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 655:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 656:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 657:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 658:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 659:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 660:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 661:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 662:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 663:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 664:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 665:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 666:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 667:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 668:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 669:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 670:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 671:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 672:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 673:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 674:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 675:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 676:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 677:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 678:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 679:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 680:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 681:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 682:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 683:../src/stm32f10x_dma.c ****   * @retval None
 684:../src/stm32f10x_dma.c ****   */
 685:../src/stm32f10x_dma.c **** void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 686:../src/stm32f10x_dma.c **** {
 827              		.loc 1 686 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 8
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831              		@ link register save eliminated.
 832 04b8 80B4     		push	{r7}
 833              	.LCFI30:
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 7, -4
 836 04ba 83B0     		sub	sp, sp, #12
 837              	.LCFI31:
 838              		.cfi_def_cfa_offset 16
 839 04bc 00AF     		add	r7, sp, #0
 840              	.LCFI32:
 841              		.cfi_def_cfa_register 7
 842 04be 7860     		str	r0, [r7, #4]
 687:../src/stm32f10x_dma.c ****   /* Check the parameters */
 688:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
 689:../src/stm32f10x_dma.c **** 
 690:../src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 691:../src/stm32f10x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 843              		.loc 1 691 0
 844 04c0 7B68     		ldr	r3, [r7, #4]
 845 04c2 03F08053 		and	r3, r3, #268435456
 846 04c6 002B     		cmp	r3, #0
 847 04c8 06D0     		beq	.L38
 692:../src/stm32f10x_dma.c ****   {
 693:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 694:../src/stm32f10x_dma.c ****     DMA2->IFCR = DMAy_IT;
 848              		.loc 1 694 0
 849 04ca 4FF48063 		mov	r3, #1024
 850 04ce C4F20203 		movt	r3, 16386
 851 04d2 7A68     		ldr	r2, [r7, #4]
 852 04d4 5A60     		str	r2, [r3, #4]
 853 04d6 05E0     		b	.L37
 854              	.L38:
 695:../src/stm32f10x_dma.c ****   }
 696:../src/stm32f10x_dma.c ****   else
 697:../src/stm32f10x_dma.c ****   {
 698:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 699:../src/stm32f10x_dma.c ****     DMA1->IFCR = DMAy_IT;
 855              		.loc 1 699 0
 856 04d8 4FF00003 		mov	r3, #0
 857 04dc C4F20203 		movt	r3, 16386
 858 04e0 7A68     		ldr	r2, [r7, #4]
 859 04e2 5A60     		str	r2, [r3, #4]
 860              	.L37:
 700:../src/stm32f10x_dma.c ****   }
 701:../src/stm32f10x_dma.c **** }
 861              		.loc 1 701 0
 862 04e4 07F10C07 		add	r7, r7, #12
 863 04e8 BD46     		mov	sp, r7
 864 04ea 80BC     		pop	{r7}
 865 04ec 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE39:
 869              	.Letext0:
 870              		.file 2 "/home/jachu/elektronika/STM32/gcc-arm-none-eabi-4_6-2012q4/bin/../lib/gcc/arm-none-eabi/4
 871              		.file 3 "/home/jachu/workspaceSTM/Sumo_STM/src/stm32f10x.h"
 872              		.file 4 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 873              		.file 5 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupp
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_dma.c
     /tmp/cch7jInx.s:18     .text:00000000 $t
     /tmp/cch7jInx.s:23     .text:00000000 DMA_DeInit
     /tmp/cch7jInx.s:270    .text:00000220 DMA_Init
     /tmp/cch7jInx.s:370    .text:000002a0 DMA_StructInit
     /tmp/cch7jInx.s:445    .text:0000030c DMA_Cmd
     /tmp/cch7jInx.s:499    .text:00000348 DMA_ITConfig
     /tmp/cch7jInx.s:557    .text:00000388 DMA_SetCurrDataCounter
     /tmp/cch7jInx.s:594    .text:000003a4 DMA_GetCurrDataCounter
     /tmp/cch7jInx.s:630    .text:000003c0 DMA_GetFlagStatus
     /tmp/cch7jInx.s:703    .text:00000420 DMA_ClearFlag
     /tmp/cch7jInx.s:752    .text:00000458 DMA_GetITStatus
     /tmp/cch7jInx.s:825    .text:000004b8 DMA_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
