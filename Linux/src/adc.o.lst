   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"adc.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	adcBuffer
  19              		.section	.bss.adcBuffer,"aw",%nobits
  20              		.align	2
  23              	adcBuffer:
  24 0000 00000000 		.space	800
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.global	curMean
  26              		.section	.bss.curMean,"aw",%nobits
  27              		.align	2
  30              	curMean:
  31 0000 00000000 		.space	4
  32              		.global	emfMean
  33              		.section	.bss.emfMean,"aw",%nobits
  34              		.align	2
  37              	emfMean:
  38 0000 00000000 		.space	4
  39              		.global	motVMean
  40              		.section	.bss.motVMean,"aw",%nobits
  41              		.align	2
  44              	motVMean:
  45 0000 00000000 		.space	4
  46              		.section	.text._Z7adcInitv,"ax",%progbits
  47              		.align	2
  48              		.global	_Z7adcInitv
  49              		.thumb
  50              		.thumb_func
  52              	_Z7adcInitv:
  53              	.LFB29:
  54              		.file 1 "../src/adc.cpp"
   1:../src/adc.cpp **** /*
   2:../src/adc.cpp ****  * adc.cpp
   3:../src/adc.cpp ****  *
   4:../src/adc.cpp ****  *  Created on: 19-01-2013
   5:../src/adc.cpp ****  *      Author: jachu
   6:../src/adc.cpp ****  */
   7:../src/adc.cpp **** #include <stm32f10x_rcc.h>
   8:../src/adc.cpp **** #include <stm32f10x_dma.h>
   9:../src/adc.cpp **** #include <stm32f10x_adc.h>
  10:../src/adc.cpp **** #include <stm32f10x_gpio.h>
  11:../src/adc.cpp **** #include <misc.h>
  12:../src/adc.cpp **** #include "adc.h"
  13:../src/adc.cpp **** 
  14:../src/adc.cpp **** #define ADC_BUFFER (4*ADC_NSAMP_MEAN)
  15:../src/adc.cpp **** 
  16:../src/adc.cpp **** uint16_t adcBuffer[ADC_BUFFER];
  17:../src/adc.cpp **** volatile float curMean;
  18:../src/adc.cpp **** volatile float emfMean;
  19:../src/adc.cpp **** volatile float motVMean;
  20:../src/adc.cpp **** 
  21:../src/adc.cpp **** void adcInit(){
  55              		.loc 1 21 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 72
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59 0000 80B5     		push	{r7, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 14, -4
  63              		.cfi_offset 7, -8
  64 0002 92B0     		sub	sp, sp, #72
  65              	.LCFI1:
  66              		.cfi_def_cfa_offset 80
  67 0004 00AF     		add	r7, sp, #0
  68              	.LCFI2:
  69              		.cfi_def_cfa_register 7
  70              	.LBB2:
  22:../src/adc.cpp **** 	/* ADCCLK = PCLK2/4 */
  23:../src/adc.cpp **** 	RCC_ADCCLKConfig(RCC_PCLK2_Div4);
  71              		.loc 1 23 0
  72 0006 4FF48040 		mov	r0, #16384
  73 000a FFF7FEFF 		bl	RCC_ADCCLKConfig
  24:../src/adc.cpp **** 	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
  74              		.loc 1 24 0
  75 000e 4FF00100 		mov	r0, #1
  76 0012 4FF00101 		mov	r1, #1
  77 0016 FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
  25:../src/adc.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
  78              		.loc 1 25 0
  79 001a 4FF40170 		mov	r0, #516
  80 001e 4FF00101 		mov	r1, #1
  81 0022 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  26:../src/adc.cpp **** 
  27:../src/adc.cpp **** 	GPIO_InitTypeDef gpioInit;
  28:../src/adc.cpp **** 	gpioInit.GPIO_Pin = CUR_PIN | EMF_POS_PIN | EMF_NEG_PIN | MOT_V_PIN;
  82              		.loc 1 28 0
  83 0026 4FF00F03 		mov	r3, #15
  84 002a A7F84430 		strh	r3, [r7, #68]	@ movhi
  29:../src/adc.cpp **** 	gpioInit.GPIO_Mode = GPIO_Mode_AIN;
  85              		.loc 1 29 0
  86 002e 4FF00003 		mov	r3, #0
  87 0032 87F84730 		strb	r3, [r7, #71]
  30:../src/adc.cpp **** 	GPIO_Init(GPIOA, &gpioInit);
  88              		.loc 1 30 0
  89 0036 07F14403 		add	r3, r7, #68
  90 003a 4FF40060 		mov	r0, #2048
  91 003e C4F20100 		movt	r0, 16385
  92 0042 1946     		mov	r1, r3
  93 0044 FFF7FEFF 		bl	GPIO_Init
  31:../src/adc.cpp **** 
  32:../src/adc.cpp **** 	NVIC_InitTypeDef nvicInit;
  33:../src/adc.cpp **** 	nvicInit.NVIC_IRQChannel = ADC1_2_IRQn;
  94              		.loc 1 33 0
  95 0048 4FF01203 		mov	r3, #18
  96 004c 87F84030 		strb	r3, [r7, #64]
  34:../src/adc.cpp **** 	nvicInit.NVIC_IRQChannelPreemptionPriority = 0;
  97              		.loc 1 34 0
  98 0050 4FF00003 		mov	r3, #0
  99 0054 87F84130 		strb	r3, [r7, #65]
  35:../src/adc.cpp **** 	nvicInit.NVIC_IRQChannelSubPriority = 0;
 100              		.loc 1 35 0
 101 0058 4FF00003 		mov	r3, #0
 102 005c 87F84230 		strb	r3, [r7, #66]
  36:../src/adc.cpp **** 	nvicInit.NVIC_IRQChannelCmd = ENABLE;
 103              		.loc 1 36 0
 104 0060 4FF00103 		mov	r3, #1
 105 0064 87F84330 		strb	r3, [r7, #67]
  37:../src/adc.cpp **** 	NVIC_Init(&nvicInit);
 106              		.loc 1 37 0
 107 0068 07F14003 		add	r3, r7, #64
 108 006c 1846     		mov	r0, r3
 109 006e FFF7FEFF 		bl	NVIC_Init
  38:../src/adc.cpp **** 
  39:../src/adc.cpp **** 	DMA_InitTypeDef dmaInit;
  40:../src/adc.cpp **** 	dmaInit.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR);
 110              		.loc 1 40 0
 111 0072 42F24C43 		movw	r3, #9292
 112 0076 C4F20103 		movt	r3, 16385
 113 007a 3B60     		str	r3, [r7, #0]
  41:../src/adc.cpp **** 	dmaInit.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 114              		.loc 1 41 0
 115 007c 40F20003 		movw	r3, #:lower16:adcBuffer
 116 0080 C0F20003 		movt	r3, #:upper16:adcBuffer
 117 0084 7B60     		str	r3, [r7, #4]
  42:../src/adc.cpp **** 	dmaInit.DMA_DIR = DMA_DIR_PeripheralSRC;
 118              		.loc 1 42 0
 119 0086 4FF00003 		mov	r3, #0
 120 008a BB60     		str	r3, [r7, #8]
  43:../src/adc.cpp **** 	dmaInit.DMA_BufferSize = ADC_BUFFER;
 121              		.loc 1 43 0
 122 008c 4FF4C873 		mov	r3, #400
 123 0090 FB60     		str	r3, [r7, #12]
  44:../src/adc.cpp **** 	dmaInit.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 124              		.loc 1 44 0
 125 0092 4FF00003 		mov	r3, #0
 126 0096 3B61     		str	r3, [r7, #16]
  45:../src/adc.cpp **** 	dmaInit.DMA_MemoryInc = DMA_MemoryInc_Enable;
 127              		.loc 1 45 0
 128 0098 4FF08003 		mov	r3, #128
 129 009c 7B61     		str	r3, [r7, #20]
  46:../src/adc.cpp **** 	dmaInit.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 130              		.loc 1 46 0
 131 009e 4FF48073 		mov	r3, #256
 132 00a2 BB61     		str	r3, [r7, #24]
  47:../src/adc.cpp **** 	dmaInit.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 133              		.loc 1 47 0
 134 00a4 4FF48063 		mov	r3, #1024
 135 00a8 FB61     		str	r3, [r7, #28]
  48:../src/adc.cpp **** 	dmaInit.DMA_Mode = DMA_Mode_Circular;
 136              		.loc 1 48 0
 137 00aa 4FF02003 		mov	r3, #32
 138 00ae 3B62     		str	r3, [r7, #32]
  49:../src/adc.cpp **** 	dmaInit.DMA_Priority = DMA_Priority_Low;
 139              		.loc 1 49 0
 140 00b0 4FF00003 		mov	r3, #0
 141 00b4 7B62     		str	r3, [r7, #36]
  50:../src/adc.cpp **** 	dmaInit.DMA_M2M = DMA_M2M_Disable;
 142              		.loc 1 50 0
 143 00b6 4FF00003 		mov	r3, #0
 144 00ba BB62     		str	r3, [r7, #40]
  51:../src/adc.cpp **** 	DMA_Init(ADC_DMA_CHANNEL, &dmaInit);
 145              		.loc 1 51 0
 146 00bc 3B46     		mov	r3, r7
 147 00be 4FF00800 		mov	r0, #8
 148 00c2 C4F20200 		movt	r0, 16386
 149 00c6 1946     		mov	r1, r3
 150 00c8 FFF7FEFF 		bl	DMA_Init
  52:../src/adc.cpp **** 	DMA_Cmd(ADC_DMA_CHANNEL, ENABLE);
 151              		.loc 1 52 0
 152 00cc 4FF00800 		mov	r0, #8
 153 00d0 C4F20200 		movt	r0, 16386
 154 00d4 4FF00101 		mov	r1, #1
 155 00d8 FFF7FEFF 		bl	DMA_Cmd
  53:../src/adc.cpp **** 
  54:../src/adc.cpp **** 	ADC_InitTypeDef adcInit;
  55:../src/adc.cpp **** 	adcInit.ADC_Mode = ADC_Mode_Independent;
 156              		.loc 1 55 0
 157 00dc 4FF00003 		mov	r3, #0
 158 00e0 FB62     		str	r3, [r7, #44]
  56:../src/adc.cpp **** 	adcInit.ADC_ScanConvMode = ENABLE;
 159              		.loc 1 56 0
 160 00e2 4FF00103 		mov	r3, #1
 161 00e6 87F83030 		strb	r3, [r7, #48]
  57:../src/adc.cpp **** 	adcInit.ADC_ContinuousConvMode = DISABLE;
 162              		.loc 1 57 0
 163 00ea 4FF00003 		mov	r3, #0
 164 00ee 87F83130 		strb	r3, [r7, #49]
  58:../src/adc.cpp **** 	adcInit.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 165              		.loc 1 58 0
 166 00f2 4FF46023 		mov	r3, #917504
 167 00f6 7B63     		str	r3, [r7, #52]
  59:../src/adc.cpp **** 	adcInit.ADC_DataAlign = ADC_DataAlign_Right;
 168              		.loc 1 59 0
 169 00f8 4FF00003 		mov	r3, #0
 170 00fc BB63     		str	r3, [r7, #56]
  60:../src/adc.cpp **** 	adcInit.ADC_NbrOfChannel = 4;
 171              		.loc 1 60 0
 172 00fe 4FF00403 		mov	r3, #4
 173 0102 87F83C30 		strb	r3, [r7, #60]
  61:../src/adc.cpp **** 	ADC_Init(ADC1, &adcInit);
 174              		.loc 1 61 0
 175 0106 07F12C03 		add	r3, r7, #44
 176 010a 4FF41050 		mov	r0, #9216
 177 010e C4F20100 		movt	r0, 16385
 178 0112 1946     		mov	r1, r3
 179 0114 FFF7FEFF 		bl	ADC_Init
  62:../src/adc.cpp **** 	ADC_RegularChannelConfig(ADC1, CUR_CHANNEL, CUR_RANK, ADC_SampleTime_28Cycles5);
 180              		.loc 1 62 0
 181 0118 4FF41050 		mov	r0, #9216
 182 011c C4F20100 		movt	r0, 16385
 183 0120 4FF00001 		mov	r1, #0
 184 0124 4FF00102 		mov	r2, #1
 185 0128 4FF00303 		mov	r3, #3
 186 012c FFF7FEFF 		bl	ADC_RegularChannelConfig
  63:../src/adc.cpp **** 	ADC_RegularChannelConfig(ADC1, EMF_POS_CHANNEL, EMF_POS_RANK, ADC_SampleTime_28Cycles5);
 187              		.loc 1 63 0
 188 0130 4FF41050 		mov	r0, #9216
 189 0134 C4F20100 		movt	r0, 16385
 190 0138 4FF00101 		mov	r1, #1
 191 013c 4FF00202 		mov	r2, #2
 192 0140 4FF00303 		mov	r3, #3
 193 0144 FFF7FEFF 		bl	ADC_RegularChannelConfig
  64:../src/adc.cpp **** 	ADC_RegularChannelConfig(ADC1, EMF_NEG_CHANNEL, EMF_NEG_RANK, ADC_SampleTime_28Cycles5);
 194              		.loc 1 64 0
 195 0148 4FF41050 		mov	r0, #9216
 196 014c C4F20100 		movt	r0, 16385
 197 0150 4FF00201 		mov	r1, #2
 198 0154 4FF00302 		mov	r2, #3
 199 0158 4FF00303 		mov	r3, #3
 200 015c FFF7FEFF 		bl	ADC_RegularChannelConfig
  65:../src/adc.cpp **** 	ADC_RegularChannelConfig(ADC1, MOT_V_CHANNEL, MOT_V_RANK, ADC_SampleTime_28Cycles5);
 201              		.loc 1 65 0
 202 0160 4FF41050 		mov	r0, #9216
 203 0164 C4F20100 		movt	r0, 16385
 204 0168 4FF00301 		mov	r1, #3
 205 016c 4FF00402 		mov	r2, #4
 206 0170 4FF00303 		mov	r3, #3
 207 0174 FFF7FEFF 		bl	ADC_RegularChannelConfig
  66:../src/adc.cpp **** 	ADC_DMACmd(ADC1, ENABLE);
 208              		.loc 1 66 0
 209 0178 4FF41050 		mov	r0, #9216
 210 017c C4F20100 		movt	r0, 16385
 211 0180 4FF00101 		mov	r1, #1
 212 0184 FFF7FEFF 		bl	ADC_DMACmd
  67:../src/adc.cpp **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 213              		.loc 1 67 0
 214 0188 4FF41050 		mov	r0, #9216
 215 018c C4F20100 		movt	r0, 16385
 216 0190 4FF40871 		mov	r1, #544
 217 0194 4FF00102 		mov	r2, #1
 218 0198 FFF7FEFF 		bl	ADC_ITConfig
  68:../src/adc.cpp **** 
  69:../src/adc.cpp **** 	ADC_Cmd(ADC1, ENABLE);
 219              		.loc 1 69 0
 220 019c 4FF41050 		mov	r0, #9216
 221 01a0 C4F20100 		movt	r0, 16385
 222 01a4 4FF00101 		mov	r1, #1
 223 01a8 FFF7FEFF 		bl	ADC_Cmd
  70:../src/adc.cpp **** 
  71:../src/adc.cpp **** 	ADC_ResetCalibration(ADC1);
 224              		.loc 1 71 0
 225 01ac 4FF41050 		mov	r0, #9216
 226 01b0 C4F20100 		movt	r0, 16385
 227 01b4 FFF7FEFF 		bl	ADC_ResetCalibration
  72:../src/adc.cpp **** 	while(ADC_GetResetCalibrationStatus(ADC1));
 228              		.loc 1 72 0
 229 01b8 00BF     		nop
 230              	.L2:
 231              		.loc 1 72 0 is_stmt 0 discriminator 1
 232 01ba 4FF41050 		mov	r0, #9216
 233 01be C4F20100 		movt	r0, 16385
 234 01c2 FFF7FEFF 		bl	ADC_GetResetCalibrationStatus
 235 01c6 0346     		mov	r3, r0
 236 01c8 002B     		cmp	r3, #0
 237 01ca 0CBF     		ite	eq
 238 01cc 0023     		moveq	r3, #0
 239 01ce 0123     		movne	r3, #1
 240 01d0 DBB2     		uxtb	r3, r3
 241 01d2 002B     		cmp	r3, #0
 242 01d4 F1D1     		bne	.L2
  73:../src/adc.cpp **** 	ADC_StartCalibration(ADC1);
 243              		.loc 1 73 0 is_stmt 1
 244 01d6 4FF41050 		mov	r0, #9216
 245 01da C4F20100 		movt	r0, 16385
 246 01de FFF7FEFF 		bl	ADC_StartCalibration
  74:../src/adc.cpp **** 	while(ADC_GetCalibrationStatus(ADC1));
 247              		.loc 1 74 0
 248 01e2 00BF     		nop
 249              	.L3:
 250              		.loc 1 74 0 is_stmt 0 discriminator 1
 251 01e4 4FF41050 		mov	r0, #9216
 252 01e8 C4F20100 		movt	r0, 16385
 253 01ec FFF7FEFF 		bl	ADC_GetCalibrationStatus
 254 01f0 0346     		mov	r3, r0
 255 01f2 002B     		cmp	r3, #0
 256 01f4 0CBF     		ite	eq
 257 01f6 0023     		moveq	r3, #0
 258 01f8 0123     		movne	r3, #1
 259 01fa DBB2     		uxtb	r3, r3
 260 01fc 002B     		cmp	r3, #0
 261 01fe F1D1     		bne	.L3
 262              	.LBE2:
  75:../src/adc.cpp **** }
 263              		.loc 1 75 0 is_stmt 1
 264 0200 07F14807 		add	r7, r7, #72
 265 0204 BD46     		mov	sp, r7
 266 0206 80BD     		pop	{r7, pc}
 267              		.cfi_endproc
 268              	.LFE29:
 270              		.section	.text._Z10adcCurMeasv,"ax",%progbits
 271              		.align	2
 272              		.global	_Z10adcCurMeasv
 273              		.thumb
 274              		.thumb_func
 276              	_Z10adcCurMeasv:
 277              	.LFB30:
  76:../src/adc.cpp **** 
  77:../src/adc.cpp **** float adcCurMeas(){
 278              		.loc 1 77 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283 0000 80B4     		push	{r7}
 284              	.LCFI3:
 285              		.cfi_def_cfa_offset 4
 286              		.cfi_offset 7, -4
 287 0002 00AF     		add	r7, sp, #0
 288              	.LCFI4:
 289              		.cfi_def_cfa_register 7
  78:../src/adc.cpp **** 	return curMean;
 290              		.loc 1 78 0
 291 0004 40F20003 		movw	r3, #:lower16:curMean
 292 0008 C0F20003 		movt	r3, #:upper16:curMean
 293 000c 1B68     		ldr	r3, [r3, #0]	@ float
  79:../src/adc.cpp **** }
 294              		.loc 1 79 0
 295 000e 1846     		mov	r0, r3
 296 0010 BD46     		mov	sp, r7
 297 0012 80BC     		pop	{r7}
 298 0014 7047     		bx	lr
 299              		.cfi_endproc
 300              	.LFE30:
 302 0016 00BF     		.section	.text._Z10adcEmfMeasv,"ax",%progbits
 303              		.align	2
 304              		.global	_Z10adcEmfMeasv
 305              		.thumb
 306              		.thumb_func
 308              	_Z10adcEmfMeasv:
 309              	.LFB31:
  80:../src/adc.cpp **** 
  81:../src/adc.cpp **** float adcEmfMeas(){
 310              		.loc 1 81 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 1, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 315 0000 80B4     		push	{r7}
 316              	.LCFI5:
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 7, -4
 319 0002 00AF     		add	r7, sp, #0
 320              	.LCFI6:
 321              		.cfi_def_cfa_register 7
  82:../src/adc.cpp **** 	return emfMean;
 322              		.loc 1 82 0
 323 0004 40F20003 		movw	r3, #:lower16:emfMean
 324 0008 C0F20003 		movt	r3, #:upper16:emfMean
 325 000c 1B68     		ldr	r3, [r3, #0]	@ float
  83:../src/adc.cpp **** }
 326              		.loc 1 83 0
 327 000e 1846     		mov	r0, r3
 328 0010 BD46     		mov	sp, r7
 329 0012 80BC     		pop	{r7}
 330 0014 7047     		bx	lr
 331              		.cfi_endproc
 332              	.LFE31:
 334 0016 00BF     		.section	.text._Z16adcMotSupplyMeasv,"ax",%progbits
 335              		.align	2
 336              		.global	_Z16adcMotSupplyMeasv
 337              		.thumb
 338              		.thumb_func
 340              	_Z16adcMotSupplyMeasv:
 341              	.LFB32:
  84:../src/adc.cpp **** 
  85:../src/adc.cpp **** float adcMotSupplyMeas(){
 342              		.loc 1 85 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347 0000 80B4     		push	{r7}
 348              	.LCFI7:
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 0002 00AF     		add	r7, sp, #0
 352              	.LCFI8:
 353              		.cfi_def_cfa_register 7
  86:../src/adc.cpp **** 	return motVMean;
 354              		.loc 1 86 0
 355 0004 40F20003 		movw	r3, #:lower16:motVMean
 356 0008 C0F20003 		movt	r3, #:upper16:motVMean
 357 000c 1B68     		ldr	r3, [r3, #0]	@ float
  87:../src/adc.cpp **** }
 358              		.loc 1 87 0
 359 000e 1846     		mov	r0, r3
 360 0010 BD46     		mov	sp, r7
 361 0012 80BC     		pop	{r7}
 362 0014 7047     		bx	lr
 363              		.cfi_endproc
 364              	.LFE32:
 366              		.global	__aeabi_i2f
 367              		.global	__aeabi_fmul
 368              		.global	__aeabi_fdiv
 369              		.global	__aeabi_fsub
 370 0016 00BF     		.section	.text.ADC1_2_IRQHandler,"ax",%progbits
 371              		.align	2
 372              		.global	ADC1_2_IRQHandler
 373              		.thumb
 374              		.thumb_func
 376              	ADC1_2_IRQHandler:
 377              	.LFB33:
  88:../src/adc.cpp **** 
  89:../src/adc.cpp **** extern "C" {
  90:../src/adc.cpp **** 
  91:../src/adc.cpp **** void ADC1_2_IRQHandler(void){
 378              		.loc 1 91 0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 24
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382 0000 90B5     		push	{r4, r7, lr}
 383              	.LCFI9:
 384              		.cfi_def_cfa_offset 12
 385              		.cfi_offset 14, -4
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 4, -12
 388 0002 87B0     		sub	sp, sp, #28
 389              	.LCFI10:
 390              		.cfi_def_cfa_offset 40
 391 0004 00AF     		add	r7, sp, #0
 392              	.LCFI11:
 393              		.cfi_def_cfa_register 7
 394              	.LBB3:
  92:../src/adc.cpp **** 	int32_t tmpCur = 0;
 395              		.loc 1 92 0
 396 0006 4FF00003 		mov	r3, #0
 397 000a 7B61     		str	r3, [r7, #20]
  93:../src/adc.cpp **** 	int32_t tmpEmfPos = 0;
 398              		.loc 1 93 0
 399 000c 4FF00003 		mov	r3, #0
 400 0010 3B61     		str	r3, [r7, #16]
  94:../src/adc.cpp **** 	int32_t tmpEmfNeg = 0;
 401              		.loc 1 94 0
 402 0012 4FF00003 		mov	r3, #0
 403 0016 FB60     		str	r3, [r7, #12]
  95:../src/adc.cpp **** 	int32_t tmpMotV = 0;
 404              		.loc 1 95 0
 405 0018 4FF00003 		mov	r3, #0
 406 001c BB60     		str	r3, [r7, #8]
 407              	.LBB4:
  96:../src/adc.cpp **** 	for(int i = 0; i < ADC_NSAMP_MEAN; i++){
 408              		.loc 1 96 0
 409 001e 4FF00003 		mov	r3, #0
 410 0022 7B60     		str	r3, [r7, #4]
 411 0024 3BE0     		b	.L8
 412              	.L9:
  97:../src/adc.cpp **** 		tmpCur += adcBuffer[i*4 + CUR_RANK - 1];
 413              		.loc 1 97 0 discriminator 2
 414 0026 7B68     		ldr	r3, [r7, #4]
 415 0028 4FEA8302 		lsl	r2, r3, #2
 416 002c 40F20003 		movw	r3, #:lower16:adcBuffer
 417 0030 C0F20003 		movt	r3, #:upper16:adcBuffer
 418 0034 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 419 0038 7A69     		ldr	r2, [r7, #20]
 420 003a D318     		adds	r3, r2, r3
 421 003c 7B61     		str	r3, [r7, #20]
  98:../src/adc.cpp **** 		tmpEmfPos += adcBuffer[i*4 + EMF_POS_RANK - 1];
 422              		.loc 1 98 0 discriminator 2
 423 003e 7B68     		ldr	r3, [r7, #4]
 424 0040 4FEA8303 		lsl	r3, r3, #2
 425 0044 03F10102 		add	r2, r3, #1
 426 0048 40F20003 		movw	r3, #:lower16:adcBuffer
 427 004c C0F20003 		movt	r3, #:upper16:adcBuffer
 428 0050 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 429 0054 3A69     		ldr	r2, [r7, #16]
 430 0056 D318     		adds	r3, r2, r3
 431 0058 3B61     		str	r3, [r7, #16]
  99:../src/adc.cpp **** 		tmpEmfNeg += adcBuffer[i*4 + EMF_NEG_RANK - 1];
 432              		.loc 1 99 0 discriminator 2
 433 005a 7B68     		ldr	r3, [r7, #4]
 434 005c 4FEA8303 		lsl	r3, r3, #2
 435 0060 03F10202 		add	r2, r3, #2
 436 0064 40F20003 		movw	r3, #:lower16:adcBuffer
 437 0068 C0F20003 		movt	r3, #:upper16:adcBuffer
 438 006c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 439 0070 FA68     		ldr	r2, [r7, #12]
 440 0072 D318     		adds	r3, r2, r3
 441 0074 FB60     		str	r3, [r7, #12]
 100:../src/adc.cpp **** 		tmpMotV += adcBuffer[i*4 + MOT_V_RANK - 1];
 442              		.loc 1 100 0 discriminator 2
 443 0076 7B68     		ldr	r3, [r7, #4]
 444 0078 03F10103 		add	r3, r3, #1
 445 007c 4FEA8303 		lsl	r3, r3, #2
 446 0080 03F1FF32 		add	r2, r3, #-1
 447 0084 40F20003 		movw	r3, #:lower16:adcBuffer
 448 0088 C0F20003 		movt	r3, #:upper16:adcBuffer
 449 008c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 450 0090 BA68     		ldr	r2, [r7, #8]
 451 0092 D318     		adds	r3, r2, r3
 452 0094 BB60     		str	r3, [r7, #8]
  96:../src/adc.cpp **** 	for(int i = 0; i < ADC_NSAMP_MEAN; i++){
 453              		.loc 1 96 0 discriminator 2
 454 0096 7B68     		ldr	r3, [r7, #4]
 455 0098 03F10103 		add	r3, r3, #1
 456 009c 7B60     		str	r3, [r7, #4]
 457              	.L8:
  96:../src/adc.cpp **** 	for(int i = 0; i < ADC_NSAMP_MEAN; i++){
 458              		.loc 1 96 0 is_stmt 0 discriminator 1
 459 009e 7B68     		ldr	r3, [r7, #4]
 460 00a0 632B     		cmp	r3, #99
 461 00a2 CCBF     		ite	gt
 462 00a4 0023     		movgt	r3, #0
 463 00a6 0123     		movle	r3, #1
 464 00a8 DBB2     		uxtb	r3, r3
 465 00aa 002B     		cmp	r3, #0
 466 00ac BBD1     		bne	.L9
 467              	.LBE4:
 101:../src/adc.cpp **** 	}
 102:../src/adc.cpp **** 	curMean = (float)tmpCur * CUR_MUL / ADC_NSAMP_MEAN;
 468              		.loc 1 102 0 is_stmt 1
 469 00ae 7869     		ldr	r0, [r7, #20]
 470 00b0 FFF7FEFF 		bl	__aeabi_i2f
 471 00b4 0346     		mov	r3, r0
 472 00b6 1846     		mov	r0, r3
 473 00b8 2349     		ldr	r1, .L10	@ float
 474 00ba FFF7FEFF 		bl	__aeabi_fmul
 475 00be 0346     		mov	r3, r0
 476 00c0 1846     		mov	r0, r3
 477 00c2 2249     		ldr	r1, .L10+4	@ float
 478 00c4 FFF7FEFF 		bl	__aeabi_fdiv
 479 00c8 0346     		mov	r3, r0
 480 00ca 1A46     		mov	r2, r3
 481 00cc 40F20003 		movw	r3, #:lower16:curMean
 482 00d0 C0F20003 		movt	r3, #:upper16:curMean
 483 00d4 1A60     		str	r2, [r3, #0]	@ float
 103:../src/adc.cpp **** 	emfMean = ((float)tmpEmfPos - (float)tmpEmfNeg) * EMF_MUL / ADC_NSAMP_MEAN;
 484              		.loc 1 103 0
 485 00d6 3869     		ldr	r0, [r7, #16]
 486 00d8 FFF7FEFF 		bl	__aeabi_i2f
 487 00dc 0446     		mov	r4, r0
 488 00de F868     		ldr	r0, [r7, #12]
 489 00e0 FFF7FEFF 		bl	__aeabi_i2f
 490 00e4 0346     		mov	r3, r0
 491 00e6 2046     		mov	r0, r4
 492 00e8 1946     		mov	r1, r3
 493 00ea FFF7FEFF 		bl	__aeabi_fsub
 494 00ee 0346     		mov	r3, r0
 495 00f0 1846     		mov	r0, r3
 496 00f2 1649     		ldr	r1, .L10+4	@ float
 497 00f4 FFF7FEFF 		bl	__aeabi_fdiv
 498 00f8 0346     		mov	r3, r0
 499 00fa 1A46     		mov	r2, r3
 500 00fc 40F20003 		movw	r3, #:lower16:emfMean
 501 0100 C0F20003 		movt	r3, #:upper16:emfMean
 502 0104 1A60     		str	r2, [r3, #0]	@ float
 104:../src/adc.cpp **** 	motVMean = (float)tmpMotV * MOT_V_MUL / ADC_NSAMP_MEAN;
 503              		.loc 1 104 0
 504 0106 B868     		ldr	r0, [r7, #8]
 505 0108 FFF7FEFF 		bl	__aeabi_i2f
 506 010c 0346     		mov	r3, r0
 507 010e 1846     		mov	r0, r3
 508 0110 0F49     		ldr	r1, .L10+8	@ float
 509 0112 FFF7FEFF 		bl	__aeabi_fmul
 510 0116 0346     		mov	r3, r0
 511 0118 1846     		mov	r0, r3
 512 011a 0C49     		ldr	r1, .L10+4	@ float
 513 011c FFF7FEFF 		bl	__aeabi_fdiv
 514 0120 0346     		mov	r3, r0
 515 0122 1A46     		mov	r2, r3
 516 0124 40F20003 		movw	r3, #:lower16:motVMean
 517 0128 C0F20003 		movt	r3, #:upper16:motVMean
 518 012c 1A60     		str	r2, [r3, #0]	@ float
 105:../src/adc.cpp **** 
 106:../src/adc.cpp **** 	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 519              		.loc 1 106 0
 520 012e 4FF41050 		mov	r0, #9216
 521 0132 C4F20100 		movt	r0, 16385
 522 0136 4FF40871 		mov	r1, #544
 523 013a FFF7FEFF 		bl	ADC_ClearITPendingBit
 524              	.LBE3:
 107:../src/adc.cpp **** }
 525              		.loc 1 107 0
 526 013e 07F11C07 		add	r7, r7, #28
 527 0142 BD46     		mov	sp, r7
 528 0144 90BD     		pop	{r4, r7, pc}
 529              	.L11:
 530 0146 00BF     		.align	2
 531              	.L10:
 532 0148 41C9AE3A 		.word	984533313
 533 014c 0000C842 		.word	1120403456
 534 0150 0AB61B3C 		.word	1008449034
 535              		.cfi_endproc
 536              	.LFE33:
 538              		.text
 539              	.Letext0:
 540              		.file 2 "/home/jachu/elektronika/STM32/gcc-arm-none-eabi-4_6-2012q4/bin/../lib/gcc/arm-none-eabi/4
 541              		.file 3 "/home/jachu/workspaceSTM/Sumo_STM/src/stm32f10x.h"
 542              		.file 4 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 543              		.file 5 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 544              		.file 6 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 545              		.file 7 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 546              		.file 8 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupp
DEFINED SYMBOLS
                            *ABS*:00000000 adc.cpp
     /tmp/ccjdfyND.s:23     .bss.adcBuffer:00000000 adcBuffer
     /tmp/ccjdfyND.s:20     .bss.adcBuffer:00000000 $d
     /tmp/ccjdfyND.s:30     .bss.curMean:00000000 curMean
     /tmp/ccjdfyND.s:27     .bss.curMean:00000000 $d
     /tmp/ccjdfyND.s:37     .bss.emfMean:00000000 emfMean
     /tmp/ccjdfyND.s:34     .bss.emfMean:00000000 $d
     /tmp/ccjdfyND.s:44     .bss.motVMean:00000000 motVMean
     /tmp/ccjdfyND.s:41     .bss.motVMean:00000000 $d
     /tmp/ccjdfyND.s:47     .text._Z7adcInitv:00000000 $t
     /tmp/ccjdfyND.s:52     .text._Z7adcInitv:00000000 _Z7adcInitv
     /tmp/ccjdfyND.s:271    .text._Z10adcCurMeasv:00000000 $t
     /tmp/ccjdfyND.s:276    .text._Z10adcCurMeasv:00000000 _Z10adcCurMeasv
     /tmp/ccjdfyND.s:303    .text._Z10adcEmfMeasv:00000000 $t
     /tmp/ccjdfyND.s:308    .text._Z10adcEmfMeasv:00000000 _Z10adcEmfMeasv
     /tmp/ccjdfyND.s:335    .text._Z16adcMotSupplyMeasv:00000000 $t
     /tmp/ccjdfyND.s:340    .text._Z16adcMotSupplyMeasv:00000000 _Z16adcMotSupplyMeasv
     /tmp/ccjdfyND.s:371    .text.ADC1_2_IRQHandler:00000000 $t
     /tmp/ccjdfyND.s:376    .text.ADC1_2_IRQHandler:00000000 ADC1_2_IRQHandler
     /tmp/ccjdfyND.s:532    .text.ADC1_2_IRQHandler:00000148 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_ADCCLKConfig
RCC_AHBPeriphClockCmd
RCC_APB2PeriphClockCmd
GPIO_Init
NVIC_Init
DMA_Init
DMA_Cmd
ADC_Init
ADC_RegularChannelConfig
ADC_DMACmd
ADC_ITConfig
ADC_Cmd
ADC_ResetCalibration
ADC_GetResetCalibrationStatus
ADC_StartCalibration
ADC_GetCalibrationStatus
__aeabi_i2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_fsub
ADC_ClearITPendingBit
