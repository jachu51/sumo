   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"motor.cpp"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	cte_int
  19              		.section	.bss.cte_int,"aw",%nobits
  20              		.align	2
  23              	cte_int:
  24 0000 00000000 		.space	8
  24      00000000 
  25              		.global	cte_prev
  26              		.section	.bss.cte_prev,"aw",%nobits
  27              		.align	2
  30              	cte_prev:
  31 0000 00000000 		.space	8
  31      00000000 
  32              		.global	motorKp
  33              		.section	.bss.motorKp,"aw",%nobits
  34              		.align	2
  37              	motorKp:
  38 0000 00000000 		.space	4
  39              		.global	motorKi
  40              		.section	.bss.motorKi,"aw",%nobits
  41              		.align	2
  44              	motorKi:
  45 0000 00000000 		.space	4
  46              		.global	motorKd
  47              		.section	.bss.motorKd,"aw",%nobits
  48              		.align	2
  51              	motorKd:
  52 0000 00000000 		.space	4
  53              		.global	cpr
  54              		.section	.data.cpr,"aw",%progbits
  55              		.align	1
  58              	cpr:
  59 0000 0100     		.short	1
  60              		.global	motor_width
  61              		.section	.bss.motor_width,"aw",%nobits
  62              		.align	2
  65              	motor_width:
  66 0000 00000000 		.space	8
  66      00000000 
  67              		.global	prev_enc
  68              		.section	.bss.prev_enc,"aw",%nobits
  69              		.align	2
  72              	prev_enc:
  73 0000 00000000 		.space	4
  74              		.global	cur_speed
  75              		.section	.bss.cur_speed,"aw",%nobits
  76              		.align	2
  79              	cur_speed:
  80 0000 00000000 		.space	8
  80      00000000 
  81              		.global	cur_pos
  82              		.section	.bss.cur_pos,"aw",%nobits
  83              		.align	2
  86              	cur_pos:
  87 0000 00000000 		.space	8
  87      00000000 
  88              		.global	set_speed
  89              		.section	.bss.set_speed,"aw",%nobits
  90              		.align	2
  93              	set_speed:
  94 0000 00000000 		.space	8
  94      00000000 
  95              		.global	set_pos
  96              		.section	.bss.set_pos,"aw",%nobits
  97              		.align	2
 100              	set_pos:
 101 0000 00000000 		.space	8
 101      00000000 
 102              		.global	motorUpdate
 103              		.section	.bss.motorUpdate,"aw",%nobits
 104              		.align	2
 107              	motorUpdate:
 108 0000 0000     		.space	2
 109              		.global	motorEnable
 110 0002 0000     		.section	.bss.motorEnable,"aw",%nobits
 111              		.align	2
 114              	motorEnable:
 115 0000 0000     		.space	2
 116 0002 0000     		.section	.text._Z9motorInitfffm,"ax",%progbits
 117              		.align	2
 118              		.global	_Z9motorInitfffm
 119              		.thumb
 120              		.thumb_func
 122              	_Z9motorInitfffm:
 123              	.LFB31:
 124              		.file 1 "../src/motor.cpp"
   1:../src/motor.cpp **** /*
   2:../src/motor.cpp ****  * motor.c
   3:../src/motor.cpp ****  *
   4:../src/motor.cpp ****  *  Created on: 26-12-2012
   5:../src/motor.cpp ****  *      Author: jachu
   6:../src/motor.cpp ****  */
   7:../src/motor.cpp **** 
   8:../src/motor.cpp **** #include "motor.h"
   9:../src/motor.cpp **** #include "sys.h"
  10:../src/motor.cpp **** #include <stm32f10x_rcc.h>
  11:../src/motor.cpp **** #include <stm32f10x_tim.h>
  12:../src/motor.cpp **** #include <stm32f10x_gpio.h>
  13:../src/motor.cpp **** 
  14:../src/motor.cpp **** #define MAX_WIDTH 1440
  15:../src/motor.cpp **** 
  16:../src/motor.cpp **** volatile int32_t cte_int[2], cte_prev[2];
  17:../src/motor.cpp **** volatile float motorKp, motorKi, motorKd;
  18:../src/motor.cpp **** uint16_t cpr = 1;
  19:../src/motor.cpp **** volatile int32_t motor_width[2];
  20:../src/motor.cpp **** volatile uint16_t prev_enc[2];
  21:../src/motor.cpp **** volatile int32_t cur_speed[2];
  22:../src/motor.cpp **** volatile float cur_pos[2];
  23:../src/motor.cpp **** volatile int32_t set_speed[2];
  24:../src/motor.cpp **** volatile float set_pos[2];
  25:../src/motor.cpp **** volatile bool motorUpdate[2];
  26:../src/motor.cpp **** volatile bool motorEnable[2];
  27:../src/motor.cpp **** 
  28:../src/motor.cpp **** void motorInit(float imotorKp, float imotorKi, float imotorKd, uint32_t icpr){
 125              		.loc 1 28 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 72
 128              		@ frame_needed = 1, uses_anonymous_args = 0
 129 0000 80B5     		push	{r7, lr}
 130              	.LCFI0:
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 14, -4
 133              		.cfi_offset 7, -8
 134 0002 92B0     		sub	sp, sp, #72
 135              	.LCFI1:
 136              		.cfi_def_cfa_offset 80
 137 0004 00AF     		add	r7, sp, #0
 138              	.LCFI2:
 139              		.cfi_def_cfa_register 7
 140 0006 F860     		str	r0, [r7, #12]	@ float
 141 0008 B960     		str	r1, [r7, #8]	@ float
 142 000a 7A60     		str	r2, [r7, #4]	@ float
 143 000c 3B60     		str	r3, [r7, #0]
 144              	.LBB2:
  29:../src/motor.cpp **** 	motorKp = imotorKp; motorKd = imotorKd; motorKi = imotorKi; cpr = icpr;
 145              		.loc 1 29 0
 146 000e 40F20003 		movw	r3, #:lower16:motorKp
 147 0012 C0F20003 		movt	r3, #:upper16:motorKp
 148 0016 FA68     		ldr	r2, [r7, #12]	@ float
 149 0018 1A60     		str	r2, [r3, #0]	@ float
 150 001a 40F20003 		movw	r3, #:lower16:motorKd
 151 001e C0F20003 		movt	r3, #:upper16:motorKd
 152 0022 7A68     		ldr	r2, [r7, #4]	@ float
 153 0024 1A60     		str	r2, [r3, #0]	@ float
 154 0026 40F20003 		movw	r3, #:lower16:motorKi
 155 002a C0F20003 		movt	r3, #:upper16:motorKi
 156 002e BA68     		ldr	r2, [r7, #8]	@ float
 157 0030 1A60     		str	r2, [r3, #0]	@ float
 158 0032 3B68     		ldr	r3, [r7, #0]
 159 0034 9AB2     		uxth	r2, r3
 160 0036 40F20003 		movw	r3, #:lower16:cpr
 161 003a C0F20003 		movt	r3, #:upper16:cpr
 162 003e 1A80     		strh	r2, [r3, #0]	@ movhi
 163              	.LBB3:
  30:../src/motor.cpp **** 	for(int i = 0; i < 2; i++){
 164              		.loc 1 30 0
 165 0040 4FF00003 		mov	r3, #0
 166 0044 7B64     		str	r3, [r7, #68]
 167 0046 5CE0     		b	.L2
 168              	.L3:
  31:../src/motor.cpp **** 		cte_int[i] = 0; cte_prev[i] = 0;
 169              		.loc 1 31 0 discriminator 2
 170 0048 40F20003 		movw	r3, #:lower16:cte_int
 171 004c C0F20003 		movt	r3, #:upper16:cte_int
 172 0050 7A6C     		ldr	r2, [r7, #68]
 173 0052 4FF00001 		mov	r1, #0
 174 0056 43F82210 		str	r1, [r3, r2, lsl #2]
 175 005a 40F20003 		movw	r3, #:lower16:cte_prev
 176 005e C0F20003 		movt	r3, #:upper16:cte_prev
 177 0062 7A6C     		ldr	r2, [r7, #68]
 178 0064 4FF00001 		mov	r1, #0
 179 0068 43F82210 		str	r1, [r3, r2, lsl #2]
  32:../src/motor.cpp **** 		prev_enc[i] = 0;
 180              		.loc 1 32 0 discriminator 2
 181 006c 40F20003 		movw	r3, #:lower16:prev_enc
 182 0070 C0F20003 		movt	r3, #:upper16:prev_enc
 183 0074 7A6C     		ldr	r2, [r7, #68]
 184 0076 4FF00001 		mov	r1, #0
 185 007a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  33:../src/motor.cpp **** 		cur_speed[i] = 0;
 186              		.loc 1 33 0 discriminator 2
 187 007e 40F20003 		movw	r3, #:lower16:cur_speed
 188 0082 C0F20003 		movt	r3, #:upper16:cur_speed
 189 0086 7A6C     		ldr	r2, [r7, #68]
 190 0088 4FF00001 		mov	r1, #0
 191 008c 43F82210 		str	r1, [r3, r2, lsl #2]
  34:../src/motor.cpp **** 		cur_pos[i] = 0;
 192              		.loc 1 34 0 discriminator 2
 193 0090 40F20003 		movw	r3, #:lower16:cur_pos
 194 0094 C0F20003 		movt	r3, #:upper16:cur_pos
 195 0098 7A6C     		ldr	r2, [r7, #68]
 196 009a DFF80C14 		ldr	r1, .L4	@ float
 197 009e 43F82210 		str	r1, [r3, r2, lsl #2]	@ float
  35:../src/motor.cpp **** 		motor_width[i] = 0;
 198              		.loc 1 35 0 discriminator 2
 199 00a2 40F20003 		movw	r3, #:lower16:motor_width
 200 00a6 C0F20003 		movt	r3, #:upper16:motor_width
 201 00aa 7A6C     		ldr	r2, [r7, #68]
 202 00ac 4FF00001 		mov	r1, #0
 203 00b0 43F82210 		str	r1, [r3, r2, lsl #2]
  36:../src/motor.cpp **** 		motorEnable[i] = false;
 204              		.loc 1 36 0 discriminator 2
 205 00b4 40F20003 		movw	r3, #:lower16:motorEnable
 206 00b8 C0F20003 		movt	r3, #:upper16:motorEnable
 207 00bc 7A6C     		ldr	r2, [r7, #68]
 208 00be 9B18     		adds	r3, r3, r2
 209 00c0 4FF00002 		mov	r2, #0
 210 00c4 1A70     		strb	r2, [r3, #0]
  37:../src/motor.cpp **** 		motorUpdate[i] = true;
 211              		.loc 1 37 0 discriminator 2
 212 00c6 40F20003 		movw	r3, #:lower16:motorUpdate
 213 00ca C0F20003 		movt	r3, #:upper16:motorUpdate
 214 00ce 7A6C     		ldr	r2, [r7, #68]
 215 00d0 9B18     		adds	r3, r3, r2
 216 00d2 4FF00102 		mov	r2, #1
 217 00d6 1A70     		strb	r2, [r3, #0]
  38:../src/motor.cpp **** 		set_speed[i] = 0;
 218              		.loc 1 38 0 discriminator 2
 219 00d8 40F20003 		movw	r3, #:lower16:set_speed
 220 00dc C0F20003 		movt	r3, #:upper16:set_speed
 221 00e0 7A6C     		ldr	r2, [r7, #68]
 222 00e2 4FF00001 		mov	r1, #0
 223 00e6 43F82210 		str	r1, [r3, r2, lsl #2]
  39:../src/motor.cpp **** 		set_pos[i] = 0;
 224              		.loc 1 39 0 discriminator 2
 225 00ea 40F20003 		movw	r3, #:lower16:set_pos
 226 00ee C0F20003 		movt	r3, #:upper16:set_pos
 227 00f2 7A6C     		ldr	r2, [r7, #68]
 228 00f4 EC49     		ldr	r1, .L4	@ float
 229 00f6 43F82210 		str	r1, [r3, r2, lsl #2]	@ float
  30:../src/motor.cpp **** 	for(int i = 0; i < 2; i++){
 230              		.loc 1 30 0 discriminator 2
 231 00fa 7B6C     		ldr	r3, [r7, #68]
 232 00fc 03F10103 		add	r3, r3, #1
 233 0100 7B64     		str	r3, [r7, #68]
 234              	.L2:
  30:../src/motor.cpp **** 	for(int i = 0; i < 2; i++){
 235              		.loc 1 30 0 is_stmt 0 discriminator 1
 236 0102 7B6C     		ldr	r3, [r7, #68]
 237 0104 012B     		cmp	r3, #1
 238 0106 CCBF     		ite	gt
 239 0108 0023     		movgt	r3, #0
 240 010a 0123     		movle	r3, #1
 241 010c DBB2     		uxtb	r3, r3
 242 010e 002B     		cmp	r3, #0
 243 0110 9AD1     		bne	.L3
 244              	.LBE3:
  40:../src/motor.cpp **** 	}
  41:../src/motor.cpp **** 
  42:../src/motor.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 245              		.loc 1 42 0 is_stmt 1
 246 0112 4FF00400 		mov	r0, #4
 247 0116 4FF00101 		mov	r1, #1
 248 011a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  43:../src/motor.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 249              		.loc 1 43 0
 250 011e 4FF00800 		mov	r0, #8
 251 0122 4FF00101 		mov	r1, #1
 252 0126 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  44:../src/motor.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 253              		.loc 1 44 0
 254 012a 4FF01000 		mov	r0, #16
 255 012e 4FF00101 		mov	r1, #1
 256 0132 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  45:../src/motor.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 257              		.loc 1 45 0
 258 0136 4FF00100 		mov	r0, #1
 259 013a 4FF00101 		mov	r1, #1
 260 013e FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  46:../src/motor.cpp **** 
  47:../src/motor.cpp **** 	GPIO_InitTypeDef gpioInit;
  48:../src/motor.cpp **** 	gpioInit.GPIO_Mode = GPIO_Mode_AF_PP;
 261              		.loc 1 48 0
 262 0142 4FF01803 		mov	r3, #24
 263 0146 87F84330 		strb	r3, [r7, #67]
  49:../src/motor.cpp **** 	gpioInit.GPIO_Speed = GPIO_Speed_50MHz;
 264              		.loc 1 49 0
 265 014a 4FF00303 		mov	r3, #3
 266 014e 87F84230 		strb	r3, [r7, #66]
  50:../src/motor.cpp **** 	gpioInit.GPIO_Pin = OUT_FWD_1 | OUT_FWD_2;
 267              		.loc 1 50 0
 268 0152 4FF41063 		mov	r3, #2304
 269 0156 A7F84030 		strh	r3, [r7, #64]	@ movhi
  51:../src/motor.cpp **** 	GPIO_Init(OUT_PORT_FWD, &gpioInit);
 270              		.loc 1 51 0
 271 015a 07F14003 		add	r3, r7, #64
 272 015e 4FF40060 		mov	r0, #2048
 273 0162 C4F20100 		movt	r0, 16385
 274 0166 1946     		mov	r1, r3
 275 0168 FFF7FEFF 		bl	GPIO_Init
  52:../src/motor.cpp **** 
  53:../src/motor.cpp **** 	gpioInit.GPIO_Pin = OUT_BCKWD_1 | OUT_BCKWD_2;
 276              		.loc 1 53 0
 277 016c 4FF44043 		mov	r3, #49152
 278 0170 A7F84030 		strh	r3, [r7, #64]	@ movhi
  54:../src/motor.cpp **** 	GPIO_Init(OUT_PORT_BCKWD, &gpioInit);
 279              		.loc 1 54 0
 280 0174 07F14003 		add	r3, r7, #64
 281 0178 4FF44060 		mov	r0, #3072
 282 017c C4F20100 		movt	r0, 16385
 283 0180 1946     		mov	r1, r3
 284 0182 FFF7FEFF 		bl	GPIO_Init
  55:../src/motor.cpp **** 
  56:../src/motor.cpp **** 	gpioInit.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 285              		.loc 1 56 0
 286 0186 4FF00403 		mov	r3, #4
 287 018a 87F84330 		strb	r3, [r7, #67]
  57:../src/motor.cpp **** 	gpioInit.GPIO_Pin = IN_A_1 | IN_B_1;
 288              		.loc 1 57 0
 289 018e 4FF0C003 		mov	r3, #192
 290 0192 A7F84030 		strh	r3, [r7, #64]	@ movhi
  58:../src/motor.cpp **** 	GPIO_Init(IN_1_PORT, &gpioInit);
 291              		.loc 1 58 0
 292 0196 07F14003 		add	r3, r7, #64
 293 019a 4FF44060 		mov	r0, #3072
 294 019e C4F20100 		movt	r0, 16385
 295 01a2 1946     		mov	r1, r3
 296 01a4 FFF7FEFF 		bl	GPIO_Init
  59:../src/motor.cpp **** 
  60:../src/motor.cpp **** 	gpioInit.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 297              		.loc 1 60 0
 298 01a8 4FF00403 		mov	r3, #4
 299 01ac 87F84330 		strb	r3, [r7, #67]
  61:../src/motor.cpp **** 	gpioInit.GPIO_Pin = IN_A_2 | IN_B_2;
 300              		.loc 1 61 0
 301 01b0 4FF0C003 		mov	r3, #192
 302 01b4 A7F84030 		strh	r3, [r7, #64]	@ movhi
  62:../src/motor.cpp **** 	GPIO_Init(IN_2_PORT, &gpioInit);
 303              		.loc 1 62 0
 304 01b8 07F14003 		add	r3, r7, #64
 305 01bc 4FF48050 		mov	r0, #4096
 306 01c0 C4F20100 		movt	r0, 16385
 307 01c4 1946     		mov	r1, r3
 308 01c6 FFF7FEFF 		bl	GPIO_Init
  63:../src/motor.cpp **** 
  64:../src/motor.cpp **** 	//Encoder left
  65:../src/motor.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 309              		.loc 1 65 0
 310 01ca 4FF00400 		mov	r0, #4
 311 01ce 4FF00101 		mov	r1, #1
 312 01d2 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  66:../src/motor.cpp **** 
  67:../src/motor.cpp **** 	TIM_ICInitTypeDef icInit;
  68:../src/motor.cpp **** 	icInit.TIM_Channel = TIM_Channel_1;
 313              		.loc 1 68 0
 314 01d6 4FF00003 		mov	r3, #0
 315 01da BB86     		strh	r3, [r7, #52]	@ movhi
  69:../src/motor.cpp **** 	icInit.TIM_ICPolarity = TIM_ICPolarity_Rising;
 316              		.loc 1 69 0
 317 01dc 4FF00003 		mov	r3, #0
 318 01e0 FB86     		strh	r3, [r7, #54]	@ movhi
  70:../src/motor.cpp **** 	icInit.TIM_ICFilter = 0;
 319              		.loc 1 70 0
 320 01e2 4FF00003 		mov	r3, #0
 321 01e6 BB87     		strh	r3, [r7, #60]	@ movhi
  71:../src/motor.cpp **** 	icInit.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 322              		.loc 1 71 0
 323 01e8 4FF00003 		mov	r3, #0
 324 01ec 7B87     		strh	r3, [r7, #58]	@ movhi
  72:../src/motor.cpp **** 	icInit.TIM_ICSelection = TIM_ICSelection_DirectTI;
 325              		.loc 1 72 0
 326 01ee 4FF00103 		mov	r3, #1
 327 01f2 3B87     		strh	r3, [r7, #56]	@ movhi
  73:../src/motor.cpp **** 	TIM_ICInit(TIM4, &icInit);
 328              		.loc 1 73 0
 329 01f4 07F13403 		add	r3, r7, #52
 330 01f8 4FF40060 		mov	r0, #2048
 331 01fc C4F20000 		movt	r0, 16384
 332 0200 1946     		mov	r1, r3
 333 0202 FFF7FEFF 		bl	TIM_ICInit
  74:../src/motor.cpp **** 	icInit.TIM_Channel = TIM_Channel_2;
 334              		.loc 1 74 0
 335 0206 4FF00403 		mov	r3, #4
 336 020a BB86     		strh	r3, [r7, #52]	@ movhi
  75:../src/motor.cpp **** 	TIM_ICInit(TIM4, &icInit);
 337              		.loc 1 75 0
 338 020c 07F13403 		add	r3, r7, #52
 339 0210 4FF40060 		mov	r0, #2048
 340 0214 C4F20000 		movt	r0, 16384
 341 0218 1946     		mov	r1, r3
 342 021a FFF7FEFF 		bl	TIM_ICInit
  76:../src/motor.cpp **** 
  77:../src/motor.cpp **** 	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Risin
 343              		.loc 1 77 0
 344 021e 4FF40060 		mov	r0, #2048
 345 0222 C4F20000 		movt	r0, 16384
 346 0226 4FF00301 		mov	r1, #3
 347 022a 4FF00002 		mov	r2, #0
 348 022e 4FF00003 		mov	r3, #0
 349 0232 FFF7FEFF 		bl	TIM_EncoderInterfaceConfig
  78:../src/motor.cpp **** 	TIM_SetAutoreload(TIM4, 0xffff);
 350              		.loc 1 78 0
 351 0236 4FF40060 		mov	r0, #2048
 352 023a C4F20000 		movt	r0, 16384
 353 023e 4FF6FF71 		movw	r1, #65535
 354 0242 FFF7FEFF 		bl	TIM_SetAutoreload
  79:../src/motor.cpp **** 	TIM_SetCounter(TIM4, 0);
 355              		.loc 1 79 0
 356 0246 4FF40060 		mov	r0, #2048
 357 024a C4F20000 		movt	r0, 16384
 358 024e 4FF00001 		mov	r1, #0
 359 0252 FFF7FEFF 		bl	TIM_SetCounter
  80:../src/motor.cpp **** 	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 360              		.loc 1 80 0
 361 0256 4FF40060 		mov	r0, #2048
 362 025a C4F20000 		movt	r0, 16384
 363 025e 4FF00101 		mov	r1, #1
 364 0262 4FF00102 		mov	r2, #1
 365 0266 FFF7FEFF 		bl	TIM_ITConfig
  81:../src/motor.cpp **** 
  82:../src/motor.cpp **** 	NVIC_InitTypeDef initNVIC;
  83:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannel = TIM4_IRQn;
 366              		.loc 1 83 0
 367 026a 4FF01E03 		mov	r3, #30
 368 026e 87F83030 		strb	r3, [r7, #48]
  84:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannelPreemptionPriority = 0;
 369              		.loc 1 84 0
 370 0272 4FF00003 		mov	r3, #0
 371 0276 87F83130 		strb	r3, [r7, #49]
  85:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannelSubPriority = 0;
 372              		.loc 1 85 0
 373 027a 4FF00003 		mov	r3, #0
 374 027e 87F83230 		strb	r3, [r7, #50]
  86:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannelCmd = ENABLE;
 375              		.loc 1 86 0
 376 0282 4FF00103 		mov	r3, #1
 377 0286 87F83330 		strb	r3, [r7, #51]
  87:../src/motor.cpp **** 	NVIC_Init(&initNVIC);
 378              		.loc 1 87 0
 379 028a 07F13003 		add	r3, r7, #48
 380 028e 1846     		mov	r0, r3
 381 0290 FFF7FEFF 		bl	NVIC_Init
  88:../src/motor.cpp **** 
  89:../src/motor.cpp **** 	TIM_Cmd(TIM4, ENABLE);
 382              		.loc 1 89 0
 383 0294 4FF40060 		mov	r0, #2048
 384 0298 C4F20000 		movt	r0, 16384
 385 029c 4FF00101 		mov	r1, #1
 386 02a0 FFF7FEFF 		bl	TIM_Cmd
  90:../src/motor.cpp **** 
  91:../src/motor.cpp **** 	//Encoder right
  92:../src/motor.cpp **** 
  93:../src/motor.cpp **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 387              		.loc 1 93 0
 388 02a4 4FF00200 		mov	r0, #2
 389 02a8 4FF00101 		mov	r1, #1
 390 02ac FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
  94:../src/motor.cpp **** 
  95:../src/motor.cpp **** 	icInit.TIM_Channel = TIM_Channel_1;
 391              		.loc 1 95 0
 392 02b0 4FF00003 		mov	r3, #0
 393 02b4 BB86     		strh	r3, [r7, #52]	@ movhi
  96:../src/motor.cpp **** 	icInit.TIM_ICPolarity = TIM_ICPolarity_Rising;
 394              		.loc 1 96 0
 395 02b6 4FF00003 		mov	r3, #0
 396 02ba FB86     		strh	r3, [r7, #54]	@ movhi
  97:../src/motor.cpp **** 	icInit.TIM_ICFilter = 0;
 397              		.loc 1 97 0
 398 02bc 4FF00003 		mov	r3, #0
 399 02c0 BB87     		strh	r3, [r7, #60]	@ movhi
  98:../src/motor.cpp **** 	icInit.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 400              		.loc 1 98 0
 401 02c2 4FF00003 		mov	r3, #0
 402 02c6 7B87     		strh	r3, [r7, #58]	@ movhi
  99:../src/motor.cpp **** 	icInit.TIM_ICSelection = TIM_ICSelection_DirectTI;
 403              		.loc 1 99 0
 404 02c8 4FF00103 		mov	r3, #1
 405 02cc 3B87     		strh	r3, [r7, #56]	@ movhi
 100:../src/motor.cpp **** 	TIM_ICInit(TIM3, &icInit);
 406              		.loc 1 100 0
 407 02ce 07F13403 		add	r3, r7, #52
 408 02d2 4FF48060 		mov	r0, #1024
 409 02d6 C4F20000 		movt	r0, 16384
 410 02da 1946     		mov	r1, r3
 411 02dc FFF7FEFF 		bl	TIM_ICInit
 101:../src/motor.cpp **** 	icInit.TIM_Channel = TIM_Channel_2;
 412              		.loc 1 101 0
 413 02e0 4FF00403 		mov	r3, #4
 414 02e4 BB86     		strh	r3, [r7, #52]	@ movhi
 102:../src/motor.cpp **** 	TIM_ICInit(TIM3, &icInit);
 415              		.loc 1 102 0
 416 02e6 07F13403 		add	r3, r7, #52
 417 02ea 4FF48060 		mov	r0, #1024
 418 02ee C4F20000 		movt	r0, 16384
 419 02f2 1946     		mov	r1, r3
 420 02f4 FFF7FEFF 		bl	TIM_ICInit
 103:../src/motor.cpp **** 
 104:../src/motor.cpp **** 	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Risin
 421              		.loc 1 104 0
 422 02f8 4FF48060 		mov	r0, #1024
 423 02fc C4F20000 		movt	r0, 16384
 424 0300 4FF00301 		mov	r1, #3
 425 0304 4FF00002 		mov	r2, #0
 426 0308 4FF00003 		mov	r3, #0
 427 030c FFF7FEFF 		bl	TIM_EncoderInterfaceConfig
 105:../src/motor.cpp **** 	TIM_SetAutoreload(TIM3, 0xffff);
 428              		.loc 1 105 0
 429 0310 4FF48060 		mov	r0, #1024
 430 0314 C4F20000 		movt	r0, 16384
 431 0318 4FF6FF71 		movw	r1, #65535
 432 031c FFF7FEFF 		bl	TIM_SetAutoreload
 106:../src/motor.cpp **** 	TIM_SetCounter(TIM3, 0);
 433              		.loc 1 106 0
 434 0320 4FF48060 		mov	r0, #1024
 435 0324 C4F20000 		movt	r0, 16384
 436 0328 4FF00001 		mov	r1, #0
 437 032c FFF7FEFF 		bl	TIM_SetCounter
 107:../src/motor.cpp **** 	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 438              		.loc 1 107 0
 439 0330 4FF48060 		mov	r0, #1024
 440 0334 C4F20000 		movt	r0, 16384
 441 0338 4FF00101 		mov	r1, #1
 442 033c 4FF00102 		mov	r2, #1
 443 0340 FFF7FEFF 		bl	TIM_ITConfig
 108:../src/motor.cpp **** 
 109:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannel = TIM3_IRQn;
 444              		.loc 1 109 0
 445 0344 4FF01D03 		mov	r3, #29
 446 0348 87F83030 		strb	r3, [r7, #48]
 110:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannelPreemptionPriority = 0;
 447              		.loc 1 110 0
 448 034c 4FF00003 		mov	r3, #0
 449 0350 87F83130 		strb	r3, [r7, #49]
 111:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannelSubPriority = 0;
 450              		.loc 1 111 0
 451 0354 4FF00003 		mov	r3, #0
 452 0358 87F83230 		strb	r3, [r7, #50]
 112:../src/motor.cpp **** 	initNVIC.NVIC_IRQChannelCmd = ENABLE;
 453              		.loc 1 112 0
 454 035c 4FF00103 		mov	r3, #1
 455 0360 87F83330 		strb	r3, [r7, #51]
 113:../src/motor.cpp **** 	NVIC_Init(&initNVIC);
 456              		.loc 1 113 0
 457 0364 07F13003 		add	r3, r7, #48
 458 0368 1846     		mov	r0, r3
 459 036a FFF7FEFF 		bl	NVIC_Init
 114:../src/motor.cpp **** 
 115:../src/motor.cpp **** 	GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);
 460              		.loc 1 115 0
 461 036e 4FF44060 		mov	r0, #3072
 462 0372 C0F21A00 		movt	r0, 26
 463 0376 4FF00101 		mov	r1, #1
 464 037a FFF7FEFF 		bl	GPIO_PinRemapConfig
 116:../src/motor.cpp **** 
 117:../src/motor.cpp **** 	TIM_Cmd(TIM3, ENABLE);
 465              		.loc 1 117 0
 466 037e 4FF48060 		mov	r0, #1024
 467 0382 C4F20000 		movt	r0, 16384
 468 0386 4FF00101 		mov	r1, #1
 469 038a FFF7FEFF 		bl	TIM_Cmd
 118:../src/motor.cpp **** 
 119:../src/motor.cpp **** 	//PWM
 120:../src/motor.cpp **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 470              		.loc 1 120 0
 471 038e 4FF40060 		mov	r0, #2048
 472 0392 4FF00101 		mov	r1, #1
 473 0396 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 121:../src/motor.cpp **** 	TIM_TimeBaseInitTypeDef tim1Init;
 122:../src/motor.cpp **** 	TIM_OCInitTypeDef ocInit;
 123:../src/motor.cpp **** 	tim1Init.TIM_Period = MAX_WIDTH;
 474              		.loc 1 123 0
 475 039a 4FF4B463 		mov	r3, #1440
 476 039e 3B85     		strh	r3, [r7, #40]	@ movhi
 124:../src/motor.cpp **** 	tim1Init.TIM_Prescaler = 1;
 477              		.loc 1 124 0
 478 03a0 4FF00103 		mov	r3, #1
 479 03a4 BB84     		strh	r3, [r7, #36]	@ movhi
 125:../src/motor.cpp **** 	tim1Init.TIM_ClockDivision = 0;
 480              		.loc 1 125 0
 481 03a6 4FF00003 		mov	r3, #0
 482 03aa 7B85     		strh	r3, [r7, #42]	@ movhi
 126:../src/motor.cpp **** 	tim1Init.TIM_CounterMode = TIM_CounterMode_Up;
 483              		.loc 1 126 0
 484 03ac 4FF00003 		mov	r3, #0
 485 03b0 FB84     		strh	r3, [r7, #38]	@ movhi
 127:../src/motor.cpp **** 	TIM_TimeBaseInit(TIM1, &tim1Init);
 486              		.loc 1 127 0
 487 03b2 07F12403 		add	r3, r7, #36
 488 03b6 4FF43050 		mov	r0, #11264
 489 03ba C4F20100 		movt	r0, 16385
 490 03be 1946     		mov	r1, r3
 491 03c0 FFF7FEFF 		bl	TIM_TimeBaseInit
 128:../src/motor.cpp **** 
 129:../src/motor.cpp **** 	/* PWM1 Mode configuration: Channel2 */
 130:../src/motor.cpp **** 	ocInit.TIM_OCMode = TIM_OCMode_PWM1;
 492              		.loc 1 130 0
 493 03c4 4FF06003 		mov	r3, #96
 494 03c8 BB82     		strh	r3, [r7, #20]	@ movhi
 131:../src/motor.cpp **** 	ocInit.TIM_OutputState = TIM_OutputState_Disable;
 495              		.loc 1 131 0
 496 03ca 4FF00003 		mov	r3, #0
 497 03ce FB82     		strh	r3, [r7, #22]	@ movhi
 132:../src/motor.cpp **** 	ocInit.TIM_OutputNState = TIM_OutputNState_Disable;
 498              		.loc 1 132 0
 499 03d0 4FF00003 		mov	r3, #0
 500 03d4 3B83     		strh	r3, [r7, #24]	@ movhi
 133:../src/motor.cpp **** 	ocInit.TIM_Pulse = 0;
 501              		.loc 1 133 0
 502 03d6 4FF00003 		mov	r3, #0
 503 03da 7B83     		strh	r3, [r7, #26]	@ movhi
 134:../src/motor.cpp **** 	ocInit.TIM_OCPolarity = TIM_OCPolarity_High;
 504              		.loc 1 134 0
 505 03dc 4FF00003 		mov	r3, #0
 506 03e0 BB83     		strh	r3, [r7, #28]	@ movhi
 135:../src/motor.cpp **** 	ocInit.TIM_OCNPolarity = TIM_OCNPolarity_High;
 507              		.loc 1 135 0
 508 03e2 4FF00003 		mov	r3, #0
 509 03e6 FB83     		strh	r3, [r7, #30]	@ movhi
 136:../src/motor.cpp **** 
 137:../src/motor.cpp **** 	TIM_OC1Init(TIM1, &ocInit);
 510              		.loc 1 137 0
 511 03e8 07F11403 		add	r3, r7, #20
 512 03ec 4FF43050 		mov	r0, #11264
 513 03f0 C4F20100 		movt	r0, 16385
 514 03f4 1946     		mov	r1, r3
 515 03f6 FFF7FEFF 		bl	TIM_OC1Init
 138:../src/motor.cpp **** 	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 516              		.loc 1 138 0
 517 03fa 4FF43050 		mov	r0, #11264
 518 03fe C4F20100 		movt	r0, 16385
 519 0402 4FF00801 		mov	r1, #8
 520 0406 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 139:../src/motor.cpp **** 	TIM_OC2Init(TIM1, &ocInit);
 521              		.loc 1 139 0
 522 040a 07F11403 		add	r3, r7, #20
 523 040e 4FF43050 		mov	r0, #11264
 524 0412 C4F20100 		movt	r0, 16385
 525 0416 1946     		mov	r1, r3
 526 0418 FFF7FEFF 		bl	TIM_OC2Init
 140:../src/motor.cpp **** 	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 527              		.loc 1 140 0
 528 041c 4FF43050 		mov	r0, #11264
 529 0420 C4F20100 		movt	r0, 16385
 530 0424 4FF00801 		mov	r1, #8
 531 0428 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 141:../src/motor.cpp **** 	TIM_OC3Init(TIM1, &ocInit);
 532              		.loc 1 141 0
 533 042c 07F11403 		add	r3, r7, #20
 534 0430 4FF43050 		mov	r0, #11264
 535 0434 C4F20100 		movt	r0, 16385
 536 0438 1946     		mov	r1, r3
 537 043a FFF7FEFF 		bl	TIM_OC3Init
 142:../src/motor.cpp **** 	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 538              		.loc 1 142 0
 539 043e 4FF43050 		mov	r0, #11264
 540 0442 C4F20100 		movt	r0, 16385
 541 0446 4FF00801 		mov	r1, #8
 542 044a FFF7FEFF 		bl	TIM_OC3PreloadConfig
 143:../src/motor.cpp **** 	TIM_OC4Init(TIM1, &ocInit);
 543              		.loc 1 143 0
 544 044e 07F11403 		add	r3, r7, #20
 545 0452 4FF43050 		mov	r0, #11264
 546 0456 C4F20100 		movt	r0, 16385
 547 045a 1946     		mov	r1, r3
 548 045c FFF7FEFF 		bl	TIM_OC4Init
 144:../src/motor.cpp **** 	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 549              		.loc 1 144 0
 550 0460 4FF43050 		mov	r0, #11264
 551 0464 C4F20100 		movt	r0, 16385
 552 0468 4FF00801 		mov	r1, #8
 553 046c FFF7FEFF 		bl	TIM_OC4PreloadConfig
 145:../src/motor.cpp **** 
 146:../src/motor.cpp **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 554              		.loc 1 146 0
 555 0470 4FF43050 		mov	r0, #11264
 556 0474 C4F20100 		movt	r0, 16385
 557 0478 4FF00101 		mov	r1, #1
 558 047c FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 147:../src/motor.cpp **** 
 148:../src/motor.cpp **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 559              		.loc 1 148 0
 560 0480 4FF43050 		mov	r0, #11264
 561 0484 C4F20100 		movt	r0, 16385
 562 0488 4FF00101 		mov	r1, #1
 563 048c FFF7FEFF 		bl	TIM_ARRPreloadConfig
 149:../src/motor.cpp **** 
 150:../src/motor.cpp **** 	/* TIM1 enable counter */
 151:../src/motor.cpp **** 	TIM_Cmd(TIM1, ENABLE);
 564              		.loc 1 151 0
 565 0490 4FF43050 		mov	r0, #11264
 566 0494 C4F20100 		movt	r0, 16385
 567 0498 4FF00101 		mov	r1, #1
 568 049c FFF7FEFF 		bl	TIM_Cmd
 569              	.LBE2:
 152:../src/motor.cpp **** }
 570              		.loc 1 152 0
 571 04a0 07F14807 		add	r7, r7, #72
 572 04a4 BD46     		mov	sp, r7
 573 04a6 80BD     		pop	{r7, pc}
 574              	.L5:
 575              		.align	2
 576              	.L4:
 577 04a8 00000000 		.word	0
 578              		.cfi_endproc
 579              	.LFE31:
 581              		.section	.text._Z11motorRunVel5Motor,"ax",%progbits
 582              		.align	2
 583              		.global	_Z11motorRunVel5Motor
 584              		.thumb
 585              		.thumb_func
 587              	_Z11motorRunVel5Motor:
 588              	.LFB32:
 153:../src/motor.cpp **** 
 154:../src/motor.cpp **** void motorRunVel(Motor motor){
 589              		.loc 1 154 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 8
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 594 0000 80B4     		push	{r7}
 595              	.LCFI3:
 596              		.cfi_def_cfa_offset 4
 597              		.cfi_offset 7, -4
 598 0002 83B0     		sub	sp, sp, #12
 599              	.LCFI4:
 600              		.cfi_def_cfa_offset 16
 601 0004 00AF     		add	r7, sp, #0
 602              	.LCFI5:
 603              		.cfi_def_cfa_register 7
 604 0006 0346     		mov	r3, r0
 605 0008 FB71     		strb	r3, [r7, #7]
 155:../src/motor.cpp **** 	motorEnable[motor] = true;
 606              		.loc 1 155 0
 607 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 608 000c 40F20003 		movw	r3, #:lower16:motorEnable
 609 0010 C0F20003 		movt	r3, #:upper16:motorEnable
 610 0014 4FF00101 		mov	r1, #1
 611 0018 9954     		strb	r1, [r3, r2]
 156:../src/motor.cpp **** 	cte_prev[motor] = 0;
 612              		.loc 1 156 0
 613 001a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 614 001c 40F20003 		movw	r3, #:lower16:cte_prev
 615 0020 C0F20003 		movt	r3, #:upper16:cte_prev
 616 0024 4FF00001 		mov	r1, #0
 617 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 157:../src/motor.cpp **** 	cte_int[motor] = 0;
 618              		.loc 1 157 0
 619 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 620 002e 40F20003 		movw	r3, #:lower16:cte_int
 621 0032 C0F20003 		movt	r3, #:upper16:cte_int
 622 0036 4FF00001 		mov	r1, #0
 623 003a 43F82210 		str	r1, [r3, r2, lsl #2]
 158:../src/motor.cpp **** 	motor_width[motor] = 0;
 624              		.loc 1 158 0
 625 003e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 626 0040 40F20003 		movw	r3, #:lower16:motor_width
 627 0044 C0F20003 		movt	r3, #:upper16:motor_width
 628 0048 4FF00001 		mov	r1, #0
 629 004c 43F82210 		str	r1, [r3, r2, lsl #2]
 159:../src/motor.cpp **** }
 630              		.loc 1 159 0
 631 0050 07F10C07 		add	r7, r7, #12
 632 0054 BD46     		mov	sp, r7
 633 0056 80BC     		pop	{r7}
 634 0058 7047     		bx	lr
 635              		.cfi_endproc
 636              	.LFE32:
 638 005a 00BF     		.section	.text._Z11motorRunPos5Motor,"ax",%progbits
 639              		.align	2
 640              		.global	_Z11motorRunPos5Motor
 641              		.thumb
 642              		.thumb_func
 644              	_Z11motorRunPos5Motor:
 645              	.LFB33:
 160:../src/motor.cpp **** 
 161:../src/motor.cpp **** void motorRunPos(Motor motor){
 646              		.loc 1 161 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 651 0000 80B4     		push	{r7}
 652              	.LCFI6:
 653              		.cfi_def_cfa_offset 4
 654              		.cfi_offset 7, -4
 655 0002 83B0     		sub	sp, sp, #12
 656              	.LCFI7:
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              	.LCFI8:
 660              		.cfi_def_cfa_register 7
 661 0006 0346     		mov	r3, r0
 662 0008 FB71     		strb	r3, [r7, #7]
 162:../src/motor.cpp **** 
 163:../src/motor.cpp **** }
 663              		.loc 1 163 0
 664 000a 07F10C07 		add	r7, r7, #12
 665 000e BD46     		mov	sp, r7
 666 0010 80BC     		pop	{r7}
 667 0012 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE33:
 671              		.section	.text._Z9motorStop5Motor,"ax",%progbits
 672              		.align	2
 673              		.global	_Z9motorStop5Motor
 674              		.thumb
 675              		.thumb_func
 677              	_Z9motorStop5Motor:
 678              	.LFB34:
 164:../src/motor.cpp **** 
 165:../src/motor.cpp **** void motorStop(Motor motor){
 679              		.loc 1 165 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 8
 682              		@ frame_needed = 1, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684 0000 80B4     		push	{r7}
 685              	.LCFI9:
 686              		.cfi_def_cfa_offset 4
 687              		.cfi_offset 7, -4
 688 0002 83B0     		sub	sp, sp, #12
 689              	.LCFI10:
 690              		.cfi_def_cfa_offset 16
 691 0004 00AF     		add	r7, sp, #0
 692              	.LCFI11:
 693              		.cfi_def_cfa_register 7
 694 0006 0346     		mov	r3, r0
 695 0008 FB71     		strb	r3, [r7, #7]
 166:../src/motor.cpp **** 	set_speed[motor] = 0;
 696              		.loc 1 166 0
 697 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 698 000c 40F20003 		movw	r3, #:lower16:set_speed
 699 0010 C0F20003 		movt	r3, #:upper16:set_speed
 700 0014 4FF00001 		mov	r1, #0
 701 0018 43F82210 		str	r1, [r3, r2, lsl #2]
 167:../src/motor.cpp **** }
 702              		.loc 1 167 0
 703 001c 07F10C07 		add	r7, r7, #12
 704 0020 BD46     		mov	sp, r7
 705 0022 80BC     		pop	{r7}
 706 0024 7047     		bx	lr
 707              		.cfi_endproc
 708              	.LFE34:
 710 0026 00BF     		.section	.text._Z13motorShutdown5Motor,"ax",%progbits
 711              		.align	2
 712              		.global	_Z13motorShutdown5Motor
 713              		.thumb
 714              		.thumb_func
 716              	_Z13motorShutdown5Motor:
 717              	.LFB35:
 168:../src/motor.cpp **** 
 169:../src/motor.cpp **** void motorShutdown(Motor motor){
 718              		.loc 1 169 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 16
 721              		@ frame_needed = 1, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723 0000 80B4     		push	{r7}
 724              	.LCFI12:
 725              		.cfi_def_cfa_offset 4
 726              		.cfi_offset 7, -4
 727 0002 85B0     		sub	sp, sp, #20
 728              	.LCFI13:
 729              		.cfi_def_cfa_offset 24
 730 0004 00AF     		add	r7, sp, #0
 731              	.LCFI14:
 732              		.cfi_def_cfa_register 7
 733 0006 0346     		mov	r3, r0
 734 0008 FB71     		strb	r3, [r7, #7]
 735              	.LBB4:
 170:../src/motor.cpp **** 	motorEnable[motor] = false;
 736              		.loc 1 170 0
 737 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 738 000c 40F20003 		movw	r3, #:lower16:motorEnable
 739 0010 C0F20003 		movt	r3, #:upper16:motorEnable
 740 0014 4FF00001 		mov	r1, #0
 741 0018 9954     		strb	r1, [r3, r2]
 171:../src/motor.cpp **** 	uint16_t tmpccer = TIM1->CCER;
 742              		.loc 1 171 0
 743 001a 4FF43053 		mov	r3, #11264
 744 001e C4F20103 		movt	r3, 16385
 745 0022 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 746 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 172:../src/motor.cpp **** 	if(motor == Left){
 747              		.loc 1 172 0
 748 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 749 0028 002B     		cmp	r3, #0
 750 002a 04D1     		bne	.L10
 173:../src/motor.cpp **** 		tmpccer &= ~(TIM_CCER_CC1E | TIM_CCER_CC2NE);
 751              		.loc 1 173 0
 752 002c FB89     		ldrh	r3, [r7, #14]	@ movhi
 753 002e 23F04103 		bic	r3, r3, #65
 754 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 755 0034 03E0     		b	.L11
 756              	.L10:
 174:../src/motor.cpp **** 	}
 175:../src/motor.cpp **** 	else{
 176:../src/motor.cpp **** 
 177:../src/motor.cpp **** 		tmpccer &= ~(TIM_CCER_CC3NE | TIM_CCER_CC4E);
 757              		.loc 1 177 0
 758 0036 FB89     		ldrh	r3, [r7, #14]	@ movhi
 759 0038 23F4A053 		bic	r3, r3, #5120
 760 003c FB81     		strh	r3, [r7, #14]	@ movhi
 761              	.L11:
 178:../src/motor.cpp **** 	}
 179:../src/motor.cpp **** 	TIM1->CCER = tmpccer;
 762              		.loc 1 179 0
 763 003e 4FF43053 		mov	r3, #11264
 764 0042 C4F20103 		movt	r3, 16385
 765 0046 FA89     		ldrh	r2, [r7, #14]	@ movhi
 766 0048 1A84     		strh	r2, [r3, #32]	@ movhi
 180:../src/motor.cpp **** 	cte_int[motor] = 0; cte_prev[motor] = 0;
 767              		.loc 1 180 0
 768 004a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 769 004c 40F20003 		movw	r3, #:lower16:cte_int
 770 0050 C0F20003 		movt	r3, #:upper16:cte_int
 771 0054 4FF00001 		mov	r1, #0
 772 0058 43F82210 		str	r1, [r3, r2, lsl #2]
 773 005c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 774 005e 40F20003 		movw	r3, #:lower16:cte_prev
 775 0062 C0F20003 		movt	r3, #:upper16:cte_prev
 776 0066 4FF00001 		mov	r1, #0
 777 006a 43F82210 		str	r1, [r3, r2, lsl #2]
 181:../src/motor.cpp **** 	prev_enc[motor] = 0;
 778              		.loc 1 181 0
 779 006e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 780 0070 40F20003 		movw	r3, #:lower16:prev_enc
 781 0074 C0F20003 		movt	r3, #:upper16:prev_enc
 782 0078 4FF00001 		mov	r1, #0
 783 007c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 182:../src/motor.cpp **** 	cur_speed[motor] = 0;
 784              		.loc 1 182 0
 785 0080 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 786 0082 40F20003 		movw	r3, #:lower16:cur_speed
 787 0086 C0F20003 		movt	r3, #:upper16:cur_speed
 788 008a 4FF00001 		mov	r1, #0
 789 008e 43F82210 		str	r1, [r3, r2, lsl #2]
 183:../src/motor.cpp **** 	cur_pos[motor] = 0;
 790              		.loc 1 183 0
 791 0092 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 792 0094 40F20003 		movw	r3, #:lower16:cur_pos
 793 0098 C0F20003 		movt	r3, #:upper16:cur_pos
 794 009c 0C49     		ldr	r1, .L12	@ float
 795 009e 43F82210 		str	r1, [r3, r2, lsl #2]	@ float
 184:../src/motor.cpp **** 	motor_width[motor] = 0;
 796              		.loc 1 184 0
 797 00a2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 798 00a4 40F20003 		movw	r3, #:lower16:motor_width
 799 00a8 C0F20003 		movt	r3, #:upper16:motor_width
 800 00ac 4FF00001 		mov	r1, #0
 801 00b0 43F82210 		str	r1, [r3, r2, lsl #2]
 185:../src/motor.cpp **** 	motorEnable[motor] = false;
 802              		.loc 1 185 0
 803 00b4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 804 00b6 40F20003 		movw	r3, #:lower16:motorEnable
 805 00ba C0F20003 		movt	r3, #:upper16:motorEnable
 806 00be 4FF00001 		mov	r1, #0
 807 00c2 9954     		strb	r1, [r3, r2]
 808              	.LBE4:
 186:../src/motor.cpp **** }
 809              		.loc 1 186 0
 810 00c4 07F11407 		add	r7, r7, #20
 811 00c8 BD46     		mov	sp, r7
 812 00ca 80BC     		pop	{r7}
 813 00cc 7047     		bx	lr
 814              	.L13:
 815 00ce 00BF     		.align	2
 816              	.L12:
 817 00d0 00000000 		.word	0
 818              		.cfi_endproc
 819              	.LFE35:
 821              		.global	__aeabi_i2f
 822              		.global	__aeabi_fmul
 823              		.global	__aeabi_fdiv
 824              		.global	__aeabi_f2iz
 825              		.section	.text._Z11motorSetVelf5Motor,"ax",%progbits
 826              		.align	2
 827              		.global	_Z11motorSetVelf5Motor
 828              		.thumb
 829              		.thumb_func
 831              	_Z11motorSetVelf5Motor:
 832              	.LFB36:
 187:../src/motor.cpp **** 
 188:../src/motor.cpp **** void motorSetVel(float speed, Motor motor){ 	//rpm
 833              		.loc 1 188 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 8
 836              		@ frame_needed = 1, uses_anonymous_args = 0
 837 0000 90B5     		push	{r4, r7, lr}
 838              	.LCFI15:
 839              		.cfi_def_cfa_offset 12
 840              		.cfi_offset 14, -4
 841              		.cfi_offset 7, -8
 842              		.cfi_offset 4, -12
 843 0002 83B0     		sub	sp, sp, #12
 844              	.LCFI16:
 845              		.cfi_def_cfa_offset 24
 846 0004 00AF     		add	r7, sp, #0
 847              	.LCFI17:
 848              		.cfi_def_cfa_register 7
 849 0006 7860     		str	r0, [r7, #4]	@ float
 850 0008 0B46     		mov	r3, r1
 851 000a FB70     		strb	r3, [r7, #3]
 189:../src/motor.cpp **** 	set_speed[motor] = speed*cpr/(60*PID_freq);
 852              		.loc 1 189 0
 853 000c FC78     		ldrb	r4, [r7, #3]	@ zero_extendqisi2
 854 000e 40F20003 		movw	r3, #:lower16:cpr
 855 0012 C0F20003 		movt	r3, #:upper16:cpr
 856 0016 1B88     		ldrh	r3, [r3, #0]
 857 0018 1846     		mov	r0, r3
 858 001a FFF7FEFF 		bl	__aeabi_i2f
 859 001e 0346     		mov	r3, r0
 860 0020 1846     		mov	r0, r3
 861 0022 7968     		ldr	r1, [r7, #4]	@ float
 862 0024 FFF7FEFF 		bl	__aeabi_fmul
 863 0028 0346     		mov	r3, r0
 864 002a 1846     		mov	r0, r3
 865 002c 0849     		ldr	r1, .L15	@ float
 866 002e FFF7FEFF 		bl	__aeabi_fdiv
 867 0032 0346     		mov	r3, r0
 868 0034 1846     		mov	r0, r3
 869 0036 FFF7FEFF 		bl	__aeabi_f2iz
 870 003a 0246     		mov	r2, r0
 871 003c 40F20003 		movw	r3, #:lower16:set_speed
 872 0040 C0F20003 		movt	r3, #:upper16:set_speed
 873 0044 43F82420 		str	r2, [r3, r4, lsl #2]
 190:../src/motor.cpp **** }
 874              		.loc 1 190 0
 875 0048 07F10C07 		add	r7, r7, #12
 876 004c BD46     		mov	sp, r7
 877 004e 90BD     		pop	{r4, r7, pc}
 878              	.L16:
 879              		.align	2
 880              	.L15:
 881 0050 00803B45 		.word	1161527296
 882              		.cfi_endproc
 883              	.LFE36:
 885              		.section	.text._Z11motorSetPosf5Motor,"ax",%progbits
 886              		.align	2
 887              		.global	_Z11motorSetPosf5Motor
 888              		.thumb
 889              		.thumb_func
 891              	_Z11motorSetPosf5Motor:
 892              	.LFB37:
 191:../src/motor.cpp **** 
 192:../src/motor.cpp **** void motorSetPos(float pos, Motor motor){		//rotations
 893              		.loc 1 192 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 8
 896              		@ frame_needed = 1, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898 0000 80B4     		push	{r7}
 899              	.LCFI18:
 900              		.cfi_def_cfa_offset 4
 901              		.cfi_offset 7, -4
 902 0002 83B0     		sub	sp, sp, #12
 903              	.LCFI19:
 904              		.cfi_def_cfa_offset 16
 905 0004 00AF     		add	r7, sp, #0
 906              	.LCFI20:
 907              		.cfi_def_cfa_register 7
 908 0006 7860     		str	r0, [r7, #4]	@ float
 909 0008 0B46     		mov	r3, r1
 910 000a FB70     		strb	r3, [r7, #3]
 193:../src/motor.cpp **** 	set_pos[motor] = pos;
 911              		.loc 1 193 0
 912 000c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 913 000e 40F20003 		movw	r3, #:lower16:set_pos
 914 0012 C0F20003 		movt	r3, #:upper16:set_pos
 915 0016 7968     		ldr	r1, [r7, #4]	@ float
 916 0018 43F82210 		str	r1, [r3, r2, lsl #2]	@ float
 194:../src/motor.cpp **** }
 917              		.loc 1 194 0
 918 001c 07F10C07 		add	r7, r7, #12
 919 0020 BD46     		mov	sp, r7
 920 0022 80BC     		pop	{r7}
 921 0024 7047     		bx	lr
 922              		.cfi_endproc
 923              	.LFE37:
 925 0026 00BF     		.section	.text._Z11motorSetPidfff,"ax",%progbits
 926              		.align	2
 927              		.global	_Z11motorSetPidfff
 928              		.thumb
 929              		.thumb_func
 931              	_Z11motorSetPidfff:
 932              	.LFB38:
 195:../src/motor.cpp **** 
 196:../src/motor.cpp **** 
 197:../src/motor.cpp **** void motorSetPid(float imotorKp, float imotorKi, float imotorKd){
 933              		.loc 1 197 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 16
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938 0000 80B4     		push	{r7}
 939              	.LCFI21:
 940              		.cfi_def_cfa_offset 4
 941              		.cfi_offset 7, -4
 942 0002 85B0     		sub	sp, sp, #20
 943              	.LCFI22:
 944              		.cfi_def_cfa_offset 24
 945 0004 00AF     		add	r7, sp, #0
 946              	.LCFI23:
 947              		.cfi_def_cfa_register 7
 948 0006 F860     		str	r0, [r7, #12]	@ float
 949 0008 B960     		str	r1, [r7, #8]	@ float
 950 000a 7A60     		str	r2, [r7, #4]	@ float
 198:../src/motor.cpp **** 	motorKp = imotorKp; motorKd = imotorKd; motorKi = imotorKi;
 951              		.loc 1 198 0
 952 000c 40F20003 		movw	r3, #:lower16:motorKp
 953 0010 C0F20003 		movt	r3, #:upper16:motorKp
 954 0014 FA68     		ldr	r2, [r7, #12]	@ float
 955 0016 1A60     		str	r2, [r3, #0]	@ float
 956 0018 40F20003 		movw	r3, #:lower16:motorKd
 957 001c C0F20003 		movt	r3, #:upper16:motorKd
 958 0020 7A68     		ldr	r2, [r7, #4]	@ float
 959 0022 1A60     		str	r2, [r3, #0]	@ float
 960 0024 40F20003 		movw	r3, #:lower16:motorKi
 961 0028 C0F20003 		movt	r3, #:upper16:motorKi
 962 002c BA68     		ldr	r2, [r7, #8]	@ float
 963 002e 1A60     		str	r2, [r3, #0]	@ float
 199:../src/motor.cpp **** }
 964              		.loc 1 199 0
 965 0030 07F11407 		add	r7, r7, #20
 966 0034 BD46     		mov	sp, r7
 967 0036 80BC     		pop	{r7}
 968 0038 7047     		bx	lr
 969              		.cfi_endproc
 970              	.LFE38:
 972              		.global	__aeabi_fadd
 973              		.global	__aeabi_fcmpgt
 974              		.global	__aeabi_fcmplt
 975 003a 00BF     		.section	.text._Z8motorPID5Motor,"ax",%progbits
 976              		.align	2
 977              		.global	_Z8motorPID5Motor
 978              		.thumb
 979              		.thumb_func
 981              	_Z8motorPID5Motor:
 982              	.LFB39:
 200:../src/motor.cpp **** 
 201:../src/motor.cpp **** void motorPID(Motor motor){
 983              		.loc 1 201 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987 0000 B0B5     		push	{r4, r5, r7, lr}
 988              	.LCFI24:
 989              		.cfi_def_cfa_offset 16
 990              		.cfi_offset 14, -4
 991              		.cfi_offset 7, -8
 992              		.cfi_offset 5, -12
 993              		.cfi_offset 4, -16
 994 0002 84B0     		sub	sp, sp, #16
 995              	.LCFI25:
 996              		.cfi_def_cfa_offset 32
 997 0004 00AF     		add	r7, sp, #0
 998              	.LCFI26:
 999              		.cfi_def_cfa_register 7
 1000 0006 0346     		mov	r3, r0
 1001 0008 FB71     		strb	r3, [r7, #7]
 1002              	.LBB5:
 202:../src/motor.cpp **** 	uint16_t cur_enc = motorReadEnc(motor);
 1003              		.loc 1 202 0
 1004 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1005 000c 1846     		mov	r0, r3
 1006 000e FFF7FEFF 		bl	_Z12motorReadEnc5Motor
 1007 0012 0346     		mov	r3, r0
 1008 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 203:../src/motor.cpp **** 	if(motorUpdate[motor] == true){
 1009              		.loc 1 203 0
 1010 0016 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1011 0018 40F20003 		movw	r3, #:lower16:motorUpdate
 1012 001c C0F20003 		movt	r3, #:upper16:motorUpdate
 1013 0020 9B5C     		ldrb	r3, [r3, r2]
 1014 0022 DBB2     		uxtb	r3, r3
 1015 0024 002B     		cmp	r3, #0
 1016 0026 43D0     		beq	.L20
 204:../src/motor.cpp **** 		if(cur_enc < prev_enc[motor]){
 1017              		.loc 1 204 0
 1018 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1019 002a 40F20003 		movw	r3, #:lower16:prev_enc
 1020 002e C0F20003 		movt	r3, #:upper16:prev_enc
 1021 0032 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 1022 0036 9BB2     		uxth	r3, r3
 1023 0038 BA89     		ldrh	r2, [r7, #12]
 1024 003a 9A42     		cmp	r2, r3
 1025 003c 2CBF     		ite	cs
 1026 003e 0023     		movcs	r3, #0
 1027 0040 0123     		movcc	r3, #1
 1028 0042 DBB2     		uxtb	r3, r3
 1029 0044 002B     		cmp	r3, #0
 1030 0046 14D0     		beq	.L21
 205:../src/motor.cpp **** 			cur_speed[motor] = ((int)cur_enc - prev_enc[motor] + 0xffff);
 1031              		.loc 1 205 0
 1032 0048 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1033 004a BA89     		ldrh	r2, [r7, #12]
 1034 004c F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 1035 004e 40F20003 		movw	r3, #:lower16:prev_enc
 1036 0052 C0F20003 		movt	r3, #:upper16:prev_enc
 1037 0056 33F81030 		ldrh	r3, [r3, r0, lsl #1]	@ movhi
 1038 005a 9BB2     		uxth	r3, r3
 1039 005c D31A     		subs	r3, r2, r3
 1040 005e 4FF6FF72 		movw	r2, #65535
 1041 0062 9A18     		adds	r2, r3, r2
 1042 0064 40F20003 		movw	r3, #:lower16:cur_speed
 1043 0068 C0F20003 		movt	r3, #:upper16:cur_speed
 1044 006c 43F82120 		str	r2, [r3, r1, lsl #2]
 1045 0070 15E0     		b	.L22
 1046              	.L21:
 206:../src/motor.cpp **** 		}
 207:../src/motor.cpp **** 		else{
 208:../src/motor.cpp **** 			cur_speed[motor] = ((int)cur_enc - prev_enc[motor] - 0xffff);
 1047              		.loc 1 208 0
 1048 0072 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1049 0074 BA89     		ldrh	r2, [r7, #12]
 1050 0076 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 1051 0078 40F20003 		movw	r3, #:lower16:prev_enc
 1052 007c C0F20003 		movt	r3, #:upper16:prev_enc
 1053 0080 33F81030 		ldrh	r3, [r3, r0, lsl #1]	@ movhi
 1054 0084 9BB2     		uxth	r3, r3
 1055 0086 D21A     		subs	r2, r2, r3
 1056 0088 4FF00103 		mov	r3, #1
 1057 008c CFF6FF73 		movt	r3, 65535
 1058 0090 D318     		adds	r3, r2, r3
 1059 0092 40F20002 		movw	r2, #:lower16:cur_speed
 1060 0096 C0F20002 		movt	r2, #:upper16:cur_speed
 1061 009a 42F82130 		str	r3, [r2, r1, lsl #2]
 1062              	.L22:
 209:../src/motor.cpp **** 		}
 210:../src/motor.cpp **** 		motorUpdate[motor] = false;
 1063              		.loc 1 210 0
 1064 009e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1065 00a0 40F20003 		movw	r3, #:lower16:motorUpdate
 1066 00a4 C0F20003 		movt	r3, #:upper16:motorUpdate
 1067 00a8 4FF00001 		mov	r1, #0
 1068 00ac 9954     		strb	r1, [r3, r2]
 1069 00ae 10E0     		b	.L23
 1070              	.L20:
 211:../src/motor.cpp **** 	}
 212:../src/motor.cpp **** 	else{
 213:../src/motor.cpp **** 		cur_speed[motor] = ((int)cur_enc - prev_enc[motor]);
 1071              		.loc 1 213 0
 1072 00b0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1073 00b2 B989     		ldrh	r1, [r7, #12]
 1074 00b4 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 1075 00b6 40F20003 		movw	r3, #:lower16:prev_enc
 1076 00ba C0F20003 		movt	r3, #:upper16:prev_enc
 1077 00be 33F81030 		ldrh	r3, [r3, r0, lsl #1]	@ movhi
 1078 00c2 9BB2     		uxth	r3, r3
 1079 00c4 C91A     		subs	r1, r1, r3
 1080 00c6 40F20003 		movw	r3, #:lower16:cur_speed
 1081 00ca C0F20003 		movt	r3, #:upper16:cur_speed
 1082 00ce 43F82210 		str	r1, [r3, r2, lsl #2]
 1083              	.L23:
 214:../src/motor.cpp **** 	}
 215:../src/motor.cpp **** 	//cur_speed = cur_speed*60*PID_freq/cpr;
 216:../src/motor.cpp **** 	prev_enc[motor] = cur_enc;
 1084              		.loc 1 216 0
 1085 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1086 00d4 40F20003 		movw	r3, #:lower16:prev_enc
 1087 00d8 C0F20003 		movt	r3, #:upper16:prev_enc
 1088 00dc B989     		ldrh	r1, [r7, #12]	@ movhi
 1089 00de 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 1090              	.LBB6:
 217:../src/motor.cpp **** 
 218:../src/motor.cpp **** 	if(motorEnable[motor]){
 1091              		.loc 1 218 0
 1092 00e2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1093 00e4 40F20003 		movw	r3, #:lower16:motorEnable
 1094 00e8 C0F20003 		movt	r3, #:upper16:motorEnable
 1095 00ec 9B5C     		ldrb	r3, [r3, r2]
 1096 00ee DBB2     		uxtb	r3, r3
 1097 00f0 002B     		cmp	r3, #0
 1098 00f2 00F01881 		beq	.L19
 1099              	.LBB7:
 219:../src/motor.cpp **** 		int32_t cte = (set_speed[motor] - cur_speed[motor]);
 1100              		.loc 1 219 0
 1101 00f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1102 00f8 40F20003 		movw	r3, #:lower16:set_speed
 1103 00fc C0F20003 		movt	r3, #:upper16:set_speed
 1104 0100 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1105 0104 1A46     		mov	r2, r3
 1106 0106 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1107 0108 40F20003 		movw	r3, #:lower16:cur_speed
 1108 010c C0F20003 		movt	r3, #:upper16:cur_speed
 1109 0110 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1110 0114 D31A     		subs	r3, r2, r3
 1111 0116 BB60     		str	r3, [r7, #8]
 220:../src/motor.cpp **** 		//uint8_t a = 0;
 221:../src/motor.cpp **** 		cte_int[motor] += cte;
 1112              		.loc 1 221 0
 1113 0118 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1114 011a F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1115 011c 40F20003 		movw	r3, #:lower16:cte_int
 1116 0120 C0F20003 		movt	r3, #:upper16:cte_int
 1117 0124 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1118 0128 1946     		mov	r1, r3
 1119 012a BB68     		ldr	r3, [r7, #8]
 1120 012c C918     		adds	r1, r1, r3
 1121 012e 40F20003 		movw	r3, #:lower16:cte_int
 1122 0132 C0F20003 		movt	r3, #:upper16:cte_int
 1123 0136 43F82210 		str	r1, [r3, r2, lsl #2]
 222:../src/motor.cpp **** 		motor_width[motor] = motorKp*cte +
 1124              		.loc 1 222 0
 1125 013a FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 223:../src/motor.cpp **** 								motorKd*(cte - cte_prev[motor])*PID_freq +
 224:../src/motor.cpp **** 								motorKi*cte_int[motor]/PID_freq;
 1126              		.loc 1 224 0
 1127 013c B868     		ldr	r0, [r7, #8]
 1128 013e FFF7FEFF 		bl	__aeabi_i2f
 1129 0142 0246     		mov	r2, r0
 1130 0144 40F20003 		movw	r3, #:lower16:motorKp
 1131 0148 C0F20003 		movt	r3, #:upper16:motorKp
 1132 014c 1B68     		ldr	r3, [r3, #0]	@ float
 1133 014e 1046     		mov	r0, r2
 1134 0150 1946     		mov	r1, r3
 1135 0152 FFF7FEFF 		bl	__aeabi_fmul
 1136 0156 0346     		mov	r3, r0
 1137 0158 1D46     		mov	r5, r3
 1138 015a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 223:../src/motor.cpp **** 								motorKd*(cte - cte_prev[motor])*PID_freq +
 1139              		.loc 1 223 0
 1140 015c 40F20003 		movw	r3, #:lower16:cte_prev
 1141 0160 C0F20003 		movt	r3, #:upper16:cte_prev
 1142 0164 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1143              		.loc 1 224 0
 1144 0168 BA68     		ldr	r2, [r7, #8]
 1145 016a D31A     		subs	r3, r2, r3
 1146 016c 1846     		mov	r0, r3
 1147 016e FFF7FEFF 		bl	__aeabi_i2f
 1148 0172 0246     		mov	r2, r0
 1149 0174 40F20003 		movw	r3, #:lower16:motorKd
 1150 0178 C0F20003 		movt	r3, #:upper16:motorKd
 1151 017c 1B68     		ldr	r3, [r3, #0]	@ float
 1152 017e 1046     		mov	r0, r2
 1153 0180 1946     		mov	r1, r3
 1154 0182 FFF7FEFF 		bl	__aeabi_fmul
 1155 0186 0346     		mov	r3, r0
 1156 0188 1846     		mov	r0, r3
 1157 018a 6949     		ldr	r1, .L32	@ float
 1158 018c FFF7FEFF 		bl	__aeabi_fmul
 1159 0190 0346     		mov	r3, r0
 1160 0192 2846     		mov	r0, r5
 1161 0194 1946     		mov	r1, r3
 1162 0196 FFF7FEFF 		bl	__aeabi_fadd
 1163 019a 0346     		mov	r3, r0
 1164 019c 1D46     		mov	r5, r3
 1165 019e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1166 01a0 40F20003 		movw	r3, #:lower16:cte_int
 1167 01a4 C0F20003 		movt	r3, #:upper16:cte_int
 1168 01a8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1169 01ac 1846     		mov	r0, r3
 1170 01ae FFF7FEFF 		bl	__aeabi_i2f
 1171 01b2 0246     		mov	r2, r0
 1172 01b4 40F20003 		movw	r3, #:lower16:motorKi
 1173 01b8 C0F20003 		movt	r3, #:upper16:motorKi
 1174 01bc 1B68     		ldr	r3, [r3, #0]	@ float
 1175 01be 1046     		mov	r0, r2
 1176 01c0 1946     		mov	r1, r3
 1177 01c2 FFF7FEFF 		bl	__aeabi_fmul
 1178 01c6 0346     		mov	r3, r0
 1179 01c8 1846     		mov	r0, r3
 1180 01ca 5949     		ldr	r1, .L32	@ float
 1181 01cc FFF7FEFF 		bl	__aeabi_fdiv
 1182 01d0 0346     		mov	r3, r0
 1183 01d2 2846     		mov	r0, r5
 1184 01d4 1946     		mov	r1, r3
 1185 01d6 FFF7FEFF 		bl	__aeabi_fadd
 1186 01da 0346     		mov	r3, r0
 1187 01dc 1846     		mov	r0, r3
 1188 01de FFF7FEFF 		bl	__aeabi_f2iz
 1189 01e2 0246     		mov	r2, r0
 1190 01e4 40F20003 		movw	r3, #:lower16:motor_width
 1191 01e8 C0F20003 		movt	r3, #:upper16:motor_width
 1192 01ec 43F82420 		str	r2, [r3, r4, lsl #2]
 225:../src/motor.cpp **** 		if(motor_width[motor] > MAX_WIDTH*0.9){
 1193              		.loc 1 225 0
 1194 01f0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1195 01f2 40F20003 		movw	r3, #:lower16:motor_width
 1196 01f6 C0F20003 		movt	r3, #:upper16:motor_width
 1197 01fa 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1198 01fe 1846     		mov	r0, r3
 1199 0200 FFF7FEFF 		bl	__aeabi_i2f
 1200 0204 0346     		mov	r3, r0
 1201 0206 4FF00102 		mov	r2, #1
 1202 020a 1446     		mov	r4, r2
 1203 020c 1846     		mov	r0, r3
 1204 020e 4949     		ldr	r1, .L32+4	@ float
 1205 0210 FFF7FEFF 		bl	__aeabi_fcmpgt
 1206 0214 0346     		mov	r3, r0
 1207 0216 002B     		cmp	r3, #0
 1208 0218 02D1     		bne	.L25
 1209 021a 4FF00003 		mov	r3, #0
 1210 021e 1C46     		mov	r4, r3
 1211              	.L25:
 1212 0220 E3B2     		uxtb	r3, r4
 1213 0222 002B     		cmp	r3, #0
 1214 0224 08D0     		beq	.L26
 226:../src/motor.cpp **** 			motor_width[motor] = MAX_WIDTH*0.9;
 1215              		.loc 1 226 0
 1216 0226 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1217 0228 40F20003 		movw	r3, #:lower16:motor_width
 1218 022c C0F20003 		movt	r3, #:upper16:motor_width
 1219 0230 4FF4A261 		mov	r1, #1296
 1220 0234 43F82210 		str	r1, [r3, r2, lsl #2]
 1221              	.L26:
 227:../src/motor.cpp **** 		}
 228:../src/motor.cpp **** 		if(motor_width[motor] < -MAX_WIDTH*0.9){
 1222              		.loc 1 228 0
 1223 0238 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1224 023a 40F20003 		movw	r3, #:lower16:motor_width
 1225 023e C0F20003 		movt	r3, #:upper16:motor_width
 1226 0242 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1227 0246 1846     		mov	r0, r3
 1228 0248 FFF7FEFF 		bl	__aeabi_i2f
 1229 024c 0346     		mov	r3, r0
 1230 024e 4FF00102 		mov	r2, #1
 1231 0252 1446     		mov	r4, r2
 1232 0254 1846     		mov	r0, r3
 1233 0256 3849     		ldr	r1, .L32+8	@ float
 1234 0258 FFF7FEFF 		bl	__aeabi_fcmplt
 1235 025c 0346     		mov	r3, r0
 1236 025e 002B     		cmp	r3, #0
 1237 0260 02D1     		bne	.L27
 1238 0262 4FF00003 		mov	r3, #0
 1239 0266 1C46     		mov	r4, r3
 1240              	.L27:
 1241 0268 E3B2     		uxtb	r3, r4
 1242 026a 002B     		cmp	r3, #0
 1243 026c 0AD0     		beq	.L28
 229:../src/motor.cpp **** 			motor_width[motor] = -MAX_WIDTH*0.9;
 1244              		.loc 1 229 0
 1245 026e F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 1246 0270 40F20003 		movw	r3, #:lower16:motor_width
 1247 0274 C0F20003 		movt	r3, #:upper16:motor_width
 1248 0278 4FF6F022 		movw	r2, #64240
 1249 027c CFF6FF72 		movt	r2, 65535
 1250 0280 43F82120 		str	r2, [r3, r1, lsl #2]
 1251              	.L28:
 230:../src/motor.cpp **** 		}
 231:../src/motor.cpp **** 		cte_prev[motor] = cte;
 1252              		.loc 1 231 0
 1253 0284 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1254 0286 40F20003 		movw	r3, #:lower16:cte_prev
 1255 028a C0F20003 		movt	r3, #:upper16:cte_prev
 1256 028e B968     		ldr	r1, [r7, #8]
 1257 0290 43F82210 		str	r1, [r3, r2, lsl #2]
 232:../src/motor.cpp **** 
 233:../src/motor.cpp **** 		uint16_t ccrVal;
 234:../src/motor.cpp **** 		if(motor_width[motor] < 0){
 1258              		.loc 1 234 0
 1259 0294 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1260 0296 40F20003 		movw	r3, #:lower16:motor_width
 1261 029a C0F20003 		movt	r3, #:upper16:motor_width
 1262 029e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1263 02a2 4FEAD373 		lsr	r3, r3, #31
 1264 02a6 DBB2     		uxtb	r3, r3
 1265 02a8 002B     		cmp	r3, #0
 1266 02aa 11D0     		beq	.L29
 235:../src/motor.cpp **** 			motorEnableCC(Backward, motor);
 1267              		.loc 1 235 0
 1268 02ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1269 02ae 4FF00100 		mov	r0, #1
 1270 02b2 1946     		mov	r1, r3
 1271 02b4 FFF7FEFF 		bl	_Z13motorEnableCC9Direction5Motor
 236:../src/motor.cpp **** 			ccrVal = -motor_width[motor];
 1272              		.loc 1 236 0
 1273 02b8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1274 02ba 40F20003 		movw	r3, #:lower16:motor_width
 1275 02be C0F20003 		movt	r3, #:upper16:motor_width
 1276 02c2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1277 02c6 9BB2     		uxth	r3, r3
 1278 02c8 C3F10003 		rsb	r3, r3, #0
 1279 02cc FB81     		strh	r3, [r7, #14]	@ movhi
 1280 02ce 0DE0     		b	.L30
 1281              	.L29:
 237:../src/motor.cpp **** 		}
 238:../src/motor.cpp **** 		else{
 239:../src/motor.cpp **** 			motorEnableCC(Forward, motor);
 1282              		.loc 1 239 0
 1283 02d0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1284 02d2 4FF00000 		mov	r0, #0
 1285 02d6 1946     		mov	r1, r3
 1286 02d8 FFF7FEFF 		bl	_Z13motorEnableCC9Direction5Motor
 240:../src/motor.cpp **** 			ccrVal = motor_width[motor];
 1287              		.loc 1 240 0
 1288 02dc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1289 02de 40F20003 		movw	r3, #:lower16:motor_width
 1290 02e2 C0F20003 		movt	r3, #:upper16:motor_width
 1291 02e6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1292 02ea FB81     		strh	r3, [r7, #14]	@ movhi
 1293              	.L30:
 241:../src/motor.cpp **** 		}
 242:../src/motor.cpp **** 		if(motor == Left){
 1294              		.loc 1 242 0
 1295 02ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1296 02ee 002B     		cmp	r3, #0
 1297 02f0 0CD1     		bne	.L31
 243:../src/motor.cpp **** 			TIM1->CCR1 = ccrVal;
 1298              		.loc 1 243 0
 1299 02f2 4FF43053 		mov	r3, #11264
 1300 02f6 C4F20103 		movt	r3, 16385
 1301 02fa FA89     		ldrh	r2, [r7, #14]	@ movhi
 1302 02fc 9A86     		strh	r2, [r3, #52]	@ movhi
 244:../src/motor.cpp **** 			TIM1->CCR2 = ccrVal;
 1303              		.loc 1 244 0
 1304 02fe 4FF43053 		mov	r3, #11264
 1305 0302 C4F20103 		movt	r3, 16385
 1306 0306 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1307 0308 1A87     		strh	r2, [r3, #56]	@ movhi
 1308 030a 0CE0     		b	.L19
 1309              	.L31:
 245:../src/motor.cpp **** 		}
 246:../src/motor.cpp **** 		else{
 247:../src/motor.cpp **** 			TIM1->CCR3 = ccrVal;
 1310              		.loc 1 247 0
 1311 030c 4FF43053 		mov	r3, #11264
 1312 0310 C4F20103 		movt	r3, 16385
 1313 0314 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1314 0316 9A87     		strh	r2, [r3, #60]	@ movhi
 248:../src/motor.cpp **** 			TIM1->CCR4 = ccrVal;
 1315              		.loc 1 248 0
 1316 0318 4FF43053 		mov	r3, #11264
 1317 031c C4F20103 		movt	r3, 16385
 1318 0320 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1319 0322 A3F84020 		strh	r2, [r3, #64]	@ movhi
 1320              	.L19:
 1321              	.LBE7:
 1322              	.LBE6:
 1323              	.LBE5:
 249:../src/motor.cpp **** 		}
 250:../src/motor.cpp **** 	}
 251:../src/motor.cpp **** }
 1324              		.loc 1 251 0
 1325 0326 07F11007 		add	r7, r7, #16
 1326 032a BD46     		mov	sp, r7
 1327 032c B0BD     		pop	{r4, r5, r7, pc}
 1328              	.L33:
 1329 032e 00BF     		.align	2
 1330              	.L32:
 1331 0330 00004842 		.word	1112014848
 1332 0334 0000A244 		.word	1151467520
 1333 0338 0000A2C4 		.word	-996016128
 1334              		.cfi_endproc
 1335              	.LFE39:
 1337              		.section	.text._Z12motorReadEnc5Motor,"ax",%progbits
 1338              		.align	2
 1339              		.global	_Z12motorReadEnc5Motor
 1340              		.thumb
 1341              		.thumb_func
 1343              	_Z12motorReadEnc5Motor:
 1344              	.LFB40:
 252:../src/motor.cpp **** 
 253:../src/motor.cpp **** 
 254:../src/motor.cpp **** uint16_t motorReadEnc(Motor motor){
 1345              		.loc 1 254 0
 1346              		.cfi_startproc
 1347              		@ args = 0, pretend = 0, frame = 8
 1348              		@ frame_needed = 1, uses_anonymous_args = 0
 1349 0000 80B5     		push	{r7, lr}
 1350              	.LCFI27:
 1351              		.cfi_def_cfa_offset 8
 1352              		.cfi_offset 14, -4
 1353              		.cfi_offset 7, -8
 1354 0002 82B0     		sub	sp, sp, #8
 1355              	.LCFI28:
 1356              		.cfi_def_cfa_offset 16
 1357 0004 00AF     		add	r7, sp, #0
 1358              	.LCFI29:
 1359              		.cfi_def_cfa_register 7
 1360 0006 0346     		mov	r3, r0
 1361 0008 FB71     		strb	r3, [r7, #7]
 255:../src/motor.cpp **** 	if(motor == Left){
 1362              		.loc 1 255 0
 1363 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1364 000c 002B     		cmp	r3, #0
 1365 000e 07D1     		bne	.L35
 256:../src/motor.cpp **** 		return TIM_GetCounter(TIM4);
 1366              		.loc 1 256 0
 1367 0010 4FF40060 		mov	r0, #2048
 1368 0014 C4F20000 		movt	r0, 16384
 1369 0018 FFF7FEFF 		bl	TIM_GetCounter
 1370 001c 0346     		mov	r3, r0
 1371 001e 06E0     		b	.L36
 1372              	.L35:
 257:../src/motor.cpp **** 	}
 258:../src/motor.cpp **** 	else{
 259:../src/motor.cpp **** 		return TIM_GetCounter(TIM3);
 1373              		.loc 1 259 0
 1374 0020 4FF48060 		mov	r0, #1024
 1375 0024 C4F20000 		movt	r0, 16384
 1376 0028 FFF7FEFF 		bl	TIM_GetCounter
 1377 002c 0346     		mov	r3, r0
 1378              	.L36:
 260:../src/motor.cpp **** 	}
 261:../src/motor.cpp **** }
 1379              		.loc 1 261 0
 1380 002e 1846     		mov	r0, r3
 1381 0030 07F10807 		add	r7, r7, #8
 1382 0034 BD46     		mov	sp, r7
 1383 0036 80BD     		pop	{r7, pc}
 1384              		.cfi_endproc
 1385              	.LFE40:
 1387              		.section	.text._Z12motorReadVel5Motor,"ax",%progbits
 1388              		.align	2
 1389              		.global	_Z12motorReadVel5Motor
 1390              		.thumb
 1391              		.thumb_func
 1393              	_Z12motorReadVel5Motor:
 1394              	.LFB41:
 262:../src/motor.cpp **** 
 263:../src/motor.cpp **** float motorReadVel(Motor motor){
 1395              		.loc 1 263 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 8
 1398              		@ frame_needed = 1, uses_anonymous_args = 0
 1399 0000 80B5     		push	{r7, lr}
 1400              	.LCFI30:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 14, -4
 1403              		.cfi_offset 7, -8
 1404 0002 82B0     		sub	sp, sp, #8
 1405              	.LCFI31:
 1406              		.cfi_def_cfa_offset 16
 1407 0004 00AF     		add	r7, sp, #0
 1408              	.LCFI32:
 1409              		.cfi_def_cfa_register 7
 1410 0006 0346     		mov	r3, r0
 1411 0008 FB71     		strb	r3, [r7, #7]
 264:../src/motor.cpp **** 	return cur_speed[motor];
 1412              		.loc 1 264 0
 1413 000a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1414 000c 40F20003 		movw	r3, #:lower16:cur_speed
 1415 0010 C0F20003 		movt	r3, #:upper16:cur_speed
 1416 0014 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1417 0018 1846     		mov	r0, r3
 1418 001a FFF7FEFF 		bl	__aeabi_i2f
 1419 001e 0346     		mov	r3, r0
 265:../src/motor.cpp **** }
 1420              		.loc 1 265 0
 1421 0020 1846     		mov	r0, r3
 1422 0022 07F10807 		add	r7, r7, #8
 1423 0026 BD46     		mov	sp, r7
 1424 0028 80BD     		pop	{r7, pc}
 1425              		.cfi_endproc
 1426              	.LFE41:
 1428 002a 00BF     		.section	.text._Z13motorReadDist5Motor,"ax",%progbits
 1429              		.align	2
 1430              		.global	_Z13motorReadDist5Motor
 1431              		.thumb
 1432              		.thumb_func
 1434              	_Z13motorReadDist5Motor:
 1435              	.LFB42:
 266:../src/motor.cpp **** 
 267:../src/motor.cpp **** float motorReadDist(Motor motor){
 1436              		.loc 1 267 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 8
 1439              		@ frame_needed = 1, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 1441 0000 80B4     		push	{r7}
 1442              	.LCFI33:
 1443              		.cfi_def_cfa_offset 4
 1444              		.cfi_offset 7, -4
 1445 0002 83B0     		sub	sp, sp, #12
 1446              	.LCFI34:
 1447              		.cfi_def_cfa_offset 16
 1448 0004 00AF     		add	r7, sp, #0
 1449              	.LCFI35:
 1450              		.cfi_def_cfa_register 7
 1451 0006 0346     		mov	r3, r0
 1452 0008 FB71     		strb	r3, [r7, #7]
 268:../src/motor.cpp **** 	return 0;
 1453              		.loc 1 268 0
 1454 000a 034B     		ldr	r3, .L39	@ float
 269:../src/motor.cpp **** }
 1455              		.loc 1 269 0
 1456 000c 1846     		mov	r0, r3
 1457 000e 07F10C07 		add	r7, r7, #12
 1458 0012 BD46     		mov	sp, r7
 1459 0014 80BC     		pop	{r7}
 1460 0016 7047     		bx	lr
 1461              	.L40:
 1462              		.align	2
 1463              	.L39:
 1464 0018 00000000 		.word	0
 1465              		.cfi_endproc
 1466              	.LFE42:
 1468              		.section	.text._Z14motorResetDist5Motor,"ax",%progbits
 1469              		.align	2
 1470              		.global	_Z14motorResetDist5Motor
 1471              		.thumb
 1472              		.thumb_func
 1474              	_Z14motorResetDist5Motor:
 1475              	.LFB43:
 270:../src/motor.cpp **** 
 271:../src/motor.cpp **** void motorResetDist(Motor motor){
 1476              		.loc 1 271 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 8
 1479              		@ frame_needed = 1, uses_anonymous_args = 0
 1480              		@ link register save eliminated.
 1481 0000 80B4     		push	{r7}
 1482              	.LCFI36:
 1483              		.cfi_def_cfa_offset 4
 1484              		.cfi_offset 7, -4
 1485 0002 83B0     		sub	sp, sp, #12
 1486              	.LCFI37:
 1487              		.cfi_def_cfa_offset 16
 1488 0004 00AF     		add	r7, sp, #0
 1489              	.LCFI38:
 1490              		.cfi_def_cfa_register 7
 1491 0006 0346     		mov	r3, r0
 1492 0008 FB71     		strb	r3, [r7, #7]
 272:../src/motor.cpp **** 
 273:../src/motor.cpp **** }
 1493              		.loc 1 273 0
 1494 000a 07F10C07 		add	r7, r7, #12
 1495 000e BD46     		mov	sp, r7
 1496 0010 80BC     		pop	{r7}
 1497 0012 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE43:
 1501              		.section	.text._Z13motorEnableCC9Direction5Motor,"ax",%progbits
 1502              		.align	2
 1503              		.global	_Z13motorEnableCC9Direction5Motor
 1504              		.thumb
 1505              		.thumb_func
 1507              	_Z13motorEnableCC9Direction5Motor:
 1508              	.LFB44:
 274:../src/motor.cpp **** 
 275:../src/motor.cpp **** /**
 276:../src/motor.cpp ****  * Left fwd: OC1, bckwd: OC2N
 277:../src/motor.cpp ****  * Right fwd: OC4, bckwd: OC3N
 278:../src/motor.cpp ****  */
 279:../src/motor.cpp **** 
 280:../src/motor.cpp **** void motorEnableCC(Direction dir, Motor motor){
 1509              		.loc 1 280 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 16
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
 1514 0000 80B4     		push	{r7}
 1515              	.LCFI39:
 1516              		.cfi_def_cfa_offset 4
 1517              		.cfi_offset 7, -4
 1518 0002 85B0     		sub	sp, sp, #20
 1519              	.LCFI40:
 1520              		.cfi_def_cfa_offset 24
 1521 0004 00AF     		add	r7, sp, #0
 1522              	.LCFI41:
 1523              		.cfi_def_cfa_register 7
 1524 0006 0246     		mov	r2, r0
 1525 0008 0B46     		mov	r3, r1
 1526 000a FA71     		strb	r2, [r7, #7]
 1527 000c BB71     		strb	r3, [r7, #6]
 1528              	.LBB8:
 1529              	.LBB9:
 281:../src/motor.cpp **** 
 282:../src/motor.cpp **** 	if(dir == Forward && motor == Left){
 1530              		.loc 1 282 0
 1531 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1532 0010 002B     		cmp	r3, #0
 1533 0012 17D1     		bne	.L43
 1534              		.loc 1 282 0 is_stmt 0 discriminator 1
 1535 0014 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1536 0016 002B     		cmp	r3, #0
 1537 0018 14D1     		bne	.L43
 1538              	.LBB10:
 283:../src/motor.cpp **** 		uint16_t tmpccer = TIM1->CCER;
 1539              		.loc 1 283 0 is_stmt 1
 1540 001a 4FF43053 		mov	r3, #11264
 1541 001e C4F20103 		movt	r3, 16385
 1542 0022 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1543 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 284:../src/motor.cpp **** 		tmpccer &= ~(TIM_CCER_CC2NE);
 1544              		.loc 1 284 0
 1545 0026 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1546 0028 23F04003 		bic	r3, r3, #64
 1547 002c FB81     		strh	r3, [r7, #14]	@ movhi
 285:../src/motor.cpp **** 		tmpccer |= TIM_CCER_CC1E;
 1548              		.loc 1 285 0
 1549 002e FB89     		ldrh	r3, [r7, #14]	@ movhi
 1550 0030 43F00103 		orr	r3, r3, #1
 1551 0034 FB81     		strh	r3, [r7, #14]	@ movhi
 286:../src/motor.cpp **** 		TIM1->CCER = tmpccer;
 1552              		.loc 1 286 0
 1553 0036 4FF43053 		mov	r3, #11264
 1554 003a C4F20103 		movt	r3, 16385
 1555 003e FA89     		ldrh	r2, [r7, #14]	@ movhi
 1556 0040 1A84     		strh	r2, [r3, #32]	@ movhi
 1557              	.LBE10:
 1558 0042 4FE0     		b	.L42
 1559              	.L43:
 1560              	.LBB11:
 1561              	.LBB12:
 287:../src/motor.cpp **** 	}
 288:../src/motor.cpp **** 	else if(dir == Backward && motor == Left){
 1562              		.loc 1 288 0
 1563 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1564 0046 012B     		cmp	r3, #1
 1565 0048 17D1     		bne	.L45
 1566              		.loc 1 288 0 is_stmt 0 discriminator 1
 1567 004a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1568 004c 002B     		cmp	r3, #0
 1569 004e 14D1     		bne	.L45
 1570              	.LBB13:
 289:../src/motor.cpp **** 		uint16_t tmpccer = TIM1->CCER;
 1571              		.loc 1 289 0 is_stmt 1
 1572 0050 4FF43053 		mov	r3, #11264
 1573 0054 C4F20103 		movt	r3, 16385
 1574 0058 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1575 005a BB81     		strh	r3, [r7, #12]	@ movhi
 290:../src/motor.cpp **** 		tmpccer &= ~(TIM_CCER_CC1E);
 1576              		.loc 1 290 0
 1577 005c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1578 005e 23F00103 		bic	r3, r3, #1
 1579 0062 BB81     		strh	r3, [r7, #12]	@ movhi
 291:../src/motor.cpp **** 		tmpccer |= TIM_CCER_CC2NE;
 1580              		.loc 1 291 0
 1581 0064 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1582 0066 43F04003 		orr	r3, r3, #64
 1583 006a BB81     		strh	r3, [r7, #12]	@ movhi
 292:../src/motor.cpp **** 		TIM1->CCER = tmpccer;
 1584              		.loc 1 292 0
 1585 006c 4FF43053 		mov	r3, #11264
 1586 0070 C4F20103 		movt	r3, 16385
 1587 0074 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1588 0076 1A84     		strh	r2, [r3, #32]	@ movhi
 1589              	.LBE13:
 1590 0078 34E0     		b	.L42
 1591              	.L45:
 1592              	.LBB14:
 1593              	.LBB15:
 293:../src/motor.cpp **** 	}
 294:../src/motor.cpp **** 	else if(dir == Forward && motor == Right){
 1594              		.loc 1 294 0
 1595 007a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1596 007c 002B     		cmp	r3, #0
 1597 007e 17D1     		bne	.L46
 1598              		.loc 1 294 0 is_stmt 0 discriminator 1
 1599 0080 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1600 0082 012B     		cmp	r3, #1
 1601 0084 14D1     		bne	.L46
 1602              	.LBB16:
 295:../src/motor.cpp **** 		uint16_t tmpccer = TIM1->CCER;
 1603              		.loc 1 295 0 is_stmt 1
 1604 0086 4FF43053 		mov	r3, #11264
 1605 008a C4F20103 		movt	r3, 16385
 1606 008e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1607 0090 7B81     		strh	r3, [r7, #10]	@ movhi
 296:../src/motor.cpp **** 		tmpccer &= ~(TIM_CCER_CC3NE);
 1608              		.loc 1 296 0
 1609 0092 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1610 0094 23F48063 		bic	r3, r3, #1024
 1611 0098 7B81     		strh	r3, [r7, #10]	@ movhi
 297:../src/motor.cpp **** 		tmpccer |= TIM_CCER_CC4E;
 1612              		.loc 1 297 0
 1613 009a 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1614 009c 43F48053 		orr	r3, r3, #4096
 1615 00a0 7B81     		strh	r3, [r7, #10]	@ movhi
 298:../src/motor.cpp **** 		TIM1->CCER = tmpccer;
 1616              		.loc 1 298 0
 1617 00a2 4FF43053 		mov	r3, #11264
 1618 00a6 C4F20103 		movt	r3, 16385
 1619 00aa 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1620 00ac 1A84     		strh	r2, [r3, #32]	@ movhi
 1621              	.LBE16:
 1622 00ae 19E0     		b	.L42
 1623              	.L46:
 1624              	.LBB17:
 1625              	.LBB18:
 299:../src/motor.cpp **** 	}
 300:../src/motor.cpp **** 	else if(dir == Backward && motor == Right){
 1626              		.loc 1 300 0
 1627 00b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1628 00b2 012B     		cmp	r3, #1
 1629 00b4 16D1     		bne	.L42
 1630              		.loc 1 300 0 is_stmt 0 discriminator 1
 1631 00b6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1632 00b8 012B     		cmp	r3, #1
 1633 00ba 13D1     		bne	.L42
 1634              	.LBB19:
 301:../src/motor.cpp **** 		uint16_t tmpccer = TIM1->CCER;
 1635              		.loc 1 301 0 is_stmt 1
 1636 00bc 4FF43053 		mov	r3, #11264
 1637 00c0 C4F20103 		movt	r3, 16385
 1638 00c4 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1639 00c6 3B81     		strh	r3, [r7, #8]	@ movhi
 302:../src/motor.cpp **** 		tmpccer &= ~(TIM_CCER_CC4E);
 1640              		.loc 1 302 0
 1641 00c8 3B89     		ldrh	r3, [r7, #8]	@ movhi
 1642 00ca 23F48053 		bic	r3, r3, #4096
 1643 00ce 3B81     		strh	r3, [r7, #8]	@ movhi
 303:../src/motor.cpp **** 		tmpccer |= TIM_CCER_CC3NE;
 1644              		.loc 1 303 0
 1645 00d0 3B89     		ldrh	r3, [r7, #8]	@ movhi
 1646 00d2 43F48063 		orr	r3, r3, #1024
 1647 00d6 3B81     		strh	r3, [r7, #8]	@ movhi
 304:../src/motor.cpp **** 		TIM1->CCER = tmpccer;
 1648              		.loc 1 304 0
 1649 00d8 4FF43053 		mov	r3, #11264
 1650 00dc C4F20103 		movt	r3, 16385
 1651 00e0 3A89     		ldrh	r2, [r7, #8]	@ movhi
 1652 00e2 1A84     		strh	r2, [r3, #32]	@ movhi
 1653              	.L42:
 1654              	.LBE19:
 1655              	.LBE18:
 1656              	.LBE17:
 1657              	.LBE15:
 1658              	.LBE14:
 1659              	.LBE12:
 1660              	.LBE11:
 1661              	.LBE9:
 1662              	.LBE8:
 305:../src/motor.cpp **** 	}
 306:../src/motor.cpp **** }
 1663              		.loc 1 306 0
 1664 00e4 07F11407 		add	r7, r7, #20
 1665 00e8 BD46     		mov	sp, r7
 1666 00ea 80BC     		pop	{r7}
 1667 00ec 7047     		bx	lr
 1668              		.cfi_endproc
 1669              	.LFE44:
 1671 00ee 00BF     		.section	.text.TIM3_IRQHandler,"ax",%progbits
 1672              		.align	2
 1673              		.global	TIM3_IRQHandler
 1674              		.thumb
 1675              		.thumb_func
 1677              	TIM3_IRQHandler:
 1678              	.LFB45:
 307:../src/motor.cpp **** 
 308:../src/motor.cpp **** extern "C" {
 309:../src/motor.cpp **** 
 310:../src/motor.cpp **** void TIM3_IRQHandler(void){
 1679              		.loc 1 310 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 0
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683 0000 80B5     		push	{r7, lr}
 1684              	.LCFI42:
 1685              		.cfi_def_cfa_offset 8
 1686              		.cfi_offset 14, -4
 1687              		.cfi_offset 7, -8
 1688 0002 00AF     		add	r7, sp, #0
 1689              	.LCFI43:
 1690              		.cfi_def_cfa_register 7
 311:../src/motor.cpp **** 	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 1691              		.loc 1 311 0
 1692 0004 4FF48060 		mov	r0, #1024
 1693 0008 C4F20000 		movt	r0, 16384
 1694 000c 4FF00101 		mov	r1, #1
 1695 0010 FFF7FEFF 		bl	TIM_ClearITPendingBit
 312:../src/motor.cpp **** 	motorUpdate[Motor::Right] = true;
 1696              		.loc 1 312 0
 1697 0014 40F20003 		movw	r3, #:lower16:motorUpdate
 1698 0018 C0F20003 		movt	r3, #:upper16:motorUpdate
 1699 001c 4FF00102 		mov	r2, #1
 1700 0020 5A70     		strb	r2, [r3, #1]
 313:../src/motor.cpp **** }
 1701              		.loc 1 313 0
 1702 0022 80BD     		pop	{r7, pc}
 1703              		.cfi_endproc
 1704              	.LFE45:
 1706              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 1707              		.align	2
 1708              		.global	TIM4_IRQHandler
 1709              		.thumb
 1710              		.thumb_func
 1712              	TIM4_IRQHandler:
 1713              	.LFB46:
 314:../src/motor.cpp **** 
 315:../src/motor.cpp **** void TIM4_IRQHandler(void){
 1714              		.loc 1 315 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 1, uses_anonymous_args = 0
 1718 0000 80B5     		push	{r7, lr}
 1719              	.LCFI44:
 1720              		.cfi_def_cfa_offset 8
 1721              		.cfi_offset 14, -4
 1722              		.cfi_offset 7, -8
 1723 0002 00AF     		add	r7, sp, #0
 1724              	.LCFI45:
 1725              		.cfi_def_cfa_register 7
 316:../src/motor.cpp **** 	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 1726              		.loc 1 316 0
 1727 0004 4FF40060 		mov	r0, #2048
 1728 0008 C4F20000 		movt	r0, 16384
 1729 000c 4FF00101 		mov	r1, #1
 1730 0010 FFF7FEFF 		bl	TIM_ClearITPendingBit
 317:../src/motor.cpp **** 	motorUpdate[Motor::Left] = true;
 1731              		.loc 1 317 0
 1732 0014 40F20003 		movw	r3, #:lower16:motorUpdate
 1733 0018 C0F20003 		movt	r3, #:upper16:motorUpdate
 1734 001c 4FF00102 		mov	r2, #1
 1735 0020 1A70     		strb	r2, [r3, #0]
 318:../src/motor.cpp **** }
 1736              		.loc 1 318 0
 1737 0022 80BD     		pop	{r7, pc}
 1738              		.cfi_endproc
 1739              	.LFE46:
 1741              		.text
 1742              	.Letext0:
 1743              		.file 2 "/home/jachu/elektronika/STM32/gcc-arm-none-eabi-4_6-2012q4/bin/../lib/gcc/arm-none-eabi/4
 1744              		.file 3 "/home/jachu/workspaceSTM/Sumo_STM/src/stm32f10x.h"
 1745              		.file 4 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 1746              		.file 5 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 1747              		.file 6 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/STM32F10x_StdPerip
 1748              		.file 7 "../src/motor.h"
 1749              		.file 8 "/home/jachu/elektronika/STM32/STM32F10x_StdPeriph_Lib_V3.5.0/Libraries/CMSIS/CM3/CoreSupp
DEFINED SYMBOLS
                            *ABS*:00000000 motor.cpp
     /tmp/ccqDCQP8.s:23     .bss.cte_int:00000000 cte_int
     /tmp/ccqDCQP8.s:20     .bss.cte_int:00000000 $d
     /tmp/ccqDCQP8.s:30     .bss.cte_prev:00000000 cte_prev
     /tmp/ccqDCQP8.s:27     .bss.cte_prev:00000000 $d
     /tmp/ccqDCQP8.s:37     .bss.motorKp:00000000 motorKp
     /tmp/ccqDCQP8.s:34     .bss.motorKp:00000000 $d
     /tmp/ccqDCQP8.s:44     .bss.motorKi:00000000 motorKi
     /tmp/ccqDCQP8.s:41     .bss.motorKi:00000000 $d
     /tmp/ccqDCQP8.s:51     .bss.motorKd:00000000 motorKd
     /tmp/ccqDCQP8.s:48     .bss.motorKd:00000000 $d
     /tmp/ccqDCQP8.s:58     .data.cpr:00000000 cpr
     /tmp/ccqDCQP8.s:55     .data.cpr:00000000 $d
     /tmp/ccqDCQP8.s:65     .bss.motor_width:00000000 motor_width
     /tmp/ccqDCQP8.s:62     .bss.motor_width:00000000 $d
     /tmp/ccqDCQP8.s:72     .bss.prev_enc:00000000 prev_enc
     /tmp/ccqDCQP8.s:69     .bss.prev_enc:00000000 $d
     /tmp/ccqDCQP8.s:79     .bss.cur_speed:00000000 cur_speed
     /tmp/ccqDCQP8.s:76     .bss.cur_speed:00000000 $d
     /tmp/ccqDCQP8.s:86     .bss.cur_pos:00000000 cur_pos
     /tmp/ccqDCQP8.s:83     .bss.cur_pos:00000000 $d
     /tmp/ccqDCQP8.s:93     .bss.set_speed:00000000 set_speed
     /tmp/ccqDCQP8.s:90     .bss.set_speed:00000000 $d
     /tmp/ccqDCQP8.s:100    .bss.set_pos:00000000 set_pos
     /tmp/ccqDCQP8.s:97     .bss.set_pos:00000000 $d
     /tmp/ccqDCQP8.s:107    .bss.motorUpdate:00000000 motorUpdate
     /tmp/ccqDCQP8.s:104    .bss.motorUpdate:00000000 $d
     /tmp/ccqDCQP8.s:114    .bss.motorEnable:00000000 motorEnable
     /tmp/ccqDCQP8.s:111    .bss.motorEnable:00000000 $d
     /tmp/ccqDCQP8.s:117    .text._Z9motorInitfffm:00000000 $t
     /tmp/ccqDCQP8.s:122    .text._Z9motorInitfffm:00000000 _Z9motorInitfffm
     /tmp/ccqDCQP8.s:577    .text._Z9motorInitfffm:000004a8 $d
     /tmp/ccqDCQP8.s:582    .text._Z11motorRunVel5Motor:00000000 $t
     /tmp/ccqDCQP8.s:587    .text._Z11motorRunVel5Motor:00000000 _Z11motorRunVel5Motor
     /tmp/ccqDCQP8.s:639    .text._Z11motorRunPos5Motor:00000000 $t
     /tmp/ccqDCQP8.s:644    .text._Z11motorRunPos5Motor:00000000 _Z11motorRunPos5Motor
     /tmp/ccqDCQP8.s:672    .text._Z9motorStop5Motor:00000000 $t
     /tmp/ccqDCQP8.s:677    .text._Z9motorStop5Motor:00000000 _Z9motorStop5Motor
     /tmp/ccqDCQP8.s:711    .text._Z13motorShutdown5Motor:00000000 $t
     /tmp/ccqDCQP8.s:716    .text._Z13motorShutdown5Motor:00000000 _Z13motorShutdown5Motor
     /tmp/ccqDCQP8.s:817    .text._Z13motorShutdown5Motor:000000d0 $d
     /tmp/ccqDCQP8.s:826    .text._Z11motorSetVelf5Motor:00000000 $t
     /tmp/ccqDCQP8.s:831    .text._Z11motorSetVelf5Motor:00000000 _Z11motorSetVelf5Motor
     /tmp/ccqDCQP8.s:881    .text._Z11motorSetVelf5Motor:00000050 $d
     /tmp/ccqDCQP8.s:886    .text._Z11motorSetPosf5Motor:00000000 $t
     /tmp/ccqDCQP8.s:891    .text._Z11motorSetPosf5Motor:00000000 _Z11motorSetPosf5Motor
     /tmp/ccqDCQP8.s:926    .text._Z11motorSetPidfff:00000000 $t
     /tmp/ccqDCQP8.s:931    .text._Z11motorSetPidfff:00000000 _Z11motorSetPidfff
     /tmp/ccqDCQP8.s:976    .text._Z8motorPID5Motor:00000000 $t
     /tmp/ccqDCQP8.s:981    .text._Z8motorPID5Motor:00000000 _Z8motorPID5Motor
     /tmp/ccqDCQP8.s:1343   .text._Z12motorReadEnc5Motor:00000000 _Z12motorReadEnc5Motor
     /tmp/ccqDCQP8.s:1507   .text._Z13motorEnableCC9Direction5Motor:00000000 _Z13motorEnableCC9Direction5Motor
     /tmp/ccqDCQP8.s:1331   .text._Z8motorPID5Motor:00000330 $d
     /tmp/ccqDCQP8.s:1338   .text._Z12motorReadEnc5Motor:00000000 $t
     /tmp/ccqDCQP8.s:1388   .text._Z12motorReadVel5Motor:00000000 $t
     /tmp/ccqDCQP8.s:1393   .text._Z12motorReadVel5Motor:00000000 _Z12motorReadVel5Motor
     /tmp/ccqDCQP8.s:1429   .text._Z13motorReadDist5Motor:00000000 $t
     /tmp/ccqDCQP8.s:1434   .text._Z13motorReadDist5Motor:00000000 _Z13motorReadDist5Motor
     /tmp/ccqDCQP8.s:1464   .text._Z13motorReadDist5Motor:00000018 $d
     /tmp/ccqDCQP8.s:1469   .text._Z14motorResetDist5Motor:00000000 $t
     /tmp/ccqDCQP8.s:1474   .text._Z14motorResetDist5Motor:00000000 _Z14motorResetDist5Motor
     /tmp/ccqDCQP8.s:1502   .text._Z13motorEnableCC9Direction5Motor:00000000 $t
     /tmp/ccqDCQP8.s:1672   .text.TIM3_IRQHandler:00000000 $t
     /tmp/ccqDCQP8.s:1677   .text.TIM3_IRQHandler:00000000 TIM3_IRQHandler
     /tmp/ccqDCQP8.s:1707   .text.TIM4_IRQHandler:00000000 $t
     /tmp/ccqDCQP8.s:1712   .text.TIM4_IRQHandler:00000000 TIM4_IRQHandler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
GPIO_Init
RCC_APB1PeriphClockCmd
TIM_ICInit
TIM_EncoderInterfaceConfig
TIM_SetAutoreload
TIM_SetCounter
TIM_ITConfig
NVIC_Init
TIM_Cmd
GPIO_PinRemapConfig
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_CtrlPWMOutputs
TIM_ARRPreloadConfig
__aeabi_i2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_f2iz
__aeabi_fadd
__aeabi_fcmpgt
__aeabi_fcmplt
TIM_GetCounter
TIM_ClearITPendingBit
