
Sumo_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  0800010c  0800010c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000002c  20000000  08007108  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss.adcBuffer 00000320  2000002c  08007134  0001002c  2**2
                  ALLOC
  4 .bss.curMean  00000004  2000034c  08007454  0001002c  2**2
                  ALLOC
  5 .bss.emfMean  00000004  20000350  08007458  0001002c  2**2
                  ALLOC
  6 .bss.motVMean 00000004  20000354  0800745c  0001002c  2**2
                  ALLOC
  7 .bss.LcdCache 00000400  20000358  08007460  0001002c  2**2
                  ALLOC
  8 .bss.LcdCacheIdx 00000004  20000758  08007860  0001002c  2**2
                  ALLOC
  9 .bss.LoWaterMark 00000004  2000075c  08007864  0001002c  2**2
                  ALLOC
 10 .bss.HiWaterMark 00000004  20000760  08007868  0001002c  2**2
                  ALLOC
 11 .bss.UpdateLcd 00000001  20000764  0800786c  0001002c  2**0
                  ALLOC
 12 .bss.PageAddress 00000001  20000765  0800786d  0001002c  2**0
                  ALLOC
 13 .bss.cte_int  00000008  20000768  08007870  0001002c  2**2
                  ALLOC
 14 .bss.cte_prev 00000008  20000770  08007878  0001002c  2**2
                  ALLOC
 15 .bss.motorKp  00000004  20000778  08007880  0001002c  2**2
                  ALLOC
 16 .bss.motorKi  00000004  2000077c  08007884  0001002c  2**2
                  ALLOC
 17 .bss.motorKd  00000004  20000780  08007888  0001002c  2**2
                  ALLOC
 18 .bss.motor_width 00000008  20000784  0800788c  0001002c  2**2
                  ALLOC
 19 .bss.prev_enc 00000004  2000078c  08007894  0001002c  2**2
                  ALLOC
 20 .bss.cur_speed 00000008  20000790  08007898  0001002c  2**2
                  ALLOC
 21 .bss.cur_pos  00000008  20000798  080078a0  0001002c  2**2
                  ALLOC
 22 .bss.set_speed 00000008  200007a0  080078a8  0001002c  2**2
                  ALLOC
 23 .bss.set_pos  00000008  200007a8  080078b0  0001002c  2**2
                  ALLOC
 24 .bss.motorUpdate 00000004  200007b0  080078b8  0001002c  2**2
                  ALLOC
 25 .bss.motorEnable 00000004  200007b4  080078bc  0001002c  2**2
                  ALLOC
 26 .bss.del      00000004  200007b8  080078c0  0001002c  2**2
                  ALLOC
 27 .bss.lcdEnable 00000001  200007bc  080078c4  0001002c  2**0
                  ALLOC
 28 .bss._ZZ15SysTick_HandlerE3cnt 00000002  200007be  080078c6  0001002c  2**1
                  ALLOC
 29 ._usrstack    00000100  200007c0  080078c8  0001002c  2**0
                  ALLOC
 30 .comment      00000070  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
 31 .ARM.attributes 00000031  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
 32 .debug_aranges 00000450  00000000  00000000  000100d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 33 .debug_info   00009c2a  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY, DEBUGGING
 34 .debug_abbrev 00001abd  00000000  00000000  0001a14a  2**0
                  CONTENTS, READONLY, DEBUGGING
 35 .debug_line   00005ed4  00000000  00000000  0001bc07  2**0
                  CONTENTS, READONLY, DEBUGGING
 36 .debug_frame  00002560  00000000  00000000  00021adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 37 .debug_str    00003467  00000000  00000000  0002403c  2**0
                  CONTENTS, READONLY, DEBUGGING
 38 .debug_loc    000044e4  00000000  00000000  000274a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 39 .debug_macinfo 005562ac  00000000  00000000  0002b987  2**0
                  CONTENTS, READONLY, DEBUGGING
 40 .debug_ranges 00000298  00000000  00000000  00581c38  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800010c:	b480      	push	{r7}
 800010e:	b083      	sub	sp, #12
 8000110:	af00      	add	r7, sp, #0
 8000112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000114:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000118:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800011c:	687a      	ldr	r2, [r7, #4]
 800011e:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8000122:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000126:	60da      	str	r2, [r3, #12]
}
 8000128:	f107 070c 	add.w	r7, r7, #12
 800012c:	46bd      	mov	sp, r7
 800012e:	bc80      	pop	{r7}
 8000130:	4770      	bx	lr
 8000132:	bf00      	nop

08000134 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000134:	b480      	push	{r7}
 8000136:	b087      	sub	sp, #28
 8000138:	af00      	add	r7, sp, #0
 800013a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800013c:	f04f 0300 	mov.w	r3, #0
 8000140:	617b      	str	r3, [r7, #20]
 8000142:	f04f 0300 	mov.w	r3, #0
 8000146:	613b      	str	r3, [r7, #16]
 8000148:	f04f 030f 	mov.w	r3, #15
 800014c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800014e:	687b      	ldr	r3, [r7, #4]
 8000150:	78db      	ldrb	r3, [r3, #3]
 8000152:	2b00      	cmp	r3, #0
 8000154:	d047      	beq.n	80001e6 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000156:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800015a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	ea6f 0303 	mvn.w	r3, r3
 8000164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000168:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800016c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800016e:	697b      	ldr	r3, [r7, #20]
 8000170:	f1c3 0304 	rsb	r3, r3, #4
 8000174:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	68fa      	ldr	r2, [r7, #12]
 800017a:	fa22 f303 	lsr.w	r3, r2, r3
 800017e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	785b      	ldrb	r3, [r3, #1]
 8000184:	461a      	mov	r2, r3
 8000186:	693b      	ldr	r3, [r7, #16]
 8000188:	fa02 f303 	lsl.w	r3, r2, r3
 800018c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	789b      	ldrb	r3, [r3, #2]
 8000192:	461a      	mov	r2, r3
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4013      	ands	r3, r2
 8000198:	697a      	ldr	r2, [r7, #20]
 800019a:	4313      	orrs	r3, r2
 800019c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800019e:	697b      	ldr	r3, [r7, #20]
 80001a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80001a4:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001a6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	7812      	ldrb	r2, [r2, #0]
 80001b2:	4611      	mov	r1, r2
 80001b4:	697a      	ldr	r2, [r7, #20]
 80001b6:	b2d2      	uxtb	r2, r2
 80001b8:	185b      	adds	r3, r3, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	7812      	ldrb	r2, [r2, #0]
 80001ca:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80001ce:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001d0:	6879      	ldr	r1, [r7, #4]
 80001d2:	7809      	ldrb	r1, [r1, #0]
 80001d4:	f001 011f 	and.w	r1, r1, #31
 80001d8:	f04f 0001 	mov.w	r0, #1
 80001dc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80001e4:	e014      	b.n	8000210 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	7812      	ldrb	r2, [r2, #0]
 80001f2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80001f6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f8:	6879      	ldr	r1, [r7, #4]
 80001fa:	7809      	ldrb	r1, [r1, #0]
 80001fc:	f001 011f 	and.w	r1, r1, #31
 8000200:	f04f 0001 	mov.w	r0, #1
 8000204:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000208:	f102 0220 	add.w	r2, r2, #32
 800020c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000210:	f107 071c 	add.w	r7, r7, #28
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop

0800021c <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000226:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800022a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000234:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	430a      	orrs	r2, r1
 800023c:	609a      	str	r2, [r3, #8]
}
 800023e:	f107 070c 	add.w	r7, r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4602      	mov	r2, r0
 8000250:	460b      	mov	r3, r1
 8000252:	71fa      	strb	r2, [r7, #7]
 8000254:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000256:	79bb      	ldrb	r3, [r7, #6]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00d      	beq.n	8000278 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
 800025c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000260:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000264:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000268:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800026c:	6912      	ldr	r2, [r2, #16]
 800026e:	4611      	mov	r1, r2
 8000270:	79fa      	ldrb	r2, [r7, #7]
 8000272:	430a      	orrs	r2, r1
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	e00e      	b.n	8000296 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000278:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800027c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000280:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000284:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000288:	6912      	ldr	r2, [r2, #16]
 800028a:	4611      	mov	r1, r2
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	ea6f 0202 	mvn.w	r2, r2
 8000292:	400a      	ands	r2, r1
 8000294:	611a      	str	r2, [r3, #16]
  }
}
 8000296:	f107 070c 	add.w	r7, r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b04      	cmp	r3, #4
 80002ac:	d10c      	bne.n	80002c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80002ae:	f24e 0310 	movw	r3, #57360	; 0xe010
 80002b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80002b6:	f24e 0210 	movw	r2, #57360	; 0xe010
 80002ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80002be:	6812      	ldr	r2, [r2, #0]
 80002c0:	f042 0204 	orr.w	r2, r2, #4
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	e00b      	b.n	80002e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80002c8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80002cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80002d0:	f24e 0210 	movw	r2, #57360	; 0xe010
 80002d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	f022 0204 	bic.w	r2, r2, #4
 80002de:	601a      	str	r2, [r3, #0]
  }
}
 80002e0:	f107 070c 	add.w	r7, r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop

080002ec <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80002fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80002fe:	429a      	cmp	r2, r3
 8000300:	d10c      	bne.n	800031c <ADC_DeInit+0x30>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000306:	f04f 0101 	mov.w	r1, #1
 800030a:	f001 ff6f 	bl	80021ec <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 800030e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000312:	f04f 0100 	mov.w	r1, #0
 8000316:	f001 ff69 	bl	80021ec <RCC_APB2PeriphResetCmd>
 800031a:	e026      	b.n	800036a <ADC_DeInit+0x7e>
  }
  else if (ADCx == ADC2)
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000322:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000326:	429a      	cmp	r2, r3
 8000328:	d10c      	bne.n	8000344 <ADC_DeInit+0x58>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 800032a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800032e:	f04f 0101 	mov.w	r1, #1
 8000332:	f001 ff5b 	bl	80021ec <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 8000336:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800033a:	f04f 0100 	mov.w	r1, #0
 800033e:	f001 ff55 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8000342:	e012      	b.n	800036a <ADC_DeInit+0x7e>
  }
  else
  {
    if (ADCx == ADC3)
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800034a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800034e:	429a      	cmp	r2, r3
 8000350:	d10b      	bne.n	800036a <ADC_DeInit+0x7e>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8000352:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000356:	f04f 0101 	mov.w	r1, #1
 800035a:	f001 ff47 	bl	80021ec <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800035e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000362:	f04f 0100 	mov.w	r1, #0
 8000366:	f001 ff41 	bl	80021ec <RCC_APB2PeriphResetCmd>
    }
  }
}
 800036a:	f107 0708 	add.w	r7, r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop

08000374 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800037e:	f04f 0300 	mov.w	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000384:	f04f 0300 	mov.w	r3, #0
 8000388:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800039a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80003a8:	4313      	orrs	r3, r2
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 80003c2:	f6cf 73f1 	movt	r3, #65521	; 0xfff1
 80003c6:	4013      	ands	r3, r2
 80003c8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80003dc:	4313      	orrs	r3, r2
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003f6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	7c1b      	ldrb	r3, [r3, #16]
 80003fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8000400:	b2da      	uxtb	r2, r3
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	4313      	orrs	r3, r2
 8000406:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000408:	7afb      	ldrb	r3, [r7, #11]
 800040a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800041a:	f107 0714 	add.w	r7, r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f04f 0200 	mov.w	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f04f 0200 	mov.w	r2, #0
 800043a:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f04f 0200 	mov.w	r2, #0
 8000442:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f04f 0200 	mov.w	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f04f 0200 	mov.w	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f04f 0201 	mov.w	r2, #1
 800045a:	741a      	strb	r2, [r3, #16]
}
 800045c:	f107 070c 	add.w	r7, r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000474:	78fb      	ldrb	r3, [r7, #3]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d006      	beq.n	8000488 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	f043 0201 	orr.w	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	e005      	b.n	8000494 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	f023 0201 	bic.w	r2, r3, #1
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	609a      	str	r2, [r3, #8]
  }
}
 8000494:	f107 070c 	add.w	r7, r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004ac:	78fb      	ldrb	r3, [r7, #3]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d006      	beq.n	80004c0 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	e005      	b.n	80004cc <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	609a      	str	r2, [r3, #8]
  }
}
 80004cc:	f107 070c 	add.w	r7, r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	4613      	mov	r3, r2
 80004e2:	460a      	mov	r2, r1
 80004e4:	807a      	strh	r2, [r7, #2]
 80004e6:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
 80004e8:	f04f 0300 	mov.w	r3, #0
 80004ec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80004ee:	887b      	ldrh	r3, [r7, #2]
 80004f0:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
 80004f2:	787b      	ldrb	r3, [r7, #1]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d007      	beq.n	8000508 <ADC_ITConfig+0x30>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	461a      	mov	r2, r3
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	e008      	b.n	800051a <ADC_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	461a      	mov	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	ea6f 0303 	mvn.w	r3, r3
 8000514:	401a      	ands	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	605a      	str	r2, [r3, #4]
  }
}
 800051a:	f107 0714 	add.w	r7, r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f043 0208 	orr.w	r2, r3, #8
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
}
 8000538:	f107 070c 	add.w	r7, r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f003 0308 	and.w	r3, r3, #8
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 800055e:	f04f 0301 	mov.w	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e002      	b.n	800056c <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000566:	f04f 0300 	mov.w	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
}
 800056e:	4618      	mov	r0, r3
 8000570:	f107 0714 	add.w	r7, r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f043 0204 	orr.w	r2, r3, #4
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	609a      	str	r2, [r3, #8]
}
 8000590:	f107 070c 	add.w	r7, r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80005a4:	f04f 0300 	mov.w	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 80005b6:	f04f 0301 	mov.w	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e002      	b.n	80005c4 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 80005be:	f04f 0300 	mov.w	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	f107 0714 	add.w	r7, r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005e0:	78fb      	ldrb	r3, [r7, #3]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	e005      	b.n	8000600 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	609a      	str	r2, [r3, #8]
  }
}
 8000600:	f107 070c 	add.w	r7, r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000614:	f04f 0300 	mov.w	r3, #0
 8000618:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8000626:	f04f 0301 	mov.w	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e002      	b.n	8000634 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
}
 8000636:	4618      	mov	r0, r3
 8000638:	f107 0714 	add.w	r7, r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000656:	f04f 0300 	mov.w	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000668:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000670:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	ea4f 3343 	mov.w	r3, r3, lsl #13
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	4313      	orrs	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	605a      	str	r2, [r3, #4]
}
 8000684:	f107 0714 	add.w	r7, r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800069c:	78fb      	ldrb	r3, [r7, #3]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d006      	beq.n	80006b0 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	e005      	b.n	80006bc <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	605a      	str	r2, [r3, #4]
  }
}
 80006bc:	f107 070c 	add.w	r7, r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	70f9      	strb	r1, [r7, #3]
 80006d2:	70ba      	strb	r2, [r7, #2]
 80006d4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d927      	bls.n	8000738 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80006ee:	78fa      	ldrb	r2, [r7, #3]
 80006f0:	4613      	mov	r3, r2
 80006f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006f6:	189b      	adds	r3, r3, r2
 80006f8:	f1a3 031e 	sub.w	r3, r3, #30
 80006fc:	f04f 0207 	mov.w	r2, #7
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	ea6f 0303 	mvn.w	r3, r3
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000712:	7879      	ldrb	r1, [r7, #1]
 8000714:	78fa      	ldrb	r2, [r7, #3]
 8000716:	4613      	mov	r3, r2
 8000718:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800071c:	189b      	adds	r3, r3, r2
 800071e:	f1a3 031e 	sub.w	r3, r3, #30
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	4313      	orrs	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	e022      	b.n	800077e <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800073e:	78fa      	ldrb	r2, [r7, #3]
 8000740:	4613      	mov	r3, r2
 8000742:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000746:	189b      	adds	r3, r3, r2
 8000748:	f04f 0207 	mov.w	r2, #7
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	ea6f 0303 	mvn.w	r3, r3
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	4013      	ands	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800075e:	7879      	ldrb	r1, [r7, #1]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	4613      	mov	r3, r2
 8000764:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000768:	189b      	adds	r3, r3, r2
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4313      	orrs	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800077e:	78bb      	ldrb	r3, [r7, #2]
 8000780:	2b06      	cmp	r3, #6
 8000782:	d827      	bhi.n	80007d4 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000788:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800078a:	78bb      	ldrb	r3, [r7, #2]
 800078c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000790:	4613      	mov	r3, r2
 8000792:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000796:	189b      	adds	r3, r3, r2
 8000798:	f04f 021f 	mov.w	r2, #31
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	ea6f 0303 	mvn.w	r3, r3
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	4013      	ands	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80007ae:	78f9      	ldrb	r1, [r7, #3]
 80007b0:	78bb      	ldrb	r3, [r7, #2]
 80007b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80007b6:	4613      	mov	r3, r2
 80007b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007bc:	189b      	adds	r3, r3, r2
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	e051      	b.n	8000878 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80007d4:	78bb      	ldrb	r3, [r7, #2]
 80007d6:	2b0c      	cmp	r3, #12
 80007d8:	d827      	bhi.n	800082a <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80007e0:	78ba      	ldrb	r2, [r7, #2]
 80007e2:	4613      	mov	r3, r2
 80007e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80007e8:	189b      	adds	r3, r3, r2
 80007ea:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 80007ee:	f04f 021f 	mov.w	r2, #31
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	ea6f 0303 	mvn.w	r3, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000804:	78f9      	ldrb	r1, [r7, #3]
 8000806:	78ba      	ldrb	r2, [r7, #2]
 8000808:	4613      	mov	r3, r2
 800080a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800080e:	189b      	adds	r3, r3, r2
 8000810:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	631a      	str	r2, [r3, #48]	; 0x30
 8000828:	e026      	b.n	8000878 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000830:	78ba      	ldrb	r2, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000838:	189b      	adds	r3, r3, r2
 800083a:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800083e:	f04f 021f 	mov.w	r2, #31
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	ea6f 0303 	mvn.w	r3, r3
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000854:	78f9      	ldrb	r1, [r7, #3]
 8000856:	78ba      	ldrb	r2, [r7, #2]
 8000858:	4613      	mov	r3, r2
 800085a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800085e:	189b      	adds	r3, r3, r2
 8000860:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000878:	f107 0714 	add.w	r7, r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	e005      	b.n	80008b0 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
  }
}
 80008b0:	f107 070c 	add.w	r7, r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c8:	b29b      	uxth	r3, r3
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	f107 070c 	add.w	r7, r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
 80008dc:	f242 434c 	movw	r3, #9292	; 0x244c
 80008e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008e4:	681b      	ldr	r3, [r3, #0]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	e005      	b.n	800091c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	605a      	str	r2, [r3, #4]
  }
}
 800091c:	f107 070c 	add.w	r7, r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	e005      	b.n	8000954 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	605a      	str	r2, [r3, #4]
  }
}
 8000954:	f107 070c 	add.w	r7, r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800096a:	f04f 0300 	mov.w	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800097c:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	609a      	str	r2, [r3, #8]
}
 800098c:	f107 0714 	add.w	r7, r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d006      	beq.n	80009b8 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	e005      	b.n	80009c4 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	609a      	str	r2, [r3, #8]
  }
}
 80009c4:	f107 070c 	add.w	r7, r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	e005      	b.n	80009fc <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	609a      	str	r2, [r3, #8]
  }
}
 80009fc:	f107 070c 	add.w	r7, r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d003      	beq.n	8000a2a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8000a22:	f04f 0301 	mov.w	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e002      	b.n	8000a30 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8000a2a:	f04f 0300 	mov.w	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	f107 0714 	add.w	r7, r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	70f9      	strb	r1, [r7, #3]
 8000a4a:	70ba      	strb	r2, [r7, #2]
 8000a4c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	2b09      	cmp	r3, #9
 8000a64:	d927      	bls.n	8000ab6 <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8000a6c:	78fa      	ldrb	r2, [r7, #3]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	189b      	adds	r3, r3, r2
 8000a76:	f1a3 031e 	sub.w	r3, r3, #30
 8000a7a:	f04f 0207 	mov.w	r2, #7
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	ea6f 0303 	mvn.w	r3, r3
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000a90:	7879      	ldrb	r1, [r7, #1]
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	4613      	mov	r3, r2
 8000a96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	f1a3 031e 	sub.w	r3, r3, #30
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	e022      	b.n	8000afc <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	f04f 0207 	mov.w	r2, #7
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	ea6f 0303 	mvn.w	r3, r3
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000adc:	7879      	ldrb	r1, [r7, #1]
 8000ade:	78fa      	ldrb	r2, [r7, #3]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b00:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b08:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8000b0c:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	ea6f 0303 	mvn.w	r3, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	78bb      	ldrb	r3, [r7, #2]
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f103 0303 	add.w	r3, r3, #3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b2c:	189b      	adds	r3, r3, r2
 8000b2e:	f04f 021f 	mov.w	r2, #31
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	ea6f 0303 	mvn.w	r3, r3
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	4013      	ands	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000b44:	78f9      	ldrb	r1, [r7, #3]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	ea6f 0303 	mvn.w	r3, r3
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	78bb      	ldrb	r3, [r7, #2]
 8000b52:	18d3      	adds	r3, r2, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f103 0303 	add.w	r3, r3, #3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4613      	mov	r3, r2
 8000b60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b64:	189b      	adds	r3, r3, r2
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b7a:	f107 071c 	add.w	r7, r7, #28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba0:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ba8:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
 8000baa:	78fb      	ldrb	r3, [r7, #3]
 8000bac:	f103 33ff 	add.w	r3, r3, #4294967295
 8000bb0:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bc4:	f107 0714 	add.w	r7, r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	460a      	mov	r2, r1
 8000bdc:	70fa      	strb	r2, [r7, #3]
 8000bde:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	883a      	ldrh	r2, [r7, #0]
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	f107 0714 	add.w	r7, r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000c24:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	b29b      	uxth	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f107 0714 	add.w	r7, r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c58:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	605a      	str	r2, [r3, #4]
}
 8000c68:	f107 0714 	add.w	r7, r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	460a      	mov	r2, r1
 8000c80:	807a      	strh	r2, [r7, #2]
 8000c82:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000c84:	887a      	ldrh	r2, [r7, #2]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000c8a:	883a      	ldrh	r2, [r7, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c90:	f107 070c 	add.w	r7, r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f023 031f 	bic.w	r3, r3, #31
 8000cba:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	605a      	str	r2, [r3, #4]
}
 8000cca:	f107 0714 	add.w	r7, r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00c      	beq.n	8000cfe <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000ce4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ce8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cec:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000cf0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000cf4:	6892      	ldr	r2, [r2, #8]
 8000cf6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	e00b      	b.n	8000d16 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8000cfe:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000d02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d06:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000d0a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000d0e:	6892      	ldr	r2, [r2, #8]
 8000d10:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000d14:	609a      	str	r2, [r3, #8]
  }
}
 8000d16:	f107 070c 	add.w	r7, r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000d40:	f04f 0301 	mov.w	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e002      	b.n	8000d4e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	f107 0714 	add.w	r7, r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	ea6f 0203 	mvn.w	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	f107 070c 	add.w	r7, r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	461a      	mov	r2, r3
 8000daa:	887b      	ldrh	r3, [r7, #2]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d006      	beq.n	8000dce <ADC_GetITStatus+0x52>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000dc6:	f04f 0301 	mov.w	r3, #1
 8000dca:	75fb      	strb	r3, [r7, #23]
 8000dcc:	e002      	b.n	8000dd4 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 071c 	add.w	r7, r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	ea6f 0203 	mvn.w	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	f107 0714 	add.w	r7, r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000e26:	4013      	ands	r3, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	f04f 0308 	mov.w	r3, #8
 8000e52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d10c      	bne.n	8000e74 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e6a:	6852      	ldr	r2, [r2, #4]
 8000e6c:	f042 020f 	orr.w	r2, r2, #15
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	e0da      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	f04f 031c 	mov.w	r3, #28
 8000e7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d10c      	bne.n	8000e9c <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e92:	6852      	ldr	r2, [r2, #4]
 8000e94:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	e0c6      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8000ea2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10c      	bne.n	8000ec4 <DMA_DeInit+0xb0>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eba:	6852      	ldr	r2, [r2, #4]
 8000ebc:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	e0b2      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	f04f 0344 	mov.w	r3, #68	; 0x44
 8000eca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d10c      	bne.n	8000eec <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ee2:	6852      	ldr	r2, [r2, #4]
 8000ee4:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	e09e      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	f04f 0358 	mov.w	r3, #88	; 0x58
 8000ef2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d10c      	bne.n	8000f14 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f0a:	6852      	ldr	r2, [r2, #4]
 8000f0c:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	e08a      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	f04f 036c 	mov.w	r3, #108	; 0x6c
 8000f1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d10c      	bne.n	8000f3c <DMA_DeInit+0x128>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f32:	6852      	ldr	r2, [r2, #4]
 8000f34:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	e076      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8000f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d10c      	bne.n	8000f64 <DMA_DeInit+0x150>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f5a:	6852      	ldr	r2, [r2, #4]
 8000f5c:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	e062      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000f6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d10c      	bne.n	8000f8c <DMA_DeInit+0x178>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000f82:	6852      	ldr	r2, [r2, #4]
 8000f84:	f042 020f 	orr.w	r2, r2, #15
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	e04e      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	f240 431c 	movw	r3, #1052	; 0x41c
 8000f92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d10c      	bne.n	8000fb4 <DMA_DeInit+0x1a0>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000faa:	6852      	ldr	r2, [r2, #4]
 8000fac:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	e03a      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000fba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d10c      	bne.n	8000fdc <DMA_DeInit+0x1c8>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd2:	6852      	ldr	r2, [r2, #4]
 8000fd4:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	e026      	b.n	800102a <DMA_DeInit+0x216>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	f240 4344 	movw	r3, #1092	; 0x444
 8000fe2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d10c      	bne.n	8001004 <DMA_DeInit+0x1f0>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ffa:	6852      	ldr	r2, [r2, #4]
 8000ffc:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	e012      	b.n	800102a <DMA_DeInit+0x216>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800100a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800100e:	429a      	cmp	r2, r3
 8001010:	d10b      	bne.n	800102a <DMA_DeInit+0x216>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001022:	6852      	ldr	r2, [r2, #4]
 8001024:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8001028:	605a      	str	r2, [r3, #4]
    }
  }
}
 800102a:	f107 070c 	add.w	r7, r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001054:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001064:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001070:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800107c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	60da      	str	r2, [r3, #12]
}
 80010a8:	f107 0714 	add.w	r7, r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001114:	f107 070c 	add.w	r7, r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e007      	b.n	8001150 <DMA_Cmd+0x30>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800114a:	4013      	ands	r3, r2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	6013      	str	r3, [r2, #0]
  }
}
 8001150:	f107 070c 	add.w	r7, r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <DMA_ITConfig+0x24>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	431a      	orrs	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e008      	b.n	8001192 <DMA_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	ea6f 0303 	mvn.w	r3, r3
 800118c:	401a      	ands	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]
  }
}
 8001192:	f107 0714 	add.w	r7, r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <DMA_SetCurrDataCounter>:
  *         transfer.   
  * @note   This function can only be used when the DMAy_Channelx is disabled.                 
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 80011a8:	887a      	ldrh	r2, [r7, #2]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
}
 80011ae:	f107 070c 	add.w	r7, r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	b29b      	uxth	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	f107 070c 	add.w	r7, r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <DMA_GetFlagStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	e005      	b.n	800120c <DMA_GetFlagStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <DMA_GetFlagStatus+0x4a>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8001216:	f04f 0301 	mov.w	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e002      	b.n	8001224 <DMA_GetFlagStatus+0x50>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	f107 0714 	add.w	r7, r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <DMA_ClearFlag+0x20>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8001246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e005      	b.n	8001260 <DMA_ClearFlag+0x2c>
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
  }
}
 8001260:	f107 070c 	add.w	r7, r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <DMA_GetITStatus+0x2c>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	e005      	b.n	80012a4 <DMA_GetITStatus+0x38>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <DMA_GetITStatus+0x4a>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 80012ae:	f04f 0301 	mov.w	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e002      	b.n	80012bc <DMA_GetITStatus+0x50>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	f107 0714 	add.w	r7, r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <DMA_ClearITPendingBit+0x20>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	e005      	b.n	80012f8 <DMA_ClearITPendingBit+0x2c>
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	605a      	str	r2, [r3, #4]
  }
}
 80012f8:	f107 070c 	add.w	r7, r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001312:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001316:	429a      	cmp	r2, r3
 8001318:	d10c      	bne.n	8001334 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800131a:	f04f 0004 	mov.w	r0, #4
 800131e:	f04f 0101 	mov.w	r1, #1
 8001322:	f000 ff63 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8001326:	f04f 0004 	mov.w	r0, #4
 800132a:	f04f 0100 	mov.w	r1, #0
 800132e:	f000 ff5d 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8001332:	e076      	b.n	8001422 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800133a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800133e:	429a      	cmp	r2, r3
 8001340:	d10c      	bne.n	800135c <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001342:	f04f 0008 	mov.w	r0, #8
 8001346:	f04f 0101 	mov.w	r1, #1
 800134a:	f000 ff4f 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800134e:	f04f 0008 	mov.w	r0, #8
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	f000 ff49 	bl	80021ec <RCC_APB2PeriphResetCmd>
 800135a:	e062      	b.n	8001422 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001366:	429a      	cmp	r2, r3
 8001368:	d10c      	bne.n	8001384 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800136a:	f04f 0010 	mov.w	r0, #16
 800136e:	f04f 0101 	mov.w	r1, #1
 8001372:	f000 ff3b 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8001376:	f04f 0010 	mov.w	r0, #16
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	f000 ff35 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8001382:	e04e      	b.n	8001422 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800138e:	429a      	cmp	r2, r3
 8001390:	d10c      	bne.n	80013ac <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8001392:	f04f 0020 	mov.w	r0, #32
 8001396:	f04f 0101 	mov.w	r1, #1
 800139a:	f000 ff27 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800139e:	f04f 0020 	mov.w	r0, #32
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	f000 ff21 	bl	80021ec <RCC_APB2PeriphResetCmd>
 80013aa:	e03a      	b.n	8001422 <GPIO_DeInit+0x11e>
  }    
  else if (GPIOx == GPIOE)
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10c      	bne.n	80013d4 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80013ba:	f04f 0040 	mov.w	r0, #64	; 0x40
 80013be:	f04f 0101 	mov.w	r1, #1
 80013c2:	f000 ff13 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80013c6:	f04f 0040 	mov.w	r0, #64	; 0x40
 80013ca:	f04f 0100 	mov.w	r1, #0
 80013ce:	f000 ff0d 	bl	80021ec <RCC_APB2PeriphResetCmd>
 80013d2:	e026      	b.n	8001422 <GPIO_DeInit+0x11e>
  } 
  else if (GPIOx == GPIOF)
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013de:	429a      	cmp	r2, r3
 80013e0:	d10c      	bne.n	80013fc <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80013e2:	f04f 0080 	mov.w	r0, #128	; 0x80
 80013e6:	f04f 0101 	mov.w	r1, #1
 80013ea:	f000 feff 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80013ee:	f04f 0080 	mov.w	r0, #128	; 0x80
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	f000 fef9 	bl	80021ec <RCC_APB2PeriphResetCmd>
 80013fa:	e012      	b.n	8001422 <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001402:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001406:	429a      	cmp	r2, r3
 8001408:	d10b      	bne.n	8001422 <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800140a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800140e:	f04f 0101 	mov.w	r1, #1
 8001412:	f000 feeb 	bl	80021ec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8001416:	f44f 7080 	mov.w	r0, #256	; 0x100
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	f000 fee5 	bl	80021ec <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001422:	f107 0708 	add.w	r7, r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop

0800142c <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8001430:	f04f 0001 	mov.w	r0, #1
 8001434:	f04f 0101 	mov.w	r1, #1
 8001438:	f000 fed8 	bl	80021ec <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800143c:	f04f 0001 	mov.w	r0, #1
 8001440:	f04f 0100 	mov.w	r1, #0
 8001444:	f000 fed2 	bl	80021ec <RCC_APB2PeriphResetCmd>
}
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop

0800144c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	78db      	ldrb	r3, [r3, #3]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	4313      	orrs	r3, r2
 8001498:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d04e      	beq.n	8001542 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	e041      	b.n	8001536 <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	f04f 0201 	mov.w	r2, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d12d      	bne.n	800152e <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014d8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f04f 020f 	mov.w	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	ea6f 0303 	mvn.w	r3, r3
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	4013      	ands	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	78db      	ldrb	r3, [r3, #3]
 8001504:	2b28      	cmp	r3, #40	; 0x28
 8001506:	d107      	bne.n	8001518 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f04f 0201 	mov.w	r2, #1
 800150e:	fa02 f203 	lsl.w	r2, r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	e00a      	b.n	800152e <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	78db      	ldrb	r3, [r3, #3]
 800151c:	2b48      	cmp	r3, #72	; 0x48
 800151e:	d106      	bne.n	800152e <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f04f 0201 	mov.w	r2, #1
 8001526:	fa02 f203 	lsl.w	r2, r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f103 0301 	add.w	r3, r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b07      	cmp	r3, #7
 800153a:	d9ba      	bls.n	80014b2 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2bff      	cmp	r3, #255	; 0xff
 8001548:	d953      	bls.n	80015f2 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	e046      	b.n	80015e6 <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f103 0308 	add.w	r3, r3, #8
 800155e:	f04f 0201 	mov.w	r2, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d130      	bne.n	80015de <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001582:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f04f 020f 	mov.w	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	ea6f 0303 	mvn.w	r3, r3
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	78db      	ldrb	r3, [r3, #3]
 80015ae:	2b28      	cmp	r3, #40	; 0x28
 80015b0:	d108      	bne.n	80015c4 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f103 0308 	add.w	r3, r3, #8
 80015b8:	f04f 0201 	mov.w	r2, #1
 80015bc:	fa02 f203 	lsl.w	r2, r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	78db      	ldrb	r3, [r3, #3]
 80015c8:	2b48      	cmp	r3, #72	; 0x48
 80015ca:	d108      	bne.n	80015de <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f103 0308 	add.w	r3, r3, #8
 80015d2:	f04f 0201 	mov.w	r2, #1
 80015d6:	fa02 f203 	lsl.w	r2, r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f103 0301 	add.w	r3, r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b07      	cmp	r3, #7
 80015ea:	d9b5      	bls.n	8001558 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	605a      	str	r2, [r3, #4]
  }
}
 80015f2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160a:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f04f 0202 	mov.w	r2, #2
 8001612:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f04f 0204 	mov.w	r2, #4
 800161a:	70da      	strb	r2, [r3, #3]
}
 800161c:	f107 070c 	add.w	r7, r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	461a      	mov	r2, r3
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001648:	f04f 0301 	mov.w	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e002      	b.n	8001656 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	f107 0714 	add.w	r7, r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	b29b      	uxth	r3, r3
}
 8001672:	4618      	mov	r0, r3
 8001674:	f107 070c 	add.w	r7, r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	461a      	mov	r2, r3
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
 80016a0:	f04f 0301 	mov.w	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e002      	b.n	80016ae <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	f107 0714 	add.w	r7, r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	b29b      	uxth	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	f107 070c 	add.w	r7, r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
}
 80016ea:	f107 070c 	add.w	r7, r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	615a      	str	r2, [r3, #20]
}
 8001706:	f107 070c 	add.w	r7, r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	460a      	mov	r2, r1
 800171c:	807a      	strh	r2, [r7, #2]
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	e002      	b.n	8001734 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	615a      	str	r2, [r3, #20]
  }
}
 8001734:	f107 070c 	add.w	r7, r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60da      	str	r2, [r3, #12]
}
 8001752:	f107 070c 	add.w	r7, r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800177c:	887a      	ldrh	r2, [r7, #2]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	60fb      	str	r3, [r7, #12]
}
 8001794:	f107 0714 	add.w	r7, r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	71fa      	strb	r2, [r7, #7]
 80017ac:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80017c6:	4013      	ands	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	f107 0714 	add.w	r7, r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 80017fe:	f04f 031c 	mov.w	r3, #28
 8001802:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	f107 070c 	add.w	r7, r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da06      	bge.n	800184c <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e005      	b.n	8001858 <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800185e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8001862:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800186a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800186e:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800187a:	d110      	bne.n	800189e <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001882:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001894:	6852      	ldr	r2, [r2, #4]
 8001896:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	e026      	b.n	80018ec <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d010      	beq.n	80018ca <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f04f 0203 	mov.w	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	ea6f 0303 	mvn.w	r3, r3
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e010      	b.n	80018ec <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80018d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	ea6f 0303 	mvn.w	r3, r3
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80018ea:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80018f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	da06      	bge.n	800191c <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	61da      	str	r2, [r3, #28]
 800191a:	e005      	b.n	8001928 <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	605a      	str	r2, [r3, #4]
  }  
}
 8001928:	f107 071c 	add.w	r7, r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	71fa      	strb	r2, [r7, #7]
 8001940:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001952:	f04f 020f 	mov.w	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001964:	79ba      	ldrb	r2, [r7, #6]
 8001966:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	4610      	mov	r0, r2
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001976:	79b9      	ldrb	r1, [r7, #6]
 8001978:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800197c:	b2c9      	uxtb	r1, r1
 800197e:	f101 0102 	add.w	r1, r1, #2
 8001982:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001986:	4611      	mov	r1, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	ea6f 0202 	mvn.w	r2, r2
 800198e:	4011      	ands	r1, r2
 8001990:	f100 0202 	add.w	r2, r0, #2
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80019a0:	79ba      	ldrb	r2, [r7, #6]
 80019a2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	4610      	mov	r0, r2
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80019b2:	79b9      	ldrb	r1, [r7, #6]
 80019b4:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80019b8:	b2c9      	uxtb	r1, r1
 80019ba:	f101 0102 	add.w	r1, r1, #2
 80019be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80019c2:	4611      	mov	r1, r2
 80019c4:	79fc      	ldrb	r4, [r7, #7]
 80019c6:	79ba      	ldrb	r2, [r7, #6]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80019d0:	fa04 f202 	lsl.w	r2, r4, r2
 80019d4:	4311      	orrs	r1, r2
 80019d6:	f100 0202 	add.w	r2, r0, #2
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80019de:	f107 0710 	add.w	r7, r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc90      	pop	{r4, r7}
 80019e6:	4770      	bx	lr

080019e8 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 80019f0:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 80019f4:	f2c4 2320 	movt	r3, #16928	; 0x4220
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	f107 070c 	add.w	r7, r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8001a40:	400b      	ands	r3, r1
 8001a42:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a76:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a88:	6852      	ldr	r2, [r2, #4]
 8001a8a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a98:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a9c:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac2:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ada:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d003      	beq.n	8001aec <RCC_HSEConfig+0x48>
 8001ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ae8:	d00d      	beq.n	8001b06 <RCC_HSEConfig+0x62>
 8001aea:	e019      	b.n	8001b20 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b02:	601a      	str	r2, [r3, #0]
      break;
 8001b04:	e00d      	b.n	8001b22 <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001b1c:	601a      	str	r2, [r3, #0]
      break;
 8001b1e:	e000      	b.n	8001b22 <RCC_HSEConfig+0x7e>
      
    default:
      break;
 8001b20:	bf00      	nop
  }
}
 8001b22:	f107 070c 	add.w	r7, r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001b44:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001b48:	f000 fbd8 	bl	80022fc <RCC_GetFlagStatus>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f103 0301 	add.w	r3, r3, #1
 8001b56:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b5e:	d002      	beq.n	8001b66 <RCC_WaitForHSEStartUp+0x3a>
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001b66:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001b6a:	f000 fbc7 	bl	80022fc <RCC_GetFlagStatus>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8001b74:	f04f 0301 	mov.w	r3, #1
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e002      	b.n	8001b82 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	f107 0708 	add.w	r7, r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop

08001b90 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8001ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bb2:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	f107 0714 	add.w	r7, r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001bea:	79fa      	ldrb	r2, [r7, #7]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	f107 070c 	add.w	r7, r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001c1a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
}
 8001c34:	f107 0714 	add.w	r7, r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001c4a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8001c4e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	601a      	str	r2, [r3, #0]
}
 8001c56:	f107 070c 	add.w	r7, r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f023 0303 	bic.w	r3, r3, #3
 8001c80:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	605a      	str	r2, [r3, #4]
}
 8001c96:	f107 0714 	add.w	r7, r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	b2db      	uxtb	r3, r3
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce0:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	605a      	str	r2, [r3, #4]
}
 8001cf6:	f107 0714 	add.w	r7, r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d20:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]
}
 8001d36:	f107 0714 	add.w	r7, r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d60:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	605a      	str	r2, [r3, #4]
}
 8001d7a:	f107 0714 	add.w	r7, r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	71fa      	strb	r2, [r7, #7]
 8001d90:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001d98:	f241 0309 	movw	r3, #4105	; 0x1009
 8001d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001da0:	f241 0209 	movw	r2, #4105	; 0x1009
 8001da4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	b2d1      	uxtb	r1, r2
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e010      	b.n	8001dd8 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001db6:	f241 0309 	movw	r3, #4105	; 0x1009
 8001dba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dbe:	f241 0209 	movw	r2, #4105	; 0x1009
 8001dc2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	b2d1      	uxtb	r1, r2
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	ea6f 0202 	mvn.w	r2, r2
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
  }
}
 8001dd8:	f107 070c 	add.w	r7, r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8001dec:	f04f 03d8 	mov.w	r3, #216	; 0xd8
 8001df0:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	f107 070c 	add.w	r7, r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e24:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	605a      	str	r2, [r3, #4]
}
 8001e3a:	f107 0714 	add.w	r7, r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001e4e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001e52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001e5c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d002      	beq.n	8001e76 <RCC_LSEConfig+0x32>
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d008      	beq.n	8001e86 <RCC_LSEConfig+0x42>
 8001e74:	e00f      	b.n	8001e96 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001e76:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001e7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e7e:	f04f 0201 	mov.w	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
      break;
 8001e84:	e008      	b.n	8001e98 <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001e86:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001e8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e8e:	f04f 0205 	mov.w	r2, #5
 8001e92:	701a      	strb	r2, [r3, #0]
      break;            
 8001e94:	e000      	b.n	8001e98 <RCC_LSEConfig+0x54>
      
    default:
      break;      
 8001e96:	bf00      	nop
  }
}
 8001e98:	f107 070c 	add.w	r7, r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001eae:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001eb2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001eb6:	79fa      	ldrb	r2, [r7, #7]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	f107 070c 	add.w	r7, r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ed8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001edc:	6a12      	ldr	r2, [r2, #32]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	621a      	str	r2, [r3, #32]
}
 8001ee6:	f107 070c 	add.w	r7, r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001efa:	f240 433c 	movw	r3, #1084	; 0x43c
 8001efe:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	f107 070c 	add.w	r7, r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00a      	beq.n	8001f5c <RCC_GetClocksFreq+0x4c>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d00f      	beq.n	8001f6a <RCC_GetClocksFreq+0x5a>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d14d      	bne.n	8001fea <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001f54:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001f58:	6013      	str	r3, [r2, #0]
      break;
 8001f5a:	e04d      	b.n	8001ff8 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001f62:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001f66:	6013      	str	r3, [r2, #0]
      break;
 8001f68:	e046      	b.n	8001ff8 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f78:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8001f90:	f103 0302 	add.w	r3, r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001fa2:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001fa6:	fb03 f202 	mul.w	r2, r3, r2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001fae:	e023      	b.n	8001ff8 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001fc8:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001fcc:	fb03 f202 	mul.w	r2, r3, r2
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001fd4:	e010      	b.n	8001ff8 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001fdc:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001fe0:	fb03 f202 	mul.w	r2, r3, r2
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001fe8:	e006      	b.n	8001ff8 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ff0:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001ff4:	6013      	str	r3, [r2, #0]
      break;
 8001ff6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002006:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800200e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002010:	f240 0300 	movw	r3, #0
 8002014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	189b      	adds	r3, r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	fa22 f203 	lsr.w	r2, r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800203e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002046:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002048:	f240 0300 	movw	r3, #0
 800204c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	189b      	adds	r3, r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	fa22 f203 	lsr.w	r2, r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002076:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800207e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8002080:	f240 0300 	movw	r3, #0
 8002084:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	189b      	adds	r3, r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	fa22 f203 	lsr.w	r2, r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ae:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	ea4f 3393 	mov.w	r3, r3, lsr #14
 80020b6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80020b8:	f240 0310 	movw	r3, #16
 80020bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	189b      	adds	r3, r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	f107 071c 	add.w	r7, r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00d      	beq.n	8002112 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002102:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002106:	6952      	ldr	r2, [r2, #20]
 8002108:	4611      	mov	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	430a      	orrs	r2, r1
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	e00e      	b.n	8002130 <RCC_AHBPeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002116:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800211a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800211e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002122:	6952      	ldr	r2, [r2, #20]
 8002124:	4611      	mov	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	ea6f 0202 	mvn.w	r2, r2
 800212c:	400a      	ands	r2, r1
 800212e:	615a      	str	r2, [r3, #20]
  }
}
 8002130:	f107 070c 	add.w	r7, r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800214e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002152:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800215a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800215e:	6992      	ldr	r2, [r2, #24]
 8002160:	4611      	mov	r1, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	430a      	orrs	r2, r1
 8002166:	619a      	str	r2, [r3, #24]
 8002168:	e00e      	b.n	8002188 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002176:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800217a:	6992      	ldr	r2, [r2, #24]
 800217c:	4611      	mov	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	ea6f 0202 	mvn.w	r2, r2
 8002184:	400a      	ands	r2, r1
 8002186:	619a      	str	r2, [r3, #24]
  }
}
 8002188:	f107 070c 	add.w	r7, r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop

08002194 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021b6:	69d2      	ldr	r2, [r2, #28]
 80021b8:	4611      	mov	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	430a      	orrs	r2, r1
 80021be:	61da      	str	r2, [r3, #28]
 80021c0:	e00e      	b.n	80021e0 <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80021c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021d2:	69d2      	ldr	r2, [r2, #28]
 80021d4:	4611      	mov	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	ea6f 0202 	mvn.w	r2, r2
 80021dc:	400a      	ands	r2, r1
 80021de:	61da      	str	r2, [r3, #28]
  }
}
 80021e0:	f107 070c 	add.w	r7, r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800220e:	68d2      	ldr	r2, [r2, #12]
 8002210:	4611      	mov	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	e00e      	b.n	8002238 <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002226:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	4611      	mov	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	ea6f 0202 	mvn.w	r2, r2
 8002234:	400a      	ands	r2, r1
 8002236:	60da      	str	r2, [r3, #12]
  }
}
 8002238:	f107 070c 	add.w	r7, r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00d      	beq.n	8002272 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800225e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002262:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002266:	6912      	ldr	r2, [r2, #16]
 8002268:	4611      	mov	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	430a      	orrs	r2, r1
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	e00e      	b.n	8002290 <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800227a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002282:	6912      	ldr	r2, [r2, #16]
 8002284:	4611      	mov	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	ea6f 0202 	mvn.w	r2, r2
 800228c:	400a      	ands	r2, r1
 800228e:	611a      	str	r2, [r3, #16]
  }
}
 8002290:	f107 070c 	add.w	r7, r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80022a6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80022aa:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80022ae:	79fa      	ldrb	r2, [r7, #7]
 80022b0:	601a      	str	r2, [r3, #0]
}
 80022b2:	f107 070c 	add.w	r7, r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80022c6:	f04f 034c 	mov.w	r3, #76	; 0x4c
 80022ca:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80022ce:	79fa      	ldrb	r2, [r7, #7]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	f107 070c 	add.w	r7, r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80022e6:	f241 0307 	movw	r3, #4103	; 0x1007
 80022ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	701a      	strb	r2, [r3, #0]
}
 80022f2:	f107 070c 	add.w	r7, r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8002328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00f      	b.n	8002356 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d106      	bne.n	800234a <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e005      	b.n	8002356 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800234a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8002370:	f04f 0301 	mov.w	r3, #1
 8002374:	74fb      	strb	r3, [r7, #19]
 8002376:	e002      	b.n	800237e <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002380:	4618      	mov	r0, r3
 8002382:	f107 071c 	add.w	r7, r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8002390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002394:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80023a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop

080023b0 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	461a      	mov	r2, r3
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
 80023d4:	f04f 0301 	mov.w	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e002      	b.n	80023e2 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	f107 0714 	add.w	r7, r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80023fa:	f241 030a 	movw	r3, #4106	; 0x100a
 80023fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	701a      	strb	r2, [r3, #0]
}
 8002406:	f107 070c 	add.w	r7, r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800241e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002422:	429a      	cmp	r2, r3
 8002424:	d10c      	bne.n	8002440 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002426:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800242a:	f04f 0101 	mov.w	r1, #1
 800242e:	f7ff fedd 	bl	80021ec <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002432:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f7ff fed7 	bl	80021ec <RCC_APB2PeriphResetCmd>
 800243e:	e026      	b.n	800248e <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002446:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800244a:	429a      	cmp	r2, r3
 800244c:	d10c      	bne.n	8002468 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800244e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002452:	f04f 0101 	mov.w	r1, #1
 8002456:	f7ff fef5 	bl	8002244 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800245a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	f7ff feef 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002466:	e012      	b.n	800248e <SPI_I2S_DeInit+0x7e>
  }
  else
  {
    if (SPIx == SPI3)
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800246e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002472:	429a      	cmp	r2, r3
 8002474:	d10b      	bne.n	800248e <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002476:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800247a:	f04f 0101 	mov.w	r1, #1
 800247e:	f7ff fee1 	bl	8002244 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002482:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	f7ff fedb 	bl	8002244 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800248e:	f107 0708 	add.w	r7, r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop

08002498 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80024ae:	89fb      	ldrh	r3, [r7, #14]
 80024b0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80024b4:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	885b      	ldrh	r3, [r3, #2]
 80024be:	4313      	orrs	r3, r2
 80024c0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024de:	4313      	orrs	r3, r2
 80024e0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	89fa      	ldrh	r2, [r7, #14]
 80024fc:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8b9b      	ldrh	r3, [r3, #28]
 8002502:	b29b      	uxth	r3, r3
 8002504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	8a1a      	ldrh	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	821a      	strh	r2, [r3, #16]
}
 8002516:	f107 0714 	add.w	r7, r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002530:	f04f 0302 	mov.w	r3, #2
 8002534:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800253c:	f04f 0301 	mov.w	r3, #1
 8002540:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t tmp = 0;
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClocksTypeDef RCC_Clocks;
  uint32_t sourceclock = 0;
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8b9b      	ldrh	r3, [r3, #28]
 8002552:	b29b      	uxth	r3, r3
 8002554:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 8002558:	f023 031f 	bic.w	r3, r3, #31
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f04f 0202 	mov.w	r2, #2
 8002568:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8b9b      	ldrh	r3, [r3, #28]
 800256e:	847b      	strh	r3, [r7, #34]	; 0x22
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d106      	bne.n	8002586 <I2S_Init+0x66>
  {
    i2sodd = (uint16_t)0;
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    i2sdiv = (uint16_t)2;   
 800257e:	f04f 0302 	mov.w	r3, #2
 8002582:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002584:	e067      	b.n	8002656 <I2S_Init+0x136>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	889b      	ldrh	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <I2S_Init+0x76>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800258e:	f04f 0301 	mov.w	r3, #1
 8002592:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002594:	e002      	b.n	800259c <I2S_Init+0x7c>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002596:	f04f 0302 	mov.w	r3, #2
 800259a:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* Get the I2S clock source mask depending on the peripheral number */
    if(((uint32_t)SPIx) == SPI2_BASE)
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80025a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d103      	bne.n	80025b2 <I2S_Init+0x92>
    {
      /* The mask is relative to I2S2 */
      tmp = I2S2_CLOCK_SRC;
 80025aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	e002      	b.n	80025b8 <I2S_Init+0x98>
    }
    else 
    {
      /* The mask is relative to I2S3 */      
      tmp = I2S3_CLOCK_SRC;
 80025b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fca7 	bl	8001f10 <RCC_GetClocksFreq>
      
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61fb      	str	r3, [r7, #28]
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	88db      	ldrh	r3, [r3, #6]
 80025ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ce:	d113      	bne.n	80025f8 <I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	ea4f 2213 	mov.w	r2, r3, lsr #8
 80025d6:	4613      	mov	r3, r2
 80025d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f103 0305 	add.w	r3, r3, #5
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e015      	b.n	8002624 <I2S_Init+0x104>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80025f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	4613      	mov	r3, r2
 8002606:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800260a:	189b      	adds	r3, r3, r2
 800260c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002610:	461a      	mov	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	b29b      	uxth	r3, r3
 800261c:	f103 0305 	add.w	r3, r3, #5
 8002620:	b29b      	uxth	r3, r3
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800262a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800262e:	fba3 1302 	umull	r1, r3, r3, r2
 8002632:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	b29b      	uxth	r3, r3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	85bb      	strh	r3, [r7, #44]	; 0x2c
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800264c:	85fb      	strh	r3, [r7, #46]	; 0x2e
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800264e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002650:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002654:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002656:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002658:	2b01      	cmp	r3, #1
 800265a:	d902      	bls.n	8002662 <I2S_Init+0x142>
 800265c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d905      	bls.n	800266e <I2S_Init+0x14e>
  {
    /* Set the default values */
    i2sdiv = 2;
 8002662:	f04f 0302 	mov.w	r3, #2
 8002666:	85fb      	strh	r3, [r7, #46]	; 0x2e
    i2sodd = 0;
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	88da      	ldrh	r2, [r3, #6]
 8002672:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002674:	4313      	orrs	r3, r2
 8002676:	b29a      	uxth	r2, r3
 8002678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800267a:	4313      	orrs	r3, r2
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	8859      	ldrh	r1, [r3, #2]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002692:	4303      	orrs	r3, r0
 8002694:	b29b      	uxth	r3, r3
 8002696:	430b      	orrs	r3, r1
 8002698:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800269a:	4313      	orrs	r3, r2
 800269c:	b29a      	uxth	r2, r3
 800269e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026a8:	847b      	strh	r3, [r7, #34]	; 0x22
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80026ae:	839a      	strh	r2, [r3, #28]
}
 80026b0:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f04f 0207 	mov.w	r2, #7
 8002706:	821a      	strh	r2, [r3, #16]
}
 8002708:	f107 070c 	add.w	r7, r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

08002714 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f04f 0202 	mov.w	r2, #2
 8002742:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	819a      	strh	r2, [r3, #12]
}
 800274c:	f107 070c 	add.w	r7, r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop

08002758 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	e007      	b.n	800278c <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002786:	b29a      	uxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	801a      	strh	r2, [r3, #0]
  }
}
 800278c:	f107 070c 	add.w	r7, r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8b9b      	ldrh	r3, [r3, #28]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	839a      	strh	r2, [r3, #28]
 80027ba:	e007      	b.n	80027cc <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8b9b      	ldrh	r3, [r3, #28]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	839a      	strh	r2, [r3, #28]
  }
}
 80027cc:	f107 070c 	add.w	r7, r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop

080027d8 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	460a      	mov	r2, r1
 80027e4:	70fa      	strb	r2, [r7, #3]
 80027e6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	81fb      	strh	r3, [r7, #14]
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	f04f 0201 	mov.w	r2, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800280a:	78bb      	ldrb	r3, [r7, #2]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	889b      	ldrh	r3, [r3, #4]
 8002814:	b29a      	uxth	r2, r3
 8002816:	89bb      	ldrh	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	809a      	strh	r2, [r3, #4]
 8002820:	e00a      	b.n	8002838 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	889b      	ldrh	r3, [r3, #4]
 8002826:	b29a      	uxth	r2, r3
 8002828:	89bb      	ldrh	r3, [r7, #12]
 800282a:	ea6f 0303 	mvn.w	r3, r3
 800282e:	b29b      	uxth	r3, r3
 8002830:	4013      	ands	r3, r2
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	809a      	strh	r2, [r3, #4]
  }
}
 8002838:	f107 0714 	add.w	r7, r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	460a      	mov	r2, r1
 8002850:	807a      	strh	r2, [r7, #2]
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	889b      	ldrh	r3, [r3, #4]
 800285e:	b29a      	uxth	r2, r3
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	4313      	orrs	r3, r2
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	809a      	strh	r2, [r3, #4]
 800286a:	e00a      	b.n	8002882 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	889b      	ldrh	r3, [r3, #4]
 8002870:	b29a      	uxth	r2, r3
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	ea6f 0303 	mvn.w	r3, r3
 8002878:	b29b      	uxth	r3, r3
 800287a:	4013      	ands	r3, r2
 800287c:	b29a      	uxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	809a      	strh	r2, [r3, #4]
  }
}
 8002882:	f107 070c 	add.w	r7, r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	819a      	strh	r2, [r3, #12]
}
 800289e:	f107 070c 	add.w	r7, r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	899b      	ldrh	r3, [r3, #12]
 80028b4:	b29b      	uxth	r3, r3
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	f107 070c 	add.w	r7, r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <SPI_NSSInternalSoftwareConfig>:
  *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d008      	beq.n	80028ec <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	e007      	b.n	80028fc <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	801a      	strh	r2, [r3, #0]
  }
}
 80028fc:	f107 070c 	add.w	r7, r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	889b      	ldrh	r3, [r3, #4]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	809a      	strh	r2, [r3, #4]
 800292a:	e007      	b.n	800293c <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f023 0304 	bic.w	r3, r3, #4
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	809a      	strh	r2, [r3, #4]
  }
}
 800293c:	f107 070c 	add.w	r7, r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <SPI_DataSizeConfig>:
  *     @arg SPI_DataSize_16b: Set data frame format to 16bit
  *     @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29a      	uxth	r2, r3
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	4313      	orrs	r3, r2
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	801a      	strh	r2, [r3, #0]
}
 8002974:	f107 070c 	add.w	r7, r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002992:	b29a      	uxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	801a      	strh	r2, [r3, #0]
}
 8002998:	f107 070c 	add.w	r7, r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop

080029a4 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	e007      	b.n	80029d8 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	801a      	strh	r2, [r3, #0]
  }
}
 80029d8:	f107 070c 	add.w	r7, r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <SPI_GetCRC>:
  *     @arg SPI_CRC_Tx: Selects Tx CRC register
  *     @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d003      	beq.n	8002a04 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8b1b      	ldrh	r3, [r3, #24]
 8002a00:	81fb      	strh	r3, [r7, #14]
 8002a02:	e002      	b.n	8002a0a <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8a9b      	ldrh	r3, [r3, #20]
 8002a08:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f107 0714 	add.w	r7, r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8a1b      	ldrh	r3, [r3, #16]
 8002a24:	b29b      	uxth	r3, r3
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	f107 070c 	add.w	r7, r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <SPI_BiDirectionalLineConfig>:
  *     @arg SPI_Direction_Tx: Selects Tx transmission direction
  *     @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a46:	d108      	bne.n	8002a5a <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	e007      	b.n	8002a6a <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	801a      	strh	r2, [r3, #0]
  }
}
 8002a6a:	f107 070c 	add.w	r7, r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	891b      	ldrh	r3, [r3, #8]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002a96:	f04f 0301 	mov.w	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e002      	b.n	8002aa4 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f107 0714 	add.w	r7, r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop

08002ab4 <SPI_I2S_ClearFlag>:
  *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
  *     write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	ea6f 0303 	mvn.w	r3, r3
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	811a      	strh	r2, [r3, #8]
}
 8002acc:	f107 070c 	add.w	r7, r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	81bb      	strh	r3, [r7, #12]
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	817b      	strh	r3, [r7, #10]
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	f04f 0201 	mov.w	r2, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8002b16:	897b      	ldrh	r3, [r7, #10]
 8002b18:	f04f 0201 	mov.w	r2, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	889b      	ldrh	r3, [r3, #4]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	897b      	ldrh	r3, [r7, #10]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	891b      	ldrh	r3, [r3, #8]
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	89bb      	ldrh	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <SPI_I2S_GetITStatus+0x74>
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8002b44:	f04f 0301 	mov.w	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e002      	b.n	8002b52 <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	f107 0714 	add.w	r7, r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <SPI_I2S_ClearITPendingBit>:
  *     followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *     the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	f04f 0201 	mov.w	r2, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	ea6f 0303 	mvn.w	r3, r3
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	811a      	strh	r2, [r3, #8]
}
 8002b8e:	f107 0714 	add.w	r7, r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002ba6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10c      	bne.n	8002bc8 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002bae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002bb2:	f04f 0101 	mov.w	r1, #1
 8002bb6:	f7ff fb19 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002bba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	f7ff fb13 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002bc6:	e13b      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }     
  else if (TIMx == TIM2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d10c      	bne.n	8002bea <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002bd0:	f04f 0001 	mov.w	r0, #1
 8002bd4:	f04f 0101 	mov.w	r1, #1
 8002bd8:	f7ff fb34 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002bdc:	f04f 0001 	mov.w	r0, #1
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f7ff fb2e 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002be8:	e12a      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM3)
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10c      	bne.n	8002c12 <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002bf8:	f04f 0002 	mov.w	r0, #2
 8002bfc:	f04f 0101 	mov.w	r1, #1
 8002c00:	f7ff fb20 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002c04:	f04f 0002 	mov.w	r0, #2
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	f7ff fb1a 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002c10:	e116      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM4)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10c      	bne.n	8002c3a <TIM_DeInit+0xa2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002c20:	f04f 0004 	mov.w	r0, #4
 8002c24:	f04f 0101 	mov.w	r1, #1
 8002c28:	f7ff fb0c 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002c2c:	f04f 0004 	mov.w	r0, #4
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f7ff fb06 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002c38:	e102      	b.n	8002e40 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM5)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d10c      	bne.n	8002c62 <TIM_DeInit+0xca>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002c48:	f04f 0008 	mov.w	r0, #8
 8002c4c:	f04f 0101 	mov.w	r1, #1
 8002c50:	f7ff faf8 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002c54:	f04f 0008 	mov.w	r0, #8
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	f7ff faf2 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002c60:	e0ee      	b.n	8002e40 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM6)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d10c      	bne.n	8002c8a <TIM_DeInit+0xf2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002c70:	f04f 0010 	mov.w	r0, #16
 8002c74:	f04f 0101 	mov.w	r1, #1
 8002c78:	f7ff fae4 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8002c7c:	f04f 0010 	mov.w	r0, #16
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	f7ff fade 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002c88:	e0da      	b.n	8002e40 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM7)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d10c      	bne.n	8002cb2 <TIM_DeInit+0x11a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002c98:	f04f 0020 	mov.w	r0, #32
 8002c9c:	f04f 0101 	mov.w	r1, #1
 8002ca0:	f7ff fad0 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002ca4:	f04f 0020 	mov.w	r0, #32
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	f7ff faca 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002cb0:	e0c6      	b.n	8002e40 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM8)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002cb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10c      	bne.n	8002cda <TIM_DeInit+0x142>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002cc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cc4:	f04f 0101 	mov.w	r1, #1
 8002cc8:	f7ff fa90 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8002ccc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	f7ff fa8a 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002cd8:	e0b2      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM9)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8002ce0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10c      	bne.n	8002d02 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002ce8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cec:	f04f 0101 	mov.w	r1, #1
 8002cf0:	f7ff fa7c 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8002cf4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f7ff fa76 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002d00:	e09e      	b.n	8002e40 <TIM_DeInit+0x2a8>
   }  
  else if (TIMx == TIM10)
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002d08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d10c      	bne.n	8002d2a <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002d10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d14:	f04f 0101 	mov.w	r1, #1
 8002d18:	f7ff fa68 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8002d1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	f7ff fa62 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002d28:	e08a      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM11) 
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002d30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d10c      	bne.n	8002d52 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002d38:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d3c:	f04f 0101 	mov.w	r1, #1
 8002d40:	f7ff fa54 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8002d44:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	f7ff fa4e 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002d50:	e076      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM12)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10c      	bne.n	8002d7a <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8002d60:	f04f 0040 	mov.w	r0, #64	; 0x40
 8002d64:	f04f 0101 	mov.w	r1, #1
 8002d68:	f7ff fa6c 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8002d6c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	f7ff fa66 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002d78:	e062      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM13) 
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d10c      	bne.n	8002da2 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8002d88:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002d8c:	f04f 0101 	mov.w	r1, #1
 8002d90:	f7ff fa58 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8002d94:	f04f 0080 	mov.w	r0, #128	; 0x80
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	f7ff fa52 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002da0:	e04e      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM14) 
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10c      	bne.n	8002dca <TIM_DeInit+0x232>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002db0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002db4:	f04f 0101 	mov.w	r1, #1
 8002db8:	f7ff fa44 	bl	8002244 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8002dbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	f7ff fa3e 	bl	8002244 <RCC_APB1PeriphResetCmd>
 8002dc8:	e03a      	b.n	8002e40 <TIM_DeInit+0x2a8>
  }        
  else if (TIMx == TIM15)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dd0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d10c      	bne.n	8002df2 <TIM_DeInit+0x25a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8002dd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002ddc:	f04f 0101 	mov.w	r1, #1
 8002de0:	f7ff fa04 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8002de4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	f7ff f9fe 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002df0:	e026      	b.n	8002e40 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM16)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002df8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d10c      	bne.n	8002e1a <TIM_DeInit+0x282>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002e00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e04:	f04f 0101 	mov.w	r1, #1
 8002e08:	f7ff f9f0 	bl	80021ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8002e0c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e10:	f04f 0100 	mov.w	r1, #0
 8002e14:	f7ff f9ea 	bl	80021ec <RCC_APB2PeriphResetCmd>
 8002e18:	e012      	b.n	8002e40 <TIM_DeInit+0x2a8>
  } 
  else
  {
    if (TIMx == TIM17)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002e20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d10b      	bne.n	8002e40 <TIM_DeInit+0x2a8>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002e28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e2c:	f04f 0101 	mov.w	r1, #1
 8002e30:	f7ff f9dc 	bl	80021ec <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002e34:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f7ff f9d6 	bl	80021ec <RCC_APB2PeriphResetCmd>
    }  
  }
}
 8002e40:	f107 0708 	add.w	r7, r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002e64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d01f      	beq.n	8002eac <TIM_TimeBaseInit+0x64>
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002e72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d018      	beq.n	8002eac <TIM_TimeBaseInit+0x64>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d014      	beq.n	8002eac <TIM_TimeBaseInit+0x64>
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d00d      	beq.n	8002eac <TIM_TimeBaseInit+0x64>
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d006      	beq.n	8002eac <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ea4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d108      	bne.n	8002ebe <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	885a      	ldrh	r2, [r3, #2]
 8002eb8:	89fb      	ldrh	r3, [r7, #14]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d00f      	beq.n	8002eec <TIM_TimeBaseInit+0xa4>
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ed2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d008      	beq.n	8002eec <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	88da      	ldrh	r2, [r3, #6]
 8002ee6:	89fb      	ldrh	r3, [r7, #14]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	89fa      	ldrh	r2, [r7, #14]
 8002ef0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	889a      	ldrh	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002f08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d01b      	beq.n	8002f48 <TIM_TimeBaseInit+0x100>
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002f16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d014      	beq.n	8002f48 <TIM_TimeBaseInit+0x100>
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d00d      	beq.n	8002f48 <TIM_TimeBaseInit+0x100>
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002f32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d006      	beq.n	8002f48 <TIM_TimeBaseInit+0x100>
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002f40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d104      	bne.n	8002f52 <TIM_TimeBaseInit+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	7a1b      	ldrb	r3, [r3, #8]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f04f 0201 	mov.w	r2, #1
 8002f58:	829a      	strh	r2, [r3, #20]
}
 8002f5a:	f107 0714 	add.w	r7, r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	817b      	strh	r3, [r7, #10]
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	81fb      	strh	r3, [r7, #14]
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8c1b      	ldrh	r3, [r3, #32]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8c1b      	ldrh	r3, [r3, #32]
 8002f94:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	889b      	ldrh	r3, [r3, #4]
 8002f9a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8b1b      	ldrh	r3, [r3, #24]
 8002fa0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	f023 0303 	bic.w	r3, r3, #3
 8002fb0:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	881a      	ldrh	r2, [r3, #0]
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	f023 0302 	bic.w	r3, r3, #2
 8002fc2:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	891a      	ldrh	r2, [r3, #8]
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	885a      	ldrh	r2, [r3, #2]
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002fde:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d01b      	beq.n	800301e <TIM_OC1Init+0xba>
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d014      	beq.n	800301e <TIM_OC1Init+0xba>
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ffa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d00d      	beq.n	800301e <TIM_OC1Init+0xba>
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003008:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800300c:	429a      	cmp	r2, r3
 800300e:	d006      	beq.n	800301e <TIM_OC1Init+0xba>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8003016:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800301a:	429a      	cmp	r2, r3
 800301c:	d123      	bne.n	8003066 <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	f023 0308 	bic.w	r3, r3, #8
 8003024:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	895a      	ldrh	r2, [r3, #10]
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	4313      	orrs	r3, r2
 800302e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003030:	89fb      	ldrh	r3, [r7, #14]
 8003032:	f023 0304 	bic.w	r3, r3, #4
 8003036:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	889a      	ldrh	r2, [r3, #4]
 800303c:	89fb      	ldrh	r3, [r7, #14]
 800303e:	4313      	orrs	r3, r2
 8003040:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8003042:	89bb      	ldrh	r3, [r7, #12]
 8003044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003048:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800304a:	89bb      	ldrh	r3, [r7, #12]
 800304c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003050:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	899a      	ldrh	r2, [r3, #12]
 8003056:	89bb      	ldrh	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	89da      	ldrh	r2, [r3, #14]
 8003060:	89bb      	ldrh	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	89ba      	ldrh	r2, [r7, #12]
 800306a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	897a      	ldrh	r2, [r7, #10]
 8003070:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	88da      	ldrh	r2, [r3, #6]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	89fa      	ldrh	r2, [r7, #14]
 800307e:	841a      	strh	r2, [r3, #32]
}
 8003080:	f107 0714 	add.w	r7, r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop

0800308c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	81fb      	strh	r3, [r7, #14]
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8c1b      	ldrh	r3, [r3, #32]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f023 0310 	bic.w	r3, r3, #16
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8c1b      	ldrh	r3, [r3, #32]
 80030bc:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	889b      	ldrh	r3, [r3, #4]
 80030c2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8b1b      	ldrh	r3, [r3, #24]
 80030c8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d0:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d8:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80030ea:	89fb      	ldrh	r3, [r7, #14]
 80030ec:	f023 0320 	bic.w	r3, r3, #32
 80030f0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	891b      	ldrh	r3, [r3, #8]
 80030f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	89fb      	ldrh	r3, [r7, #14]
 80030fe:	4313      	orrs	r3, r2
 8003100:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	885b      	ldrh	r3, [r3, #2]
 8003106:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800310a:	b29a      	uxth	r2, r3
 800310c:	89fb      	ldrh	r3, [r7, #14]
 800310e:	4313      	orrs	r3, r2
 8003110:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003118:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800311c:	429a      	cmp	r2, r3
 800311e:	d006      	beq.n	800312e <TIM_OC2Init+0xa2>
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003126:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800312a:	429a      	cmp	r2, r3
 800312c:	d12f      	bne.n	800318e <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003134:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	895b      	ldrh	r3, [r3, #10]
 800313a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800313e:	b29a      	uxth	r2, r3
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	4313      	orrs	r3, r2
 8003144:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	889b      	ldrh	r3, [r3, #4]
 8003152:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003156:	b29a      	uxth	r2, r3
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	4313      	orrs	r3, r2
 800315c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 800315e:	89bb      	ldrh	r3, [r7, #12]
 8003160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003164:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8003166:	89bb      	ldrh	r3, [r7, #12]
 8003168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800316c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	899b      	ldrh	r3, [r3, #12]
 8003172:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003176:	b29a      	uxth	r2, r3
 8003178:	89bb      	ldrh	r3, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	89db      	ldrh	r3, [r3, #14]
 8003182:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003186:	b29a      	uxth	r2, r3
 8003188:	89bb      	ldrh	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	89ba      	ldrh	r2, [r7, #12]
 8003192:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	897a      	ldrh	r2, [r7, #10]
 8003198:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	88da      	ldrh	r2, [r3, #6]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	89fa      	ldrh	r2, [r7, #14]
 80031a6:	841a      	strh	r2, [r3, #32]
}
 80031a8:	f107 0714 	add.w	r7, r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop

080031b4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	817b      	strh	r3, [r7, #10]
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	81fb      	strh	r3, [r7, #14]
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8c1b      	ldrh	r3, [r3, #32]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8c1b      	ldrh	r3, [r3, #32]
 80031e4:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	889b      	ldrh	r3, [r3, #4]
 80031ea:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8b9b      	ldrh	r3, [r3, #28]
 80031f0:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80031f2:	897b      	ldrh	r3, [r7, #10]
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80031fa:	897b      	ldrh	r3, [r7, #10]
 80031fc:	f023 0303 	bic.w	r3, r3, #3
 8003200:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	4313      	orrs	r3, r2
 800320a:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800320c:	89fb      	ldrh	r3, [r7, #14]
 800320e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003212:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	891b      	ldrh	r3, [r3, #8]
 8003218:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800321c:	b29a      	uxth	r2, r3
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	4313      	orrs	r3, r2
 8003222:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	885b      	ldrh	r3, [r3, #2]
 8003228:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800322c:	b29a      	uxth	r2, r3
 800322e:	89fb      	ldrh	r3, [r7, #14]
 8003230:	4313      	orrs	r3, r2
 8003232:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800323a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800323e:	429a      	cmp	r2, r3
 8003240:	d006      	beq.n	8003250 <TIM_OC3Init+0x9c>
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003248:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800324c:	429a      	cmp	r2, r3
 800324e:	d12f      	bne.n	80032b0 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8003250:	89fb      	ldrh	r3, [r7, #14]
 8003252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003256:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	895b      	ldrh	r3, [r3, #10]
 800325c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003260:	b29a      	uxth	r2, r3
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	4313      	orrs	r3, r2
 8003266:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8003268:	89fb      	ldrh	r3, [r7, #14]
 800326a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800326e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	889b      	ldrh	r3, [r3, #4]
 8003274:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003278:	b29a      	uxth	r2, r3
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	4313      	orrs	r3, r2
 800327e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8003280:	89bb      	ldrh	r3, [r7, #12]
 8003282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003286:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8003288:	89bb      	ldrh	r3, [r7, #12]
 800328a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800328e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	899b      	ldrh	r3, [r3, #12]
 8003294:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003298:	b29a      	uxth	r2, r3
 800329a:	89bb      	ldrh	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	89db      	ldrh	r3, [r3, #14]
 80032a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	89bb      	ldrh	r3, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	89ba      	ldrh	r2, [r7, #12]
 80032b4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	897a      	ldrh	r2, [r7, #10]
 80032ba:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	88da      	ldrh	r2, [r3, #6]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	89fa      	ldrh	r2, [r7, #14]
 80032c8:	841a      	strh	r2, [r3, #32]
}
 80032ca:	f107 0714 	add.w	r7, r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	81bb      	strh	r3, [r7, #12]
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8c1b      	ldrh	r3, [r3, #32]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8c1b      	ldrh	r3, [r3, #32]
 8003304:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	889b      	ldrh	r3, [r3, #4]
 800330a:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8b9b      	ldrh	r3, [r3, #28]
 8003310:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8003312:	89bb      	ldrh	r3, [r7, #12]
 8003314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003318:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 800331a:	89bb      	ldrh	r3, [r7, #12]
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800332a:	b29a      	uxth	r2, r3
 800332c:	89bb      	ldrh	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8003332:	897b      	ldrh	r3, [r7, #10]
 8003334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003338:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	891b      	ldrh	r3, [r3, #8]
 800333e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003342:	b29a      	uxth	r2, r3
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	4313      	orrs	r3, r2
 8003348:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	885b      	ldrh	r3, [r3, #2]
 800334e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003352:	b29a      	uxth	r2, r3
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	4313      	orrs	r3, r2
 8003358:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003360:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003364:	429a      	cmp	r2, r3
 8003366:	d006      	beq.n	8003376 <TIM_OC4Init+0xa2>
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800336e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003372:	429a      	cmp	r2, r3
 8003374:	d10b      	bne.n	800338e <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8003376:	89fb      	ldrh	r3, [r7, #14]
 8003378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	899b      	ldrh	r3, [r3, #12]
 8003382:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8003386:	b29a      	uxth	r2, r3
 8003388:	89fb      	ldrh	r3, [r7, #14]
 800338a:	4313      	orrs	r3, r2
 800338c:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	89fa      	ldrh	r2, [r7, #14]
 8003392:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	89ba      	ldrh	r2, [r7, #12]
 8003398:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	88da      	ldrh	r2, [r3, #6]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	897a      	ldrh	r2, [r7, #10]
 80033a8:	841a      	strh	r2, [r3, #32]
}
 80033aa:	f107 0714 	add.w	r7, r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80033ca:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033cc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033d0:	891b      	ldrh	r3, [r3, #8]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f001 f9d4 	bl	8004780 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	88db      	ldrh	r3, [r3, #6]
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4619      	mov	r1, r3
 80033e0:	f001 f876 	bl	80044d0 <TIM_SetIC1Prescaler>
 80033e4:	e036      	b.n	8003454 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d10f      	bne.n	800340e <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80033f2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033f4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80033f8:	891b      	ldrh	r3, [r3, #8]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 fa32 	bl	8004864 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	88db      	ldrh	r3, [r3, #6]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4619      	mov	r1, r3
 8003408:	f001 f87e 	bl	8004508 <TIM_SetIC2Prescaler>
 800340c:	e022      	b.n	8003454 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	2b08      	cmp	r3, #8
 8003414:	d10f      	bne.n	8003436 <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800341a:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800341c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800341e:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8003420:	891b      	ldrh	r3, [r3, #8]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 faa0 	bl	8004968 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	88db      	ldrh	r3, [r3, #6]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4619      	mov	r1, r3
 8003430:	f001 f888 	bl	8004544 <TIM_SetIC3Prescaler>
 8003434:	e00e      	b.n	8003454 <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800343a:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800343c:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003440:	891b      	ldrh	r3, [r3, #8]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f001 fb0a 	bl	8004a5c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	88db      	ldrh	r3, [r3, #6]
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4619      	mov	r1, r3
 8003450:	f001 f894 	bl	800457c <TIM_SetIC4Prescaler>
  }
}
 8003454:	f107 0708 	add.w	r7, r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800346c:	f04f 0301 	mov.w	r3, #1
 8003470:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	885b      	ldrh	r3, [r3, #2]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800347a:	f04f 0302 	mov.w	r3, #2
 800347e:	81fb      	strh	r3, [r7, #14]
 8003480:	e002      	b.n	8003488 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	889b      	ldrh	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d103      	bne.n	8003498 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8003490:	f04f 0302 	mov.w	r3, #2
 8003494:	81bb      	strh	r3, [r7, #12]
 8003496:	e002      	b.n	800349e <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8003498:	f04f 0301 	mov.w	r3, #1
 800349c:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11c      	bne.n	80034e0 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	8859      	ldrh	r1, [r3, #2]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80034ae:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80034b0:	891b      	ldrh	r3, [r3, #8]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f001 f964 	bl	8004780 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	88db      	ldrh	r3, [r3, #6]
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4619      	mov	r1, r3
 80034c0:	f001 f806 	bl	80044d0 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	891b      	ldrh	r3, [r3, #8]
 80034c8:	89f9      	ldrh	r1, [r7, #14]
 80034ca:	89ba      	ldrh	r2, [r7, #12]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f001 f9c9 	bl	8004864 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	88db      	ldrh	r3, [r3, #6]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4619      	mov	r1, r3
 80034da:	f001 f815 	bl	8004508 <TIM_SetIC2Prescaler>
 80034de:	e01b      	b.n	8003518 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	8859      	ldrh	r1, [r3, #2]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80034e8:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80034ea:	891b      	ldrh	r3, [r3, #8]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f001 f9b9 	bl	8004864 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	88db      	ldrh	r3, [r3, #6]
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f001 f805 	bl	8004508 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	891b      	ldrh	r3, [r3, #8]
 8003502:	89f9      	ldrh	r1, [r7, #14]
 8003504:	89ba      	ldrh	r2, [r7, #12]
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f001 f93a 	bl	8004780 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	88db      	ldrh	r3, [r3, #6]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4619      	mov	r1, r3
 8003514:	f000 ffdc 	bl	80044d0 <TIM_SetIC1Prescaler>
  }
}
 8003518:	f107 0710 	add.w	r7, r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	885b      	ldrh	r3, [r3, #2]
 8003532:	4313      	orrs	r3, r2
 8003534:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800353a:	4313      	orrs	r3, r2
 800353c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003542:	4313      	orrs	r3, r2
 8003544:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800354a:	4313      	orrs	r3, r2
 800354c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003552:	4313      	orrs	r3, r2
 8003554:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800355a:	4313      	orrs	r3, r2
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8003564:	f107 070c 	add.w	r7, r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop

08003570 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800357e:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	721a      	strb	r2, [r3, #8]
}
 80035a0:	f107 070c 	add.w	r7, r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop

080035ac <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	81da      	strh	r2, [r3, #14]
}
 80035f4:	f107 070c 	add.w	r7, r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f04f 0201 	mov.w	r2, #1
 800361e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	811a      	strh	r2, [r3, #8]
}
 8003630:	f107 070c 	add.w	r7, r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop

0800363c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	819a      	strh	r2, [r3, #12]
}
 800367c:	f107 070c 	add.w	r7, r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop

08003688 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	e007      	b.n	80036bc <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	801a      	strh	r2, [r3, #0]
  }
}
 80036bc:	f107 070c 	add.w	r7, r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80036f2:	e00b      	b.n	800370c <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003700:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800370c:	f107 070c 	add.w	r7, r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	460a      	mov	r2, r1
 8003724:	807a      	strh	r2, [r7, #2]
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	899b      	ldrh	r3, [r3, #12]
 8003732:	b29a      	uxth	r2, r3
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	4313      	orrs	r3, r2
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	819a      	strh	r2, [r3, #12]
 800373e:	e00a      	b.n	8003756 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	899b      	ldrh	r3, [r3, #12]
 8003744:	b29a      	uxth	r2, r3
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	ea6f 0303 	mvn.w	r3, r3
 800374c:	b29b      	uxth	r3, r3
 800374e:	4013      	ands	r3, r2
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	819a      	strh	r2, [r3, #12]
  }
}
 8003756:	f107 070c 	add.w	r7, r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	829a      	strh	r2, [r3, #20]
}
 8003772:	f107 070c 	add.w	r7, r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	460a      	mov	r2, r1
 8003788:	807a      	strh	r2, [r7, #2]
 800378a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800378c:	887a      	ldrh	r2, [r7, #2]
 800378e:	883b      	ldrh	r3, [r7, #0]
 8003790:	4313      	orrs	r3, r2
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800379a:	f107 070c 	add.w	r7, r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	460a      	mov	r2, r1
 80037b0:	807a      	strh	r2, [r7, #2]
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	899b      	ldrh	r3, [r3, #12]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	819a      	strh	r2, [r3, #12]
 80037ca:	e00a      	b.n	80037e2 <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	899b      	ldrh	r3, [r3, #12]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	ea6f 0303 	mvn.w	r3, r3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4013      	ands	r3, r2
 80037dc:	b29a      	uxth	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	819a      	strh	r2, [r3, #12]
  }
}
 80037e2:	f107 070c 	add.w	r7, r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	891b      	ldrh	r3, [r3, #8]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f023 0307 	bic.w	r3, r3, #7
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	811a      	strh	r2, [r3, #8]
}
 8003804:	f107 070c 	add.w	r7, r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop

08003810 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4619      	mov	r1, r3
 8003822:	f000 f8d3 	bl	80039cc <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	891b      	ldrh	r3, [r3, #8]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f043 0307 	orr.w	r3, r3, #7
 8003830:	b29a      	uxth	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	811a      	strh	r2, [r3, #8]
}
 8003836:	f107 0708 	add.w	r7, r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop

08003840 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	8179      	strh	r1, [r7, #10]
 800384a:	813a      	strh	r2, [r7, #8]
 800384c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	2b60      	cmp	r3, #96	; 0x60
 8003852:	d108      	bne.n	8003866 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003854:	893a      	ldrh	r2, [r7, #8]
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	4611      	mov	r1, r2
 800385c:	f04f 0201 	mov.w	r2, #1
 8003860:	f001 f800 	bl	8004864 <TI2_Config>
 8003864:	e007      	b.n	8003876 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003866:	893a      	ldrh	r2, [r7, #8]
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	4611      	mov	r1, r2
 800386e:	f04f 0201 	mov.w	r2, #1
 8003872:	f000 ff85 	bl	8004780 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	4619      	mov	r1, r3
 800387c:	f000 f8a6 	bl	80039cc <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	891b      	ldrh	r3, [r3, #8]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f043 0307 	orr.w	r3, r3, #7
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	811a      	strh	r2, [r3, #8]
}
 8003890:	f107 0710 	add.w	r7, r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	8179      	strh	r1, [r7, #10]
 80038a2:	813a      	strh	r2, [r7, #8]
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80038ac:	8979      	ldrh	r1, [r7, #10]
 80038ae:	893a      	ldrh	r2, [r7, #8]
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f834 	bl	8003920 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	891b      	ldrh	r3, [r3, #8]
 80038bc:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80038be:	8afb      	ldrh	r3, [r7, #22]
 80038c0:	f023 0307 	bic.w	r3, r3, #7
 80038c4:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	f043 0307 	orr.w	r3, r3, #7
 80038cc:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d4:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80038d6:	8afb      	ldrh	r3, [r7, #22]
 80038d8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80038dc:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8afa      	ldrh	r2, [r7, #22]
 80038e2:	811a      	strh	r2, [r3, #8]
}
 80038e4:	f107 0718 	add.w	r7, r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	8179      	strh	r1, [r7, #10]
 80038f6:	813a      	strh	r2, [r7, #8]
 80038f8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80038fa:	8979      	ldrh	r1, [r7, #10]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f80d 	bl	8003920 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	891b      	ldrh	r3, [r3, #8]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	811a      	strh	r2, [r3, #8]
}
 8003916:	f107 0710 	add.w	r7, r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop

08003920 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	8179      	strh	r1, [r7, #10]
 800392a:	813a      	strh	r2, [r7, #8]
 800392c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	891b      	ldrh	r3, [r3, #8]
 8003938:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 800393a:	8afb      	ldrh	r3, [r7, #22]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003946:	b29a      	uxth	r2, r3
 8003948:	893b      	ldrh	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	b29a      	uxth	r2, r3
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	4313      	orrs	r3, r2
 8003952:	b29a      	uxth	r2, r3
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	4313      	orrs	r3, r2
 8003958:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8afa      	ldrh	r2, [r7, #22]
 800395e:	811a      	strh	r2, [r3, #8]
}
 8003960:	f107 071c 	add.w	r7, r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop

0800396c <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	460a      	mov	r2, r1
 8003978:	807a      	strh	r2, [r7, #2]
 800397a:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	883a      	ldrh	r2, [r7, #0]
 8003986:	829a      	strh	r2, [r3, #20]
}
 8003988:	f107 070c 	add.w	r7, r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80039ac:	89fb      	ldrh	r3, [r7, #14]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80039b4:	89fa      	ldrh	r2, [r7, #14]
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	89fa      	ldrh	r2, [r7, #14]
 80039c0:	801a      	strh	r2, [r3, #0]
}
 80039c2:	f107 0714 	add.w	r7, r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	891b      	ldrh	r3, [r3, #8]
 80039e2:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80039ec:	89fa      	ldrh	r2, [r7, #14]
 80039ee:	887b      	ldrh	r3, [r7, #2]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	89fa      	ldrh	r2, [r7, #14]
 80039f8:	811a      	strh	r2, [r3, #8]
}
 80039fa:	f107 0714 	add.w	r7, r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	8179      	strh	r1, [r7, #10]
 8003a0e:	813a      	strh	r2, [r7, #8]
 8003a10:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	891b      	ldrh	r3, [r3, #8]
 8003a28:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8b1b      	ldrh	r3, [r3, #24]
 8003a2e:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8c1b      	ldrh	r3, [r3, #32]
 8003a34:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8003a36:	8afb      	ldrh	r3, [r7, #22]
 8003a38:	f023 0307 	bic.w	r3, r3, #7
 8003a3c:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8003a3e:	8afa      	ldrh	r2, [r7, #22]
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003a46:	8abb      	ldrh	r3, [r7, #20]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	f023 0303 	bic.w	r3, r3, #3
 8003a50:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003a52:	8abb      	ldrh	r3, [r7, #20]
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8003a5e:	8a7b      	ldrh	r3, [r7, #18]
 8003a60:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a64:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	8a7b      	ldrh	r3, [r7, #18]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8afa      	ldrh	r2, [r7, #22]
 8003a7e:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8aba      	ldrh	r2, [r7, #20]
 8003a84:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8a7a      	ldrh	r2, [r7, #18]
 8003a8a:	841a      	strh	r2, [r3, #32]
}
 8003a8c:	f107 071c 	add.w	r7, r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8b1b      	ldrh	r3, [r3, #24]
 8003aae:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8003ab0:	89fb      	ldrh	r3, [r7, #14]
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003ab8:	89fa      	ldrh	r2, [r7, #14]
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	89fa      	ldrh	r2, [r7, #14]
 8003ac4:	831a      	strh	r2, [r3, #24]
}
 8003ac6:	f107 0714 	add.w	r7, r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8b1b      	ldrh	r3, [r3, #24]
 8003ae6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8003ae8:	89fb      	ldrh	r3, [r7, #14]
 8003aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aee:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	89fb      	ldrh	r3, [r7, #14]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	89fa      	ldrh	r2, [r7, #14]
 8003b02:	831a      	strh	r2, [r3, #24]
}
 8003b04:	f107 0714 	add.w	r7, r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8b9b      	ldrh	r3, [r3, #28]
 8003b26:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8003b28:	89fb      	ldrh	r3, [r7, #14]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8003b30:	89fa      	ldrh	r2, [r7, #14]
 8003b32:	887b      	ldrh	r3, [r7, #2]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	89fa      	ldrh	r2, [r7, #14]
 8003b3c:	839a      	strh	r2, [r3, #28]
}
 8003b3e:	f107 0714 	add.w	r7, r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8b9b      	ldrh	r3, [r3, #28]
 8003b5e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b66:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	89fa      	ldrh	r2, [r7, #14]
 8003b7a:	839a      	strh	r2, [r3, #28]
}
 8003b7c:	f107 0714 	add.w	r7, r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop

08003b88 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	e007      	b.n	8003bbc <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	801a      	strh	r2, [r3, #0]
  }
}
 8003bbc:	f107 070c 	add.w	r7, r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop

08003bc8 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	889b      	ldrh	r3, [r3, #4]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	809a      	strh	r2, [r3, #4]
 8003bea:	e007      	b.n	8003bfc <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	889b      	ldrh	r3, [r3, #4]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	809a      	strh	r2, [r3, #4]
  }
}
 8003bfc:	f107 070c 	add.w	r7, r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop

08003c08 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	889b      	ldrh	r3, [r3, #4]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f043 0308 	orr.w	r3, r3, #8
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	809a      	strh	r2, [r3, #4]
 8003c2a:	e007      	b.n	8003c3c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	889b      	ldrh	r3, [r3, #4]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	809a      	strh	r2, [r3, #4]
  }
}
 8003c3c:	f107 070c 	add.w	r7, r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	889b      	ldrh	r3, [r3, #4]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	809a      	strh	r2, [r3, #4]
 8003c6a:	e007      	b.n	8003c7c <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	809a      	strh	r2, [r3, #4]
  }
}
 8003c7c:	f107 070c 	add.w	r7, r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8b1b      	ldrh	r3, [r3, #24]
 8003c9e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	f023 0308 	bic.w	r3, r3, #8
 8003ca6:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8003ca8:	89fa      	ldrh	r2, [r7, #14]
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	89fa      	ldrh	r2, [r7, #14]
 8003cb4:	831a      	strh	r2, [r3, #24]
}
 8003cb6:	f107 0714 	add.w	r7, r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8b1b      	ldrh	r3, [r3, #24]
 8003cd6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	89fb      	ldrh	r3, [r7, #14]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	89fa      	ldrh	r2, [r7, #14]
 8003cf2:	831a      	strh	r2, [r3, #24]
}
 8003cf4:	f107 0714 	add.w	r7, r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop

08003d00 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8b9b      	ldrh	r3, [r3, #28]
 8003d16:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	f023 0308 	bic.w	r3, r3, #8
 8003d1e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8003d20:	89fa      	ldrh	r2, [r7, #14]
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	89fa      	ldrh	r2, [r7, #14]
 8003d2c:	839a      	strh	r2, [r3, #28]
}
 8003d2e:	f107 0714 	add.w	r7, r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8b9b      	ldrh	r3, [r3, #28]
 8003d4e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8003d50:	89fb      	ldrh	r3, [r7, #14]
 8003d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d56:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	89fa      	ldrh	r2, [r7, #14]
 8003d6a:	839a      	strh	r2, [r3, #28]
}
 8003d6c:	f107 0714 	add.w	r7, r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop

08003d78 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8b1b      	ldrh	r3, [r3, #24]
 8003d8e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8003d90:	89fb      	ldrh	r3, [r7, #14]
 8003d92:	f023 0304 	bic.w	r3, r3, #4
 8003d96:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003d98:	89fa      	ldrh	r2, [r7, #14]
 8003d9a:	887b      	ldrh	r3, [r7, #2]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	89fa      	ldrh	r2, [r7, #14]
 8003da4:	831a      	strh	r2, [r3, #24]
}
 8003da6:	f107 0714 	add.w	r7, r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8b1b      	ldrh	r3, [r3, #24]
 8003dc6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dce:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	89fb      	ldrh	r3, [r7, #14]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	89fa      	ldrh	r2, [r7, #14]
 8003de2:	831a      	strh	r2, [r3, #24]
}
 8003de4:	f107 0714 	add.w	r7, r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8b9b      	ldrh	r3, [r3, #28]
 8003e06:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8003e08:	89fb      	ldrh	r3, [r7, #14]
 8003e0a:	f023 0304 	bic.w	r3, r3, #4
 8003e0e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003e10:	89fa      	ldrh	r2, [r7, #14]
 8003e12:	887b      	ldrh	r3, [r7, #2]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	89fa      	ldrh	r2, [r7, #14]
 8003e1c:	839a      	strh	r2, [r3, #28]
}
 8003e1e:	f107 0714 	add.w	r7, r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8b9b      	ldrh	r3, [r3, #28]
 8003e3e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e46:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	89fa      	ldrh	r2, [r7, #14]
 8003e5a:	839a      	strh	r2, [r3, #28]
}
 8003e5c:	f107 0714 	add.w	r7, r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8b1b      	ldrh	r3, [r3, #24]
 8003e7e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8003e80:	89fb      	ldrh	r3, [r7, #14]
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e86:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003e88:	89fa      	ldrh	r2, [r7, #14]
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	89fa      	ldrh	r2, [r7, #14]
 8003e94:	831a      	strh	r2, [r3, #24]
}
 8003e96:	f107 0714 	add.w	r7, r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8b1b      	ldrh	r3, [r3, #24]
 8003eb6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8003eb8:	89fb      	ldrh	r3, [r7, #14]
 8003eba:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003ebe:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003ec2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	89fa      	ldrh	r2, [r7, #14]
 8003ed6:	831a      	strh	r2, [r3, #24]
}
 8003ed8:	f107 0714 	add.w	r7, r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop

08003ee4 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8b9b      	ldrh	r3, [r3, #28]
 8003efa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f02:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8003f04:	89fa      	ldrh	r2, [r7, #14]
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	89fa      	ldrh	r2, [r7, #14]
 8003f10:	839a      	strh	r2, [r3, #28]
}
 8003f12:	f107 0714 	add.w	r7, r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8b9b      	ldrh	r3, [r3, #28]
 8003f32:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8003f3a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8003f3e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	89fa      	ldrh	r2, [r7, #14]
 8003f52:	839a      	strh	r2, [r3, #28]
}
 8003f54:	f107 0714 	add.w	r7, r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop

08003f60 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8c1b      	ldrh	r3, [r3, #32]
 8003f76:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8003f78:	89fb      	ldrh	r3, [r7, #14]
 8003f7a:	f023 0302 	bic.w	r3, r3, #2
 8003f7e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8003f80:	89fa      	ldrh	r2, [r7, #14]
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	89fa      	ldrh	r2, [r7, #14]
 8003f8c:	841a      	strh	r2, [r3, #32]
}
 8003f8e:	f107 0714 	add.w	r7, r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8c1b      	ldrh	r3, [r3, #32]
 8003fae:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8003fb0:	89fb      	ldrh	r3, [r7, #14]
 8003fb2:	f023 0308 	bic.w	r3, r3, #8
 8003fb6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8003fb8:	89fa      	ldrh	r2, [r7, #14]
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	89fa      	ldrh	r2, [r7, #14]
 8003fc4:	841a      	strh	r2, [r3, #32]
}
 8003fc6:	f107 0714 	add.w	r7, r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8c1b      	ldrh	r3, [r3, #32]
 8003fe6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8003fe8:	89fb      	ldrh	r3, [r7, #14]
 8003fea:	f023 0320 	bic.w	r3, r3, #32
 8003fee:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	89fb      	ldrh	r3, [r7, #14]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	89fa      	ldrh	r2, [r7, #14]
 8004002:	841a      	strh	r2, [r3, #32]
}
 8004004:	f107 0714 	add.w	r7, r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8c1b      	ldrh	r3, [r3, #32]
 8004026:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8004030:	887b      	ldrh	r3, [r7, #2]
 8004032:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004036:	b29a      	uxth	r2, r3
 8004038:	89fb      	ldrh	r3, [r7, #14]
 800403a:	4313      	orrs	r3, r2
 800403c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	89fa      	ldrh	r2, [r7, #14]
 8004042:	841a      	strh	r2, [r3, #32]
}
 8004044:	f107 0714 	add.w	r7, r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop

08004050 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8c1b      	ldrh	r3, [r3, #32]
 8004066:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8004068:	89fb      	ldrh	r3, [r7, #14]
 800406a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800406e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8004070:	887b      	ldrh	r3, [r7, #2]
 8004072:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004076:	b29a      	uxth	r2, r3
 8004078:	89fb      	ldrh	r3, [r7, #14]
 800407a:	4313      	orrs	r3, r2
 800407c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	89fa      	ldrh	r2, [r7, #14]
 8004082:	841a      	strh	r2, [r3, #32]
}
 8004084:	f107 0714 	add.w	r7, r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8c1b      	ldrh	r3, [r3, #32]
 80040a6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ae:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	89fb      	ldrh	r3, [r7, #14]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	89fa      	ldrh	r2, [r7, #14]
 80040c2:	841a      	strh	r2, [r3, #32]
}
 80040c4:	f107 0714 	add.w	r7, r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8c1b      	ldrh	r3, [r3, #32]
 80040e6:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ee:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	89fa      	ldrh	r2, [r7, #14]
 8004102:	841a      	strh	r2, [r3, #32]
}
 8004104:	f107 0714 	add.w	r7, r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	460a      	mov	r2, r1
 800411c:	807a      	strh	r2, [r7, #2]
 800411e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	f04f 0201 	mov.w	r2, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8c1b      	ldrh	r3, [r3, #32]
 8004136:	b29a      	uxth	r2, r3
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	ea6f 0303 	mvn.w	r3, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	4013      	ands	r3, r2
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8c1b      	ldrh	r3, [r3, #32]
 800414c:	b29a      	uxth	r2, r3
 800414e:	8839      	ldrh	r1, [r7, #0]
 8004150:	887b      	ldrh	r3, [r7, #2]
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	b29b      	uxth	r3, r3
 8004158:	4313      	orrs	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	841a      	strh	r2, [r3, #32]
}
 8004160:	f107 0714 	add.w	r7, r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop

0800416c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	460a      	mov	r2, r1
 8004178:	807a      	strh	r2, [r7, #2]
 800417a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 8004182:	887b      	ldrh	r3, [r7, #2]
 8004184:	f04f 0204 	mov.w	r2, #4
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8c1b      	ldrh	r3, [r3, #32]
 8004192:	b29a      	uxth	r2, r3
 8004194:	89fb      	ldrh	r3, [r7, #14]
 8004196:	ea6f 0303 	mvn.w	r3, r3
 800419a:	b29b      	uxth	r3, r3
 800419c:	4013      	ands	r3, r2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8c1b      	ldrh	r3, [r3, #32]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	8839      	ldrh	r1, [r7, #0]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4313      	orrs	r3, r2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	841a      	strh	r2, [r3, #32]
}
 80041bc:	f107 0714 	add.w	r7, r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	460a      	mov	r2, r1
 80041d4:	807a      	strh	r2, [r7, #2]
 80041d6:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f103 0318 	add.w	r3, r3, #24
 80041ee:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	f04f 0201 	mov.w	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8c1b      	ldrh	r3, [r3, #32]
 8004200:	b29a      	uxth	r2, r3
 8004202:	897b      	ldrh	r3, [r7, #10]
 8004204:	ea6f 0303 	mvn.w	r3, r3
 8004208:	b29b      	uxth	r3, r3
 800420a:	4013      	ands	r3, r2
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <TIM_SelectOCxM+0x56>
 8004218:	887b      	ldrh	r3, [r7, #2]
 800421a:	2b08      	cmp	r3, #8
 800421c:	d113      	bne.n	8004246 <TIM_SelectOCxM+0x7e>
  {
    tmp += (TIM_Channel>>1);
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	18d3      	adds	r3, r2, r3
 800422a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004236:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	883a      	ldrh	r2, [r7, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e018      	b.n	8004278 <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	f1a3 0304 	sub.w	r3, r3, #4
 800424c:	b29b      	uxth	r3, r3
 800424e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	18d3      	adds	r3, r2, r3
 8004258:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004264:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	6811      	ldr	r1, [r2, #0]
 800426c:	883a      	ldrh	r2, [r7, #0]
 800426e:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004272:	b292      	uxth	r2, r2
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
  }
}
 8004278:	f107 0714 	add.w	r7, r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop

08004284 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	e007      	b.n	80042b8 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f023 0302 	bic.w	r3, r3, #2
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	801a      	strh	r2, [r3, #0]
  }
}
 80042b8:	f107 070c 	add.w	r7, r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop

080042c4 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f043 0304 	orr.w	r3, r3, #4
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	e007      	b.n	80042f8 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f023 0304 	bic.w	r3, r3, #4
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	801a      	strh	r2, [r3, #0]
  }
}
 80042f8:	f107 070c 	add.w	r7, r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop

08004304 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	889b      	ldrh	r3, [r3, #4]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	809a      	strh	r2, [r3, #4]
 8004326:	e007      	b.n	8004338 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	889b      	ldrh	r3, [r3, #4]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	809a      	strh	r2, [r3, #4]
  }
}
 8004338:	f107 070c 	add.w	r7, r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop

08004344 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f023 0308 	bic.w	r3, r3, #8
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29a      	uxth	r2, r3
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	4313      	orrs	r3, r2
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	801a      	strh	r2, [r3, #0]
}
 8004370:	f107 070c 	add.w	r7, r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop

0800437c <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	889b      	ldrh	r3, [r3, #4]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	889b      	ldrh	r3, [r3, #4]
 800439c:	b29a      	uxth	r2, r3
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	809a      	strh	r2, [r3, #4]
}
 80043a8:	f107 070c 	add.w	r7, r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop

080043b4 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	891b      	ldrh	r3, [r3, #8]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	891b      	ldrh	r3, [r3, #8]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	4313      	orrs	r3, r2
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	811a      	strh	r2, [r3, #8]
}
 80043e0:	f107 070c 	add.w	r7, r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop

080043ec <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	891b      	ldrh	r3, [r3, #8]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	891b      	ldrh	r3, [r3, #8]
 800440c:	b29a      	uxth	r2, r3
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	4313      	orrs	r3, r2
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	811a      	strh	r2, [r3, #8]
}
 8004418:	f107 070c 	add.w	r7, r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	887a      	ldrh	r2, [r7, #2]
 8004434:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8004436:	f107 070c 	add.w	r7, r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	887a      	ldrh	r2, [r7, #2]
 8004450:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8004452:	f107 070c 	add.w	r7, r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800446e:	f107 070c 	add.w	r7, r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	871a      	strh	r2, [r3, #56]	; 0x38
}
 800448a:	f107 070c 	add.w	r7, r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80044a6:	f107 070c 	add.w	r7, r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 80044c4:	f107 070c 	add.w	r7, r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8b1b      	ldrh	r3, [r3, #24]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f023 030c 	bic.w	r3, r3, #12
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8b1b      	ldrh	r3, [r3, #24]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	831a      	strh	r2, [r3, #24]
}
 80044fc:	f107 070c 	add.w	r7, r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8b1b      	ldrh	r3, [r3, #24]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8b1b      	ldrh	r3, [r3, #24]
 8004528:	b29a      	uxth	r2, r3
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004530:	b29b      	uxth	r3, r3
 8004532:	4313      	orrs	r3, r2
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	831a      	strh	r2, [r3, #24]
}
 800453a:	f107 070c 	add.w	r7, r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8b9b      	ldrh	r3, [r3, #28]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f023 030c 	bic.w	r3, r3, #12
 800455a:	b29a      	uxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8b9b      	ldrh	r3, [r3, #28]
 8004564:	b29a      	uxth	r2, r3
 8004566:	887b      	ldrh	r3, [r7, #2]
 8004568:	4313      	orrs	r3, r2
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	839a      	strh	r2, [r3, #28]
}
 8004570:	f107 070c 	add.w	r7, r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop

0800457c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8b9b      	ldrh	r3, [r3, #28]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8b9b      	ldrh	r3, [r3, #28]
 800459c:	b29a      	uxth	r2, r3
 800459e:	887b      	ldrh	r3, [r7, #2]
 80045a0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4313      	orrs	r3, r2
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	839a      	strh	r2, [r3, #28]
}
 80045ae:	f107 070c 	add.w	r7, r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	887b      	ldrh	r3, [r7, #2]
 80045dc:	4313      	orrs	r3, r2
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	801a      	strh	r2, [r3, #0]
}
 80045e4:	f107 070c 	add.w	r7, r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop

080045f0 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80045fc:	b29b      	uxth	r3, r3
}
 80045fe:	4618      	mov	r0, r3
 8004600:	f107 070c 	add.w	r7, r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop

0800460c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004618:	b29b      	uxth	r3, r3
}
 800461a:	4618      	mov	r0, r3
 800461c:	f107 070c 	add.w	r7, r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop

08004628 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004634:	b29b      	uxth	r3, r3
}
 8004636:	4618      	mov	r0, r3
 8004638:	f107 070c 	add.w	r7, r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004652:	b29b      	uxth	r3, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	f107 070c 	add.w	r7, r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800466c:	b29b      	uxth	r3, r3
}
 800466e:	4618      	mov	r0, r3
 8004670:	f107 070c 	add.w	r7, r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop

0800467c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	b29b      	uxth	r3, r3
}
 800468a:	4618      	mov	r0, r3
 800468c:	f107 070c 	add.w	r7, r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop

08004698 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8a1b      	ldrh	r3, [r3, #16]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	887b      	ldrh	r3, [r7, #2]
 80046b2:	4013      	ands	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80046ba:	f04f 0301 	mov.w	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e002      	b.n	80046c8 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	f107 0714 	add.w	r7, r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	ea6f 0303 	mvn.w	r3, r3
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	821a      	strh	r2, [r3, #16]
}
 80046f0:	f107 070c 	add.w	r7, r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop

080046fc <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	81bb      	strh	r3, [r7, #12]
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8a1b      	ldrh	r3, [r3, #16]
 800471e:	b29a      	uxth	r2, r3
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	4013      	ands	r3, r2
 8004724:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	899b      	ldrh	r3, [r3, #12]
 800472a:	b29a      	uxth	r2, r3
 800472c:	887b      	ldrh	r3, [r7, #2]
 800472e:	4013      	ands	r3, r2
 8004730:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8004732:	89bb      	ldrh	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d006      	beq.n	8004746 <TIM_GetITStatus+0x4a>
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800473e:	f04f 0301 	mov.w	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e002      	b.n	800474c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	f107 0714 	add.w	r7, r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	ea6f 0303 	mvn.w	r3, r3
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	821a      	strh	r2, [r3, #16]
}
 8004774:	f107 070c 	add.w	r7, r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	8179      	strh	r1, [r7, #10]
 800478a:	813a      	strh	r2, [r7, #8]
 800478c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	82bb      	strh	r3, [r7, #20]
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8c1b      	ldrh	r3, [r3, #32]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8b1b      	ldrh	r3, [r3, #24]
 80047ae:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8c1b      	ldrh	r3, [r3, #32]
 80047b4:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80047b6:	8abb      	ldrh	r3, [r7, #20]
 80047b8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80047bc:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	893b      	ldrh	r3, [r7, #8]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	8abb      	ldrh	r3, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80047d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047dc:	429a      	cmp	r2, r3
 80047de:	d01f      	beq.n	8004820 <TI1_Config+0xa0>
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80047e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d018      	beq.n	8004820 <TI1_Config+0xa0>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d014      	beq.n	8004820 <TI1_Config+0xa0>
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004800:	429a      	cmp	r2, r3
 8004802:	d00d      	beq.n	8004820 <TI1_Config+0xa0>
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800480a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800480e:	429a      	cmp	r2, r3
 8004810:	d006      	beq.n	8004820 <TI1_Config+0xa0>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004818:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800481c:	429a      	cmp	r2, r3
 800481e:	d10b      	bne.n	8004838 <TI1_Config+0xb8>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8004820:	8afb      	ldrh	r3, [r7, #22]
 8004822:	f023 0302 	bic.w	r3, r3, #2
 8004826:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004828:	897a      	ldrh	r2, [r7, #10]
 800482a:	8afb      	ldrh	r3, [r7, #22]
 800482c:	4313      	orrs	r3, r2
 800482e:	b29b      	uxth	r3, r3
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	82fb      	strh	r3, [r7, #22]
 8004836:	e00a      	b.n	800484e <TI1_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004838:	8afb      	ldrh	r3, [r7, #22]
 800483a:	f023 030a 	bic.w	r3, r3, #10
 800483e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8004840:	897a      	ldrh	r2, [r7, #10]
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	4313      	orrs	r3, r2
 8004846:	b29b      	uxth	r3, r3
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8aba      	ldrh	r2, [r7, #20]
 8004852:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8afa      	ldrh	r2, [r7, #22]
 8004858:	841a      	strh	r2, [r3, #32]
}
 800485a:	f107 071c 	add.w	r7, r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	8179      	strh	r1, [r7, #10]
 800486e:	813a      	strh	r2, [r7, #8]
 8004870:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	82bb      	strh	r3, [r7, #20]
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	82fb      	strh	r3, [r7, #22]
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8c1b      	ldrh	r3, [r3, #32]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f023 0310 	bic.w	r3, r3, #16
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8b1b      	ldrh	r3, [r3, #24]
 8004898:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8c1b      	ldrh	r3, [r3, #32]
 800489e:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80048a0:	897b      	ldrh	r3, [r7, #10]
 80048a2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80048a6:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80048a8:	8abb      	ldrh	r3, [r7, #20]
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ae:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80048b2:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80048b6:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80048be:	b29a      	uxth	r2, r3
 80048c0:	8abb      	ldrh	r3, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80048c6:	893b      	ldrh	r3, [r7, #8]
 80048c8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	8abb      	ldrh	r3, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80048da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048de:	429a      	cmp	r2, r3
 80048e0:	d01f      	beq.n	8004922 <TI2_Config+0xbe>
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80048e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d018      	beq.n	8004922 <TI2_Config+0xbe>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f6:	d014      	beq.n	8004922 <TI2_Config+0xbe>
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004902:	429a      	cmp	r2, r3
 8004904:	d00d      	beq.n	8004922 <TI2_Config+0xbe>
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800490c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004910:	429a      	cmp	r2, r3
 8004912:	d006      	beq.n	8004922 <TI2_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800491a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800491e:	429a      	cmp	r2, r3
 8004920:	d10b      	bne.n	800493a <TI2_Config+0xd6>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8004922:	8afb      	ldrh	r3, [r7, #22]
 8004924:	f023 0320 	bic.w	r3, r3, #32
 8004928:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800492a:	8a7a      	ldrh	r2, [r7, #18]
 800492c:	8afb      	ldrh	r3, [r7, #22]
 800492e:	4313      	orrs	r3, r2
 8004930:	b29b      	uxth	r3, r3
 8004932:	f043 0310 	orr.w	r3, r3, #16
 8004936:	82fb      	strh	r3, [r7, #22]
 8004938:	e00a      	b.n	8004950 <TI2_Config+0xec>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800493a:	8afb      	ldrh	r3, [r7, #22]
 800493c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004940:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8004942:	897a      	ldrh	r2, [r7, #10]
 8004944:	8afb      	ldrh	r3, [r7, #22]
 8004946:	4313      	orrs	r3, r2
 8004948:	b29b      	uxth	r3, r3
 800494a:	f043 0310 	orr.w	r3, r3, #16
 800494e:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8aba      	ldrh	r2, [r7, #20]
 8004954:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8afa      	ldrh	r2, [r7, #22]
 800495a:	841a      	strh	r2, [r3, #32]
}
 800495c:	f107 071c 	add.w	r7, r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop

08004968 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	8179      	strh	r1, [r7, #10]
 8004972:	813a      	strh	r2, [r7, #8]
 8004974:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	82bb      	strh	r3, [r7, #20]
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	82fb      	strh	r3, [r7, #22]
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8c1b      	ldrh	r3, [r3, #32]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8b9b      	ldrh	r3, [r3, #28]
 800499c:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8c1b      	ldrh	r3, [r3, #32]
 80049a2:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80049a4:	897b      	ldrh	r3, [r7, #10]
 80049a6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80049aa:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 80049ac:	8abb      	ldrh	r3, [r7, #20]
 80049ae:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80049b2:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	893b      	ldrh	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	8abb      	ldrh	r3, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80049ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d01f      	beq.n	8004a16 <TI3_Config+0xae>
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80049dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d018      	beq.n	8004a16 <TI3_Config+0xae>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d014      	beq.n	8004a16 <TI3_Config+0xae>
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d00d      	beq.n	8004a16 <TI3_Config+0xae>
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d006      	beq.n	8004a16 <TI3_Config+0xae>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d10b      	bne.n	8004a2e <TI3_Config+0xc6>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8004a16:	8afb      	ldrh	r3, [r7, #22]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8004a1e:	8a7a      	ldrh	r2, [r7, #18]
 8004a20:	8afb      	ldrh	r3, [r7, #22]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	82fb      	strh	r3, [r7, #22]
 8004a2c:	e00a      	b.n	8004a44 <TI3_Config+0xdc>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a2e:	8afb      	ldrh	r3, [r7, #22]
 8004a30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a34:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8004a36:	897a      	ldrh	r2, [r7, #10]
 8004a38:	8afb      	ldrh	r3, [r7, #22]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8aba      	ldrh	r2, [r7, #20]
 8004a48:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8afa      	ldrh	r2, [r7, #22]
 8004a4e:	841a      	strh	r2, [r3, #32]
}
 8004a50:	f107 071c 	add.w	r7, r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	8179      	strh	r1, [r7, #10]
 8004a66:	813a      	strh	r2, [r7, #8]
 8004a68:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	82bb      	strh	r3, [r7, #20]
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	82fb      	strh	r3, [r7, #22]
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8c1b      	ldrh	r3, [r3, #32]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8b9b      	ldrh	r3, [r3, #28]
 8004a90:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8c1b      	ldrh	r3, [r3, #32]
 8004a96:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8004a98:	897b      	ldrh	r3, [r7, #10]
 8004a9a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004a9e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8004aa0:	8abb      	ldrh	r3, [r7, #20]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004aaa:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8004aae:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	8abb      	ldrh	r3, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	8abb      	ldrh	r3, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004ad2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d01f      	beq.n	8004b1a <TI4_Config+0xbe>
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8004ae0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d018      	beq.n	8004b1a <TI4_Config+0xbe>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d014      	beq.n	8004b1a <TI4_Config+0xbe>
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d00d      	beq.n	8004b1a <TI4_Config+0xbe>
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d006      	beq.n	8004b1a <TI4_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10b      	bne.n	8004b32 <TI4_Config+0xd6>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8004b1a:	8afb      	ldrh	r3, [r7, #22]
 8004b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b20:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8004b22:	8a7a      	ldrh	r2, [r7, #18]
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b2e:	82fb      	strh	r3, [r7, #22]
 8004b30:	e00e      	b.n	8004b50 <TI4_Config+0xf4>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8004b32:	8afb      	ldrh	r3, [r7, #22]
 8004b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b38:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8004b3c:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8004b40:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8004b42:	897a      	ldrh	r2, [r7, #10]
 8004b44:	8afb      	ldrh	r3, [r7, #22]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b4e:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8aba      	ldrh	r2, [r7, #20]
 8004b54:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8afa      	ldrh	r2, [r7, #22]
 8004b5a:	841a      	strh	r2, [r3, #32]
}
 8004b5c:	f107 071c 	add.w	r7, r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop

08004b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8004ba0:	400b      	ands	r3, r1
 8004ba2:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004bba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004be4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004be8:	6852      	ldr	r2, [r2, #4]
 8004bea:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004bee:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bf8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004bfc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004bfe:	f000 f8ad 	bl	8004d5c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004c02:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8004c06:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8004c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d00d      	beq.n	8004c5e <SystemCoreClockUpdate+0x4a>
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d015      	beq.n	8004c72 <SystemCoreClockUpdate+0x5e>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d15c      	bne.n	8004d04 <SystemCoreClockUpdate+0xf0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004c4a:	f240 0314 	movw	r3, #20
 8004c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c52:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8004c56:	f2c0 027a 	movt	r2, #122	; 0x7a
 8004c5a:	601a      	str	r2, [r3, #0]
      break;
 8004c5c:	e05c      	b.n	8004d18 <SystemCoreClockUpdate+0x104>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8004c5e:	f240 0314 	movw	r3, #20
 8004c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c66:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8004c6a:	f2c0 027a 	movt	r2, #122	; 0x7a
 8004c6e:	601a      	str	r2, [r3, #0]
      break;
 8004c70:	e052      	b.n	8004d18 <SystemCoreClockUpdate+0x104>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8004c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c80:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	ea4f 4393 	mov.w	r3, r3, lsr #18
 8004c98:	f103 0302 	add.w	r3, r3, #2
 8004c9c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10c      	bne.n	8004cbe <SystemCoreClockUpdate+0xaa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004caa:	f2c0 033d 	movt	r3, #61	; 0x3d
 8004cae:	fb03 f202 	mul.w	r2, r3, r2
 8004cb2:	f240 0314 	movw	r3, #20
 8004cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cba:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8004cbc:	e02c      	b.n	8004d18 <SystemCoreClockUpdate+0x104>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8004cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00c      	beq.n	8004cea <SystemCoreClockUpdate+0xd6>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004cd6:	f2c0 033d 	movt	r3, #61	; 0x3d
 8004cda:	fb03 f202 	mul.w	r2, r3, r2
 8004cde:	f240 0314 	movw	r3, #20
 8004ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ce6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8004ce8:	e016      	b.n	8004d18 <SystemCoreClockUpdate+0x104>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8004cf0:	f2c0 037a 	movt	r3, #122	; 0x7a
 8004cf4:	fb03 f202 	mul.w	r2, r3, r2
 8004cf8:	f240 0314 	movw	r3, #20
 8004cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d00:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8004d02:	e009      	b.n	8004d18 <SystemCoreClockUpdate+0x104>

    default:
      SystemCoreClock = HSI_VALUE;
 8004d04:	f240 0314 	movw	r3, #20
 8004d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d0c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8004d10:	f2c0 027a 	movt	r2, #122	; 0x7a
 8004d14:	601a      	str	r2, [r3, #0]
      break;
 8004d16:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d26:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8004d2a:	f240 0318 	movw	r3, #24
 8004d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d32:	5c9b      	ldrb	r3, [r3, r2]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8004d38:	f240 0314 	movw	r3, #20
 8004d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	fa22 f203 	lsr.w	r2, r2, r3
 8004d48:	f240 0314 	movw	r3, #20
 8004d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	f107 0714 	add.w	r7, r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
#elif defined SYSCLK_FREQ_36MHz
  SetSysClockTo36();
 8004d60:	f000 f802 	bl	8004d68 <SetSysClockTo36>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop

08004d68 <SetSysClockTo36>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo36(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d86:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d90:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 0301 	add.w	r3, r3, #1
 8004da8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <SetSysClockTo36+0x50>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004db6:	d1ec      	bne.n	8004d92 <SetSysClockTo36+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <SetSysClockTo36+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8004dca:	f04f 0301 	mov.w	r3, #1
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	e002      	b.n	8004dd8 <SetSysClockTo36+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	f040 8092 	bne.w	8004f04 <SetSysClockTo36+0x19c>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004de4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	f042 0210 	orr.w	r2, r2, #16
 8004df6:	601a      	str	r2, [r3, #0]

    /* Flash 1 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	f022 0203 	bic.w	r2, r2, #3
 8004e0e:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 8004e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e34:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e38:	6852      	ldr	r2, [r2, #4]
 8004e3a:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e4c:	6852      	ldr	r2, [r2, #4]
 8004e4e:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8004e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e60:	6852      	ldr	r2, [r2, #4]
 8004e62:	605a      	str	r2, [r3, #4]
    {
    }
    
#else    
    /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e74:	6852      	ldr	r2, [r2, #4]
 8004e76:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8004e7a:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 8004e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004e8c:	6852      	ldr	r2, [r2, #4]
 8004e8e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004e92:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ea0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004eac:	bf00      	nop
 8004eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f6      	beq.n	8004eae <SetSysClockTo36+0x146>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ecc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ed0:	6852      	ldr	r2, [r2, #4]
 8004ed2:	f022 0203 	bic.w	r2, r2, #3
 8004ed6:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004edc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ee4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004ee8:	6852      	ldr	r2, [r2, #4]
 8004eea:	f042 0202 	orr.w	r2, r2, #2
 8004eee:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004ef0:	bf00      	nop
 8004ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d1f6      	bne.n	8004ef2 <SetSysClockTo36+0x18a>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8004f04:	f107 070c 	add.w	r7, r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <__aeabi_frsub>:
 8004f10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8004f14:	e002      	b.n	8004f1c <__addsf3>
 8004f16:	bf00      	nop

08004f18 <__aeabi_fsub>:
 8004f18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08004f1c <__addsf3>:
 8004f1c:	0042      	lsls	r2, r0, #1
 8004f1e:	bf1f      	itttt	ne
 8004f20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8004f24:	ea92 0f03 	teqne	r2, r3
 8004f28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8004f2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004f30:	d06a      	beq.n	8005008 <__addsf3+0xec>
 8004f32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8004f36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8004f3a:	bfc1      	itttt	gt
 8004f3c:	18d2      	addgt	r2, r2, r3
 8004f3e:	4041      	eorgt	r1, r0
 8004f40:	4048      	eorgt	r0, r1
 8004f42:	4041      	eorgt	r1, r0
 8004f44:	bfb8      	it	lt
 8004f46:	425b      	neglt	r3, r3
 8004f48:	2b19      	cmp	r3, #25
 8004f4a:	bf88      	it	hi
 8004f4c:	4770      	bxhi	lr
 8004f4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8004f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004f56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004f5a:	bf18      	it	ne
 8004f5c:	4240      	negne	r0, r0
 8004f5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004f62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004f66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8004f6a:	bf18      	it	ne
 8004f6c:	4249      	negne	r1, r1
 8004f6e:	ea92 0f03 	teq	r2, r3
 8004f72:	d03f      	beq.n	8004ff4 <__addsf3+0xd8>
 8004f74:	f1a2 0201 	sub.w	r2, r2, #1
 8004f78:	fa41 fc03 	asr.w	ip, r1, r3
 8004f7c:	eb10 000c 	adds.w	r0, r0, ip
 8004f80:	f1c3 0320 	rsb	r3, r3, #32
 8004f84:	fa01 f103 	lsl.w	r1, r1, r3
 8004f88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8004f8c:	d502      	bpl.n	8004f94 <__addsf3+0x78>
 8004f8e:	4249      	negs	r1, r1
 8004f90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004f94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004f98:	d313      	bcc.n	8004fc2 <__addsf3+0xa6>
 8004f9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004f9e:	d306      	bcc.n	8004fae <__addsf3+0x92>
 8004fa0:	0840      	lsrs	r0, r0, #1
 8004fa2:	ea4f 0131 	mov.w	r1, r1, rrx
 8004fa6:	f102 0201 	add.w	r2, r2, #1
 8004faa:	2afe      	cmp	r2, #254	; 0xfe
 8004fac:	d251      	bcs.n	8005052 <__addsf3+0x136>
 8004fae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8004fb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004fb6:	bf08      	it	eq
 8004fb8:	f020 0001 	biceq.w	r0, r0, #1
 8004fbc:	ea40 0003 	orr.w	r0, r0, r3
 8004fc0:	4770      	bx	lr
 8004fc2:	0049      	lsls	r1, r1, #1
 8004fc4:	eb40 0000 	adc.w	r0, r0, r0
 8004fc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8004fcc:	f1a2 0201 	sub.w	r2, r2, #1
 8004fd0:	d1ed      	bne.n	8004fae <__addsf3+0x92>
 8004fd2:	fab0 fc80 	clz	ip, r0
 8004fd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8004fda:	ebb2 020c 	subs.w	r2, r2, ip
 8004fde:	fa00 f00c 	lsl.w	r0, r0, ip
 8004fe2:	bfaa      	itet	ge
 8004fe4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8004fe8:	4252      	neglt	r2, r2
 8004fea:	4318      	orrge	r0, r3
 8004fec:	bfbc      	itt	lt
 8004fee:	40d0      	lsrlt	r0, r2
 8004ff0:	4318      	orrlt	r0, r3
 8004ff2:	4770      	bx	lr
 8004ff4:	f092 0f00 	teq	r2, #0
 8004ff8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8004ffc:	bf06      	itte	eq
 8004ffe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005002:	3201      	addeq	r2, #1
 8005004:	3b01      	subne	r3, #1
 8005006:	e7b5      	b.n	8004f74 <__addsf3+0x58>
 8005008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800500c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005010:	bf18      	it	ne
 8005012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005016:	d021      	beq.n	800505c <__addsf3+0x140>
 8005018:	ea92 0f03 	teq	r2, r3
 800501c:	d004      	beq.n	8005028 <__addsf3+0x10c>
 800501e:	f092 0f00 	teq	r2, #0
 8005022:	bf08      	it	eq
 8005024:	4608      	moveq	r0, r1
 8005026:	4770      	bx	lr
 8005028:	ea90 0f01 	teq	r0, r1
 800502c:	bf1c      	itt	ne
 800502e:	2000      	movne	r0, #0
 8005030:	4770      	bxne	lr
 8005032:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8005036:	d104      	bne.n	8005042 <__addsf3+0x126>
 8005038:	0040      	lsls	r0, r0, #1
 800503a:	bf28      	it	cs
 800503c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005040:	4770      	bx	lr
 8005042:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8005046:	bf3c      	itt	cc
 8005048:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800504c:	4770      	bxcc	lr
 800504e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005052:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8005056:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800505a:	4770      	bx	lr
 800505c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005060:	bf16      	itet	ne
 8005062:	4608      	movne	r0, r1
 8005064:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005068:	4601      	movne	r1, r0
 800506a:	0242      	lsls	r2, r0, #9
 800506c:	bf06      	itte	eq
 800506e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8005072:	ea90 0f01 	teqeq	r0, r1
 8005076:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800507a:	4770      	bx	lr

0800507c <__aeabi_ui2f>:
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e004      	b.n	800508c <__aeabi_i2f+0x8>
 8005082:	bf00      	nop

08005084 <__aeabi_i2f>:
 8005084:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005088:	bf48      	it	mi
 800508a:	4240      	negmi	r0, r0
 800508c:	ea5f 0c00 	movs.w	ip, r0
 8005090:	bf08      	it	eq
 8005092:	4770      	bxeq	lr
 8005094:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005098:	4601      	mov	r1, r0
 800509a:	f04f 0000 	mov.w	r0, #0
 800509e:	e01c      	b.n	80050da <__aeabi_l2f+0x2a>

080050a0 <__aeabi_ul2f>:
 80050a0:	ea50 0201 	orrs.w	r2, r0, r1
 80050a4:	bf08      	it	eq
 80050a6:	4770      	bxeq	lr
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e00a      	b.n	80050c4 <__aeabi_l2f+0x14>
 80050ae:	bf00      	nop

080050b0 <__aeabi_l2f>:
 80050b0:	ea50 0201 	orrs.w	r2, r0, r1
 80050b4:	bf08      	it	eq
 80050b6:	4770      	bxeq	lr
 80050b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80050bc:	d502      	bpl.n	80050c4 <__aeabi_l2f+0x14>
 80050be:	4240      	negs	r0, r0
 80050c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80050c4:	ea5f 0c01 	movs.w	ip, r1
 80050c8:	bf02      	ittt	eq
 80050ca:	4684      	moveq	ip, r0
 80050cc:	4601      	moveq	r1, r0
 80050ce:	2000      	moveq	r0, #0
 80050d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80050d4:	bf08      	it	eq
 80050d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80050da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80050de:	fabc f28c 	clz	r2, ip
 80050e2:	3a08      	subs	r2, #8
 80050e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80050e8:	db10      	blt.n	800510c <__aeabi_l2f+0x5c>
 80050ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80050ee:	4463      	add	r3, ip
 80050f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80050f4:	f1c2 0220 	rsb	r2, r2, #32
 80050f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80050fc:	fa20 f202 	lsr.w	r2, r0, r2
 8005100:	eb43 0002 	adc.w	r0, r3, r2
 8005104:	bf08      	it	eq
 8005106:	f020 0001 	biceq.w	r0, r0, #1
 800510a:	4770      	bx	lr
 800510c:	f102 0220 	add.w	r2, r2, #32
 8005110:	fa01 fc02 	lsl.w	ip, r1, r2
 8005114:	f1c2 0220 	rsb	r2, r2, #32
 8005118:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800511c:	fa21 f202 	lsr.w	r2, r1, r2
 8005120:	eb43 0002 	adc.w	r0, r3, r2
 8005124:	bf08      	it	eq
 8005126:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800512a:	4770      	bx	lr

0800512c <__aeabi_fmul>:
 800512c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005130:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005134:	bf1e      	ittt	ne
 8005136:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800513a:	ea92 0f0c 	teqne	r2, ip
 800513e:	ea93 0f0c 	teqne	r3, ip
 8005142:	d06f      	beq.n	8005224 <__aeabi_fmul+0xf8>
 8005144:	441a      	add	r2, r3
 8005146:	ea80 0c01 	eor.w	ip, r0, r1
 800514a:	0240      	lsls	r0, r0, #9
 800514c:	bf18      	it	ne
 800514e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005152:	d01e      	beq.n	8005192 <__aeabi_fmul+0x66>
 8005154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005158:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800515c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005160:	fba0 3101 	umull	r3, r1, r0, r1
 8005164:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005168:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800516c:	bf3e      	ittt	cc
 800516e:	0049      	lslcc	r1, r1, #1
 8005170:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005174:	005b      	lslcc	r3, r3, #1
 8005176:	ea40 0001 	orr.w	r0, r0, r1
 800517a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800517e:	2afd      	cmp	r2, #253	; 0xfd
 8005180:	d81d      	bhi.n	80051be <__aeabi_fmul+0x92>
 8005182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005186:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800518a:	bf08      	it	eq
 800518c:	f020 0001 	biceq.w	r0, r0, #1
 8005190:	4770      	bx	lr
 8005192:	f090 0f00 	teq	r0, #0
 8005196:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800519a:	bf08      	it	eq
 800519c:	0249      	lsleq	r1, r1, #9
 800519e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80051a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80051a6:	3a7f      	subs	r2, #127	; 0x7f
 80051a8:	bfc2      	ittt	gt
 80051aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80051ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80051b2:	4770      	bxgt	lr
 80051b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	3a01      	subs	r2, #1
 80051be:	dc5d      	bgt.n	800527c <__aeabi_fmul+0x150>
 80051c0:	f112 0f19 	cmn.w	r2, #25
 80051c4:	bfdc      	itt	le
 80051c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80051ca:	4770      	bxle	lr
 80051cc:	f1c2 0200 	rsb	r2, r2, #0
 80051d0:	0041      	lsls	r1, r0, #1
 80051d2:	fa21 f102 	lsr.w	r1, r1, r2
 80051d6:	f1c2 0220 	rsb	r2, r2, #32
 80051da:	fa00 fc02 	lsl.w	ip, r0, r2
 80051de:	ea5f 0031 	movs.w	r0, r1, rrx
 80051e2:	f140 0000 	adc.w	r0, r0, #0
 80051e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80051ea:	bf08      	it	eq
 80051ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80051f0:	4770      	bx	lr
 80051f2:	f092 0f00 	teq	r2, #0
 80051f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80051fa:	bf02      	ittt	eq
 80051fc:	0040      	lsleq	r0, r0, #1
 80051fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005202:	3a01      	subeq	r2, #1
 8005204:	d0f9      	beq.n	80051fa <__aeabi_fmul+0xce>
 8005206:	ea40 000c 	orr.w	r0, r0, ip
 800520a:	f093 0f00 	teq	r3, #0
 800520e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005212:	bf02      	ittt	eq
 8005214:	0049      	lsleq	r1, r1, #1
 8005216:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800521a:	3b01      	subeq	r3, #1
 800521c:	d0f9      	beq.n	8005212 <__aeabi_fmul+0xe6>
 800521e:	ea41 010c 	orr.w	r1, r1, ip
 8005222:	e78f      	b.n	8005144 <__aeabi_fmul+0x18>
 8005224:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005228:	ea92 0f0c 	teq	r2, ip
 800522c:	bf18      	it	ne
 800522e:	ea93 0f0c 	teqne	r3, ip
 8005232:	d00a      	beq.n	800524a <__aeabi_fmul+0x11e>
 8005234:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005238:	bf18      	it	ne
 800523a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800523e:	d1d8      	bne.n	80051f2 <__aeabi_fmul+0xc6>
 8005240:	ea80 0001 	eor.w	r0, r0, r1
 8005244:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005248:	4770      	bx	lr
 800524a:	f090 0f00 	teq	r0, #0
 800524e:	bf17      	itett	ne
 8005250:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8005254:	4608      	moveq	r0, r1
 8005256:	f091 0f00 	teqne	r1, #0
 800525a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800525e:	d014      	beq.n	800528a <__aeabi_fmul+0x15e>
 8005260:	ea92 0f0c 	teq	r2, ip
 8005264:	d101      	bne.n	800526a <__aeabi_fmul+0x13e>
 8005266:	0242      	lsls	r2, r0, #9
 8005268:	d10f      	bne.n	800528a <__aeabi_fmul+0x15e>
 800526a:	ea93 0f0c 	teq	r3, ip
 800526e:	d103      	bne.n	8005278 <__aeabi_fmul+0x14c>
 8005270:	024b      	lsls	r3, r1, #9
 8005272:	bf18      	it	ne
 8005274:	4608      	movne	r0, r1
 8005276:	d108      	bne.n	800528a <__aeabi_fmul+0x15e>
 8005278:	ea80 0001 	eor.w	r0, r0, r1
 800527c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005280:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005284:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005288:	4770      	bx	lr
 800528a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800528e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8005292:	4770      	bx	lr

08005294 <__aeabi_fdiv>:
 8005294:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005298:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800529c:	bf1e      	ittt	ne
 800529e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80052a2:	ea92 0f0c 	teqne	r2, ip
 80052a6:	ea93 0f0c 	teqne	r3, ip
 80052aa:	d069      	beq.n	8005380 <__aeabi_fdiv+0xec>
 80052ac:	eba2 0203 	sub.w	r2, r2, r3
 80052b0:	ea80 0c01 	eor.w	ip, r0, r1
 80052b4:	0249      	lsls	r1, r1, #9
 80052b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80052ba:	d037      	beq.n	800532c <__aeabi_fdiv+0x98>
 80052bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80052c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80052c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf38      	it	cc
 80052d0:	005b      	lslcc	r3, r3, #1
 80052d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80052d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80052da:	428b      	cmp	r3, r1
 80052dc:	bf24      	itt	cs
 80052de:	1a5b      	subcs	r3, r3, r1
 80052e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80052e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80052e8:	bf24      	itt	cs
 80052ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80052ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80052f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80052f6:	bf24      	itt	cs
 80052f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80052fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005300:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8005304:	bf24      	itt	cs
 8005306:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800530a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	bf18      	it	ne
 8005312:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8005316:	d1e0      	bne.n	80052da <__aeabi_fdiv+0x46>
 8005318:	2afd      	cmp	r2, #253	; 0xfd
 800531a:	f63f af50 	bhi.w	80051be <__aeabi_fmul+0x92>
 800531e:	428b      	cmp	r3, r1
 8005320:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005324:	bf08      	it	eq
 8005326:	f020 0001 	biceq.w	r0, r0, #1
 800532a:	4770      	bx	lr
 800532c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005330:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005334:	327f      	adds	r2, #127	; 0x7f
 8005336:	bfc2      	ittt	gt
 8005338:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800533c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005340:	4770      	bxgt	lr
 8005342:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	3a01      	subs	r2, #1
 800534c:	e737      	b.n	80051be <__aeabi_fmul+0x92>
 800534e:	f092 0f00 	teq	r2, #0
 8005352:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005356:	bf02      	ittt	eq
 8005358:	0040      	lsleq	r0, r0, #1
 800535a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800535e:	3a01      	subeq	r2, #1
 8005360:	d0f9      	beq.n	8005356 <__aeabi_fdiv+0xc2>
 8005362:	ea40 000c 	orr.w	r0, r0, ip
 8005366:	f093 0f00 	teq	r3, #0
 800536a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800536e:	bf02      	ittt	eq
 8005370:	0049      	lsleq	r1, r1, #1
 8005372:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005376:	3b01      	subeq	r3, #1
 8005378:	d0f9      	beq.n	800536e <__aeabi_fdiv+0xda>
 800537a:	ea41 010c 	orr.w	r1, r1, ip
 800537e:	e795      	b.n	80052ac <__aeabi_fdiv+0x18>
 8005380:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005384:	ea92 0f0c 	teq	r2, ip
 8005388:	d108      	bne.n	800539c <__aeabi_fdiv+0x108>
 800538a:	0242      	lsls	r2, r0, #9
 800538c:	f47f af7d 	bne.w	800528a <__aeabi_fmul+0x15e>
 8005390:	ea93 0f0c 	teq	r3, ip
 8005394:	f47f af70 	bne.w	8005278 <__aeabi_fmul+0x14c>
 8005398:	4608      	mov	r0, r1
 800539a:	e776      	b.n	800528a <__aeabi_fmul+0x15e>
 800539c:	ea93 0f0c 	teq	r3, ip
 80053a0:	d104      	bne.n	80053ac <__aeabi_fdiv+0x118>
 80053a2:	024b      	lsls	r3, r1, #9
 80053a4:	f43f af4c 	beq.w	8005240 <__aeabi_fmul+0x114>
 80053a8:	4608      	mov	r0, r1
 80053aa:	e76e      	b.n	800528a <__aeabi_fmul+0x15e>
 80053ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80053b0:	bf18      	it	ne
 80053b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80053b6:	d1ca      	bne.n	800534e <__aeabi_fdiv+0xba>
 80053b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80053bc:	f47f af5c 	bne.w	8005278 <__aeabi_fmul+0x14c>
 80053c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80053c4:	f47f af3c 	bne.w	8005240 <__aeabi_fmul+0x114>
 80053c8:	e75f      	b.n	800528a <__aeabi_fmul+0x15e>
 80053ca:	bf00      	nop

080053cc <__gesf2>:
 80053cc:	f04f 3cff 	mov.w	ip, #4294967295
 80053d0:	e006      	b.n	80053e0 <__cmpsf2+0x4>
 80053d2:	bf00      	nop

080053d4 <__lesf2>:
 80053d4:	f04f 0c01 	mov.w	ip, #1
 80053d8:	e002      	b.n	80053e0 <__cmpsf2+0x4>
 80053da:	bf00      	nop

080053dc <__cmpsf2>:
 80053dc:	f04f 0c01 	mov.w	ip, #1
 80053e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80053e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80053e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80053ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80053f0:	bf18      	it	ne
 80053f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80053f6:	d011      	beq.n	800541c <__cmpsf2+0x40>
 80053f8:	b001      	add	sp, #4
 80053fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80053fe:	bf18      	it	ne
 8005400:	ea90 0f01 	teqne	r0, r1
 8005404:	bf58      	it	pl
 8005406:	ebb2 0003 	subspl.w	r0, r2, r3
 800540a:	bf88      	it	hi
 800540c:	17c8      	asrhi	r0, r1, #31
 800540e:	bf38      	it	cc
 8005410:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005414:	bf18      	it	ne
 8005416:	f040 0001 	orrne.w	r0, r0, #1
 800541a:	4770      	bx	lr
 800541c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005420:	d102      	bne.n	8005428 <__cmpsf2+0x4c>
 8005422:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005426:	d105      	bne.n	8005434 <__cmpsf2+0x58>
 8005428:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800542c:	d1e4      	bne.n	80053f8 <__cmpsf2+0x1c>
 800542e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005432:	d0e1      	beq.n	80053f8 <__cmpsf2+0x1c>
 8005434:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop

0800543c <__aeabi_cfrcmple>:
 800543c:	4684      	mov	ip, r0
 800543e:	4608      	mov	r0, r1
 8005440:	4661      	mov	r1, ip
 8005442:	e7ff      	b.n	8005444 <__aeabi_cfcmpeq>

08005444 <__aeabi_cfcmpeq>:
 8005444:	b50f      	push	{r0, r1, r2, r3, lr}
 8005446:	f7ff ffc9 	bl	80053dc <__cmpsf2>
 800544a:	2800      	cmp	r0, #0
 800544c:	bf48      	it	mi
 800544e:	f110 0f00 	cmnmi.w	r0, #0
 8005452:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005454 <__aeabi_fcmpeq>:
 8005454:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005458:	f7ff fff4 	bl	8005444 <__aeabi_cfcmpeq>
 800545c:	bf0c      	ite	eq
 800545e:	2001      	moveq	r0, #1
 8005460:	2000      	movne	r0, #0
 8005462:	f85d fb08 	ldr.w	pc, [sp], #8
 8005466:	bf00      	nop

08005468 <__aeabi_fcmplt>:
 8005468:	f84d ed08 	str.w	lr, [sp, #-8]!
 800546c:	f7ff ffea 	bl	8005444 <__aeabi_cfcmpeq>
 8005470:	bf34      	ite	cc
 8005472:	2001      	movcc	r0, #1
 8005474:	2000      	movcs	r0, #0
 8005476:	f85d fb08 	ldr.w	pc, [sp], #8
 800547a:	bf00      	nop

0800547c <__aeabi_fcmple>:
 800547c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005480:	f7ff ffe0 	bl	8005444 <__aeabi_cfcmpeq>
 8005484:	bf94      	ite	ls
 8005486:	2001      	movls	r0, #1
 8005488:	2000      	movhi	r0, #0
 800548a:	f85d fb08 	ldr.w	pc, [sp], #8
 800548e:	bf00      	nop

08005490 <__aeabi_fcmpge>:
 8005490:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005494:	f7ff ffd2 	bl	800543c <__aeabi_cfrcmple>
 8005498:	bf94      	ite	ls
 800549a:	2001      	movls	r0, #1
 800549c:	2000      	movhi	r0, #0
 800549e:	f85d fb08 	ldr.w	pc, [sp], #8
 80054a2:	bf00      	nop

080054a4 <__aeabi_fcmpgt>:
 80054a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054a8:	f7ff ffc8 	bl	800543c <__aeabi_cfrcmple>
 80054ac:	bf34      	ite	cc
 80054ae:	2001      	movcc	r0, #1
 80054b0:	2000      	movcs	r0, #0
 80054b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80054b6:	bf00      	nop

080054b8 <__aeabi_f2iz>:
 80054b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80054bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80054c0:	d30f      	bcc.n	80054e2 <__aeabi_f2iz+0x2a>
 80054c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80054c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80054ca:	d90d      	bls.n	80054e8 <__aeabi_f2iz+0x30>
 80054cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80054d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80054d8:	fa23 f002 	lsr.w	r0, r3, r2
 80054dc:	bf18      	it	ne
 80054de:	4240      	negne	r0, r0
 80054e0:	4770      	bx	lr
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	4770      	bx	lr
 80054e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80054ec:	d101      	bne.n	80054f2 <__aeabi_f2iz+0x3a>
 80054ee:	0242      	lsls	r2, r0, #9
 80054f0:	d105      	bne.n	80054fe <__aeabi_f2iz+0x46>
 80054f2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80054f6:	bf08      	it	eq
 80054f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80054fc:	4770      	bx	lr
 80054fe:	f04f 0000 	mov.w	r0, #0
 8005502:	4770      	bx	lr

08005504 <ADC1_2_IRQHandler>:
	return motVMean;
}

extern "C" {

void ADC1_2_IRQHandler(void){
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
	int32_t tmpCur = 0;
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
	int32_t tmpEmfPos = 0;
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
	int32_t tmpEmfNeg = 0;
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
	int32_t tmpMotV = 0;
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < ADC_NSAMP_MEAN; i++){
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	e03b      	b.n	80055a2 <ADC1_2_IRQHandler+0x9e>
		tmpCur += adcBuffer[i*4 + CUR_RANK - 1];
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8005530:	f240 032c 	movw	r3, #44	; 0x2c
 8005534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005538:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
		tmpEmfPos += adcBuffer[i*4 + EMF_POS_RANK - 1];
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005548:	f103 0201 	add.w	r2, r3, #1
 800554c:	f240 032c 	movw	r3, #44	; 0x2c
 8005550:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005554:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	18d3      	adds	r3, r2, r3
 800555c:	613b      	str	r3, [r7, #16]
		tmpEmfNeg += adcBuffer[i*4 + EMF_NEG_RANK - 1];
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005564:	f103 0202 	add.w	r2, r3, #2
 8005568:	f240 032c 	movw	r3, #44	; 0x2c
 800556c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005570:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	18d3      	adds	r3, r2, r3
 8005578:	60fb      	str	r3, [r7, #12]
		tmpMotV += adcBuffer[i*4 + MOT_V_RANK - 1];
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0301 	add.w	r3, r3, #1
 8005580:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005584:	f103 32ff 	add.w	r2, r3, #4294967295
 8005588:	f240 032c 	movw	r3, #44	; 0x2c
 800558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005590:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	18d3      	adds	r3, r2, r3
 8005598:	60bb      	str	r3, [r7, #8]
void ADC1_2_IRQHandler(void){
	int32_t tmpCur = 0;
	int32_t tmpEmfPos = 0;
	int32_t tmpEmfNeg = 0;
	int32_t tmpMotV = 0;
	for(int i = 0; i < ADC_NSAMP_MEAN; i++){
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f103 0301 	add.w	r3, r3, #1
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b63      	cmp	r3, #99	; 0x63
 80055a6:	bfcc      	ite	gt
 80055a8:	2300      	movgt	r3, #0
 80055aa:	2301      	movle	r3, #1
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1bb      	bne.n	800552a <ADC1_2_IRQHandler+0x26>
		tmpCur += adcBuffer[i*4 + CUR_RANK - 1];
		tmpEmfPos += adcBuffer[i*4 + EMF_POS_RANK - 1];
		tmpEmfNeg += adcBuffer[i*4 + EMF_NEG_RANK - 1];
		tmpMotV += adcBuffer[i*4 + MOT_V_RANK - 1];
	}
	curMean = (float)tmpCur * CUR_MUL / ADC_NSAMP_MEAN;
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f7ff fd66 	bl	8005084 <__aeabi_i2f>
 80055b8:	4603      	mov	r3, r0
 80055ba:	4618      	mov	r0, r3
 80055bc:	4923      	ldr	r1, [pc, #140]	; (800564c <ADC1_2_IRQHandler+0x148>)
 80055be:	f7ff fdb5 	bl	800512c <__aeabi_fmul>
 80055c2:	4603      	mov	r3, r0
 80055c4:	4618      	mov	r0, r3
 80055c6:	4922      	ldr	r1, [pc, #136]	; (8005650 <ADC1_2_IRQHandler+0x14c>)
 80055c8:	f7ff fe64 	bl	8005294 <__aeabi_fdiv>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	f240 334c 	movw	r3, #844	; 0x34c
 80055d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80055d8:	601a      	str	r2, [r3, #0]
	emfMean = ((float)tmpEmfPos - (float)tmpEmfNeg) * EMF_MUL / ADC_NSAMP_MEAN;
 80055da:	6938      	ldr	r0, [r7, #16]
 80055dc:	f7ff fd52 	bl	8005084 <__aeabi_i2f>
 80055e0:	4604      	mov	r4, r0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fd4e 	bl	8005084 <__aeabi_i2f>
 80055e8:	4603      	mov	r3, r0
 80055ea:	4620      	mov	r0, r4
 80055ec:	4619      	mov	r1, r3
 80055ee:	f7ff fc93 	bl	8004f18 <__aeabi_fsub>
 80055f2:	4603      	mov	r3, r0
 80055f4:	4618      	mov	r0, r3
 80055f6:	4916      	ldr	r1, [pc, #88]	; (8005650 <ADC1_2_IRQHandler+0x14c>)
 80055f8:	f7ff fe4c 	bl	8005294 <__aeabi_fdiv>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	f240 3350 	movw	r3, #848	; 0x350
 8005604:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005608:	601a      	str	r2, [r3, #0]
	motVMean = (float)tmpMotV * MOT_V_MUL / ADC_NSAMP_MEAN;
 800560a:	68b8      	ldr	r0, [r7, #8]
 800560c:	f7ff fd3a 	bl	8005084 <__aeabi_i2f>
 8005610:	4603      	mov	r3, r0
 8005612:	4618      	mov	r0, r3
 8005614:	490f      	ldr	r1, [pc, #60]	; (8005654 <ADC1_2_IRQHandler+0x150>)
 8005616:	f7ff fd89 	bl	800512c <__aeabi_fmul>
 800561a:	4603      	mov	r3, r0
 800561c:	4618      	mov	r0, r3
 800561e:	490c      	ldr	r1, [pc, #48]	; (8005650 <ADC1_2_IRQHandler+0x14c>)
 8005620:	f7ff fe38 	bl	8005294 <__aeabi_fdiv>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	f240 3354 	movw	r3, #852	; 0x354
 800562c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005630:	601a      	str	r2, [r3, #0]

	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8005632:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8005636:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800563a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800563e:	f7fb fbd1 	bl	8000de4 <ADC_ClearITPendingBit>
}
 8005642:	f107 071c 	add.w	r7, r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}
 800564a:	bf00      	nop
 800564c:	3aaec941 	.word	0x3aaec941
 8005650:	42c80000 	.word	0x42c80000
 8005654:	3c1bb60a 	.word	0x3c1bb60a

08005658 <_Z7LcdInitv>:
 * Argument(s)  :  None.
 * Return value :  None.
 */

void LcdInit ( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b092      	sub	sp, #72	; 0x48
 800565c:	af00      	add	r7, sp, #0
    /* GPIO configuration */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800565e:	f04f 0004 	mov.w	r0, #4
 8005662:	f04f 0101 	mov.w	r1, #1
 8005666:	f7fc fd69 	bl	800213c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800566a:	f04f 0001 	mov.w	r0, #1
 800566e:	f04f 0101 	mov.w	r1, #1
 8005672:	f7fc fd63 	bl	800213c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef gpioInit;
	gpioInit.GPIO_Pin = LCD_SPI_MOSI | LCD_SPI_SCK;
 8005676:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800567a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	gpioInit.GPIO_Mode = GPIO_Mode_AF_PP;
 800567e:	f04f 0318 	mov.w	r3, #24
 8005682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	gpioInit.GPIO_Speed = GPIO_Speed_50MHz;
 8005686:	f04f 0303 	mov.w	r3, #3
 800568a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	GPIO_Init(LCD_GPIO, &gpioInit);
 800568e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005692:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005696:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800569a:	4619      	mov	r1, r3
 800569c:	f7fb fed6 	bl	800144c <GPIO_Init>

	gpioInit.GPIO_Pin = LCD_DC | LCD_RES | LCD_SPI_CS;
 80056a0:	f04f 0358 	mov.w	r3, #88	; 0x58
 80056a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	gpioInit.GPIO_Mode = GPIO_Mode_Out_PP;
 80056a8:	f04f 0310 	mov.w	r3, #16
 80056ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_Init(LCD_GPIO, &gpioInit);
 80056b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056b8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80056bc:	4619      	mov	r1, r3
 80056be:	f7fb fec5 	bl	800144c <GPIO_Init>

	/* SPI configuration */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80056c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80056c6:	f04f 0101 	mov.w	r1, #1
 80056ca:	f7fc fd37 	bl	800213c <RCC_APB2PeriphClockCmd>
	SPI_InitTypeDef spiInit;
	spiInit.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80056ce:	f04f 0318 	mov.w	r3, #24
 80056d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
	spiInit.SPI_CPHA = SPI_CPHA_2Edge;
 80056d4:	f04f 0301 	mov.w	r3, #1
 80056d8:	873b      	strh	r3, [r7, #56]	; 0x38
	spiInit.SPI_CPOL = SPI_CPOL_High;
 80056da:	f04f 0302 	mov.w	r3, #2
 80056de:	86fb      	strh	r3, [r7, #54]	; 0x36
	spiInit.SPI_DataSize = SPI_DataSize_8b;
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	86bb      	strh	r3, [r7, #52]	; 0x34
	spiInit.SPI_Direction = SPI_Direction_1Line_Tx;
 80056e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80056ea:	863b      	strh	r3, [r7, #48]	; 0x30
	spiInit.SPI_FirstBit = SPI_FirstBit_MSB;
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
	spiInit.SPI_Mode = SPI_Mode_Master;
 80056f2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80056f6:	867b      	strh	r3, [r7, #50]	; 0x32
	spiInit.SPI_NSS = SPI_NSS_Soft;
 80056f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056fc:	877b      	strh	r3, [r7, #58]	; 0x3a
	SPI_Init(LCD_SPI, &spiInit);
 80056fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005702:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005706:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800570a:	4619      	mov	r1, r3
 800570c:	f7fc fec4 	bl	8002498 <SPI_Init>
	SPI_SSOutputCmd(LCD_SPI, ENABLE);
 8005710:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005714:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005718:	f04f 0101 	mov.w	r1, #1
 800571c:	f7fd f8f4 	bl	8002908 <SPI_SSOutputCmd>

	/* DMA configuration */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8005720:	f04f 0001 	mov.w	r0, #1
 8005724:	f04f 0101 	mov.w	r1, #1
 8005728:	f7fc fcdc 	bl	80020e4 <RCC_AHBPeriphClockCmd>
	DMA_InitTypeDef dmaInit;
	dmaInit.DMA_BufferSize = LCD_X_RES;
 800572c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005730:	60fb      	str	r3, [r7, #12]
	dmaInit.DMA_DIR = DMA_DIR_PeripheralDST;
 8005732:	f04f 0310 	mov.w	r3, #16
 8005736:	60bb      	str	r3, [r7, #8]
	dmaInit.DMA_M2M = DMA_M2M_Disable;
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
	dmaInit.DMA_MemoryBaseAddr = (uint32_t)(LcdCache);
 800573e:	f240 3358 	movw	r3, #856	; 0x358
 8005742:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005746:	607b      	str	r3, [r7, #4]
	dmaInit.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
	dmaInit.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800574e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005752:	617b      	str	r3, [r7, #20]
	dmaInit.DMA_Mode = DMA_Mode_Normal;
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	623b      	str	r3, [r7, #32]
	dmaInit.DMA_PeripheralBaseAddr = (uint32_t)&(SPI1->DR);
 800575a:	f243 030c 	movw	r3, #12300	; 0x300c
 800575e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005762:	603b      	str	r3, [r7, #0]
	dmaInit.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
	dmaInit.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
	dmaInit.DMA_Priority = DMA_Priority_Low;
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init(LCD_DMA_CHANNEL, &dmaInit);
 8005776:	463b      	mov	r3, r7
 8005778:	f04f 0030 	mov.w	r0, #48	; 0x30
 800577c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8005780:	4619      	mov	r1, r3
 8005782:	f7fb fc57 	bl	8001034 <DMA_Init>
	DMA_ITConfig(LCD_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 8005786:	f04f 0030 	mov.w	r0, #48	; 0x30
 800578a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800578e:	f04f 0102 	mov.w	r1, #2
 8005792:	f04f 0201 	mov.w	r2, #1
 8005796:	f7fb fce1 	bl	800115c <DMA_ITConfig>

	NVIC_InitTypeDef initNVIC;
	initNVIC.NVIC_IRQChannel = DMA1_Channel3_IRQn;
 800579a:	f04f 030d 	mov.w	r3, #13
 800579e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	initNVIC.NVIC_IRQChannelPreemptionPriority = 0;
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	initNVIC.NVIC_IRQChannelSubPriority = 0;
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	initNVIC.NVIC_IRQChannelCmd = ENABLE;
 80057b2:	f04f 0301 	mov.w	r3, #1
 80057b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NVIC_Init(&initNVIC);
 80057ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fa fcb8 	bl	8000134 <NVIC_Init>

	SPI_I2S_DMACmd(LCD_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
 80057c4:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80057c8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80057cc:	f04f 0102 	mov.w	r1, #2
 80057d0:	f04f 0201 	mov.w	r2, #1
 80057d4:	f7fd f836 	bl	8002844 <SPI_I2S_DMACmd>
	SPI_Cmd(LCD_SPI, ENABLE);
 80057d8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80057dc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80057e0:	f04f 0101 	mov.w	r1, #1
 80057e4:	f7fc ffb8 	bl	8002758 <SPI_Cmd>

	/* LCD initialization */
	//reset
	GPIO_ResetBits(LCD_GPIO, LCD_SPI_CS);
 80057e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80057f0:	f04f 0110 	mov.w	r1, #16
 80057f4:	f7fb ff7e 	bl	80016f4 <GPIO_ResetBits>
	GPIO_ResetBits(LCD_GPIO, LCD_RES);
 80057f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057fc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005800:	f04f 0140 	mov.w	r1, #64	; 0x40
 8005804:	f7fb ff76 	bl	80016f4 <GPIO_ResetBits>
	sysDelayMs(500);
 8005808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800580c:	f001 fa32 	bl	8006c74 <_Z10sysDelayMsj>
	GPIO_SetBits(LCD_GPIO, LCD_RES);
 8005810:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005814:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005818:	f04f 0140 	mov.w	r1, #64	; 0x40
 800581c:	f7fb ff5c 	bl	80016d8 <GPIO_SetBits>


	//LCD bias - 1/7
	LcdSend(CMD_SET_BIAS_7, LCD_CMD);
 8005820:	f04f 00a3 	mov.w	r0, #163	; 0xa3
 8005824:	f04f 0100 	mov.w	r1, #0
 8005828:	f000 fabc 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	//ADC selection - normal - default
	LcdSend(CMD_SET_ADC_NORMAL, LCD_CMD);
 800582c:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8005830:	f04f 0100 	mov.w	r1, #0
 8005834:	f000 fab6 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	//Common output mode - normal - default
	LcdSend(CMD_SET_COM_REVERSE, LCD_CMD);
 8005838:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 800583c:	f04f 0100 	mov.w	r1, #0
 8005840:	f000 fab0 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	// Initial display line
	LcdSend(CMD_SET_DISP_START_LINE, LCD_CMD);
 8005844:	f04f 0040 	mov.w	r0, #64	; 0x40
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	f000 faaa 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	//Booster on, voltage regulator circuit on, voltage follower circuit on
	LcdSend(CMD_SET_POWER_CONTROL | 0x4, LCD_CMD);
 8005850:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8005854:	f04f 0100 	mov.w	r1, #0
 8005858:	f000 faa4 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>
	sysDelayMs(50);
 800585c:	f04f 0032 	mov.w	r0, #50	; 0x32
 8005860:	f001 fa08 	bl	8006c74 <_Z10sysDelayMsj>
	LcdSend(CMD_SET_POWER_CONTROL | 0x6, LCD_CMD);
 8005864:	f04f 002e 	mov.w	r0, #46	; 0x2e
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	f000 fa9a 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>
	sysDelayMs(50);
 8005870:	f04f 0032 	mov.w	r0, #50	; 0x32
 8005874:	f001 f9fe 	bl	8006c74 <_Z10sysDelayMsj>
	LcdSend(CMD_SET_POWER_CONTROL | 0x7, LCD_CMD);
 8005878:	f04f 002f 	mov.w	r0, #47	; 0x2f
 800587c:	f04f 0100 	mov.w	r1, #0
 8005880:	f000 fa90 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>
	sysDelayMs(10);
 8005884:	f04f 000a 	mov.w	r0, #10
 8005888:	f001 f9f4 	bl	8006c74 <_Z10sysDelayMsj>

	//Internal V0 regulator resistor ratio
	LcdSend(CMD_SET_RESISTOR_RATIO | 0x6, LCD_CMD);
 800588c:	f04f 0026 	mov.w	r0, #38	; 0x26
 8005890:	f04f 0100 	mov.w	r1, #0
 8005894:	f000 fa86 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	LcdSend(CMD_SET_ALLPTS_NORMAL, LCD_CMD);
 8005898:	f04f 00a4 	mov.w	r0, #164	; 0xa4
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	f000 fa80 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	//Display on
	LcdSend(CMD_DISPLAY_ON, LCD_CMD);
 80058a4:	f04f 00af 	mov.w	r0, #175	; 0xaf
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	f000 fa7a 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	//Electronic volume control - 40
	LcdSend(CMD_SET_VOLUME_FIRST, LCD_CMD);
 80058b0:	f04f 0081 	mov.w	r0, #129	; 0x81
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f000 fa74 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>
	LcdSend(CMD_SET_VOLUME_SECOND | 0x3f, LCD_CMD);
 80058bc:	f04f 003f 	mov.w	r0, #63	; 0x3f
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	f000 fa6e 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

    /* Reset watermark pointers to empty */
    LoWaterMark = LCD_CACHE_SIZE;
 80058c8:	f240 735c 	movw	r3, #1884	; 0x75c
 80058cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058d4:	601a      	str	r2, [r3, #0]
    HiWaterMark = 0;
 80058d6:	f240 7360 	movw	r3, #1888	; 0x760
 80058da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

    /* Clear display on first time use */
    LcdClear();
 80058e4:	f000 f812 	bl	800590c <_Z8LcdClearv>
    UpdateLcd = false;
 80058e8:	f240 7364 	movw	r3, #1892	; 0x764
 80058ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
    LcdCacheIdx = 0;
 80058f6:	f240 7358 	movw	r3, #1880	; 0x758
 80058fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
}
 8005904:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_Z8LcdClearv>:
 * Argument(s)  :  None.
 * Return value :  None.
 * Note         :  Based on Sylvain Bissonette's code
 */
void LcdClear ( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
//    /* Set 0x00 to all LcdCache's contents */
//    for ( i = 0; i < LCD_CACHE_SIZE; i++ )
//    {
//        LcdCache[ i ] = 0x00;
//    }
	memset(LcdCache,0x00,LCD_CACHE_SIZE); //Sugestion - its faster and its 10 bytes less in program mem
 8005910:	f240 3358 	movw	r3, #856	; 0x358
 8005914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005918:	461a      	mov	r2, r3
 800591a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800591e:	4610      	mov	r0, r2
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	461a      	mov	r2, r3
 8005926:	f001 fab7 	bl	8006e98 <memset>
    /* Reset watermark pointers to full */
    LoWaterMark = 0;
 800592a:	f240 735c 	movw	r3, #1884	; 0x75c
 800592e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
    HiWaterMark = LCD_CACHE_SIZE - 1;
 8005938:	f240 7360 	movw	r3, #1888	; 0x760
 800593c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005940:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005944:	601a      	str	r2, [r3, #0]

    /* Set update flag to be true */
    //UpdateLcd = TRUE;
}
 8005946:	bd80      	pop	{r7, pc}

08005948 <_Z13LcdGotoXYFonthh>:
 * Argument(s)  :  x, y -> Coordinate for new cursor position. Range: 1,1 .. 14,6
 * Return value :  see return value in lcd.h
 * Note         :  Based on Sylvain Bissonette's code
 */
byte LcdGotoXYFont ( byte x, byte y )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	71fa      	strb	r2, [r7, #7]
 8005954:	71bb      	strb	r3, [r7, #6]
    /* Boundary check, slow down the speed but will guarantee this code wont fail */
    /* Version 0.2.5 - Fixed on Dec 25, 2008 (XMAS) */
	//TODO parametrize
    if( x > 14)
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b0e      	cmp	r3, #14
 800595a:	d902      	bls.n	8005962 <_Z13LcdGotoXYFonthh+0x1a>
        return OUT_OF_BORDER;
 800595c:	f04f 0301 	mov.w	r3, #1
 8005960:	e01c      	b.n	800599c <_Z13LcdGotoXYFonthh+0x54>
    if( y > 6)
 8005962:	79bb      	ldrb	r3, [r7, #6]
 8005964:	2b06      	cmp	r3, #6
 8005966:	d902      	bls.n	800596e <_Z13LcdGotoXYFonthh+0x26>
        return OUT_OF_BORDER;
 8005968:	f04f 0301 	mov.w	r3, #1
 800596c:	e016      	b.n	800599c <_Z13LcdGotoXYFonthh+0x54>
    /*  Calculate index. It is defined as address within 1024 bytes memory */

    LcdCacheIdx = ( x - 1 ) * 6 + ( y - 1 ) * LCD_X_RES;
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	f103 32ff 	add.w	r2, r3, #4294967295
 8005974:	4613      	mov	r3, r2
 8005976:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800597a:	189b      	adds	r3, r3, r2
 800597c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005980:	461a      	mov	r2, r3
 8005982:	79bb      	ldrb	r3, [r7, #6]
 8005984:	f103 33ff 	add.w	r3, r3, #4294967295
 8005988:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800598c:	18d2      	adds	r2, r2, r3
 800598e:	f240 7358 	movw	r3, #1880	; 0x758
 8005992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005996:	601a      	str	r2, [r3, #0]
    return OK;
 8005998:	f04f 0300 	mov.w	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	f107 070c 	add.w	r7, r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <_Z6LcdChr11LcdFontSizeh>:
 * Argument(s)  :  size -> Font size. See enum in lcd.h.
 *                 ch   -> Character to write.
 * Return value :  see lcd.h about return value
 */
byte LcdChr ( LcdFontSize size, byte ch )
{
 80059a8:	b490      	push	{r4, r7}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	71fa      	strb	r2, [r7, #7]
 80059b4:	71bb      	strb	r3, [r7, #6]
    byte i, c;
    byte b1, b2;
    int  tmpIdx;

    if ( LcdCacheIdx < LoWaterMark )
 80059b6:	f240 7358 	movw	r3, #1880	; 0x758
 80059ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	f240 735c 	movw	r3, #1884	; 0x75c
 80059c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	da09      	bge.n	80059e2 <_Z6LcdChr11LcdFontSizeh+0x3a>
    {
        /* Update low marker. */
        LoWaterMark = LcdCacheIdx;
 80059ce:	f240 7358 	movw	r3, #1880	; 0x758
 80059d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	f240 735c 	movw	r3, #1884	; 0x75c
 80059dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059e0:	601a      	str	r2, [r3, #0]
    }

    if ( (ch < 0x20) || (ch > 0x7b) )
 80059e2:	79bb      	ldrb	r3, [r7, #6]
 80059e4:	2b1f      	cmp	r3, #31
 80059e6:	d902      	bls.n	80059ee <_Z6LcdChr11LcdFontSizeh+0x46>
 80059e8:	79bb      	ldrb	r3, [r7, #6]
 80059ea:	2b7b      	cmp	r3, #123	; 0x7b
 80059ec:	d902      	bls.n	80059f4 <_Z6LcdChr11LcdFontSizeh+0x4c>
    {
        /* Convert to a printable character. */
        ch = 92;
 80059ee:	f04f 035c 	mov.w	r3, #92	; 0x5c
 80059f2:	71bb      	strb	r3, [r7, #6]
    }

    if ( size == FONT_1X )
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d133      	bne.n	8005a62 <_Z6LcdChr11LcdFontSizeh+0xba>
    {
        for ( i = 0; i < 5; i++ )
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	75fb      	strb	r3, [r7, #23]
 8005a00:	e026      	b.n	8005a50 <_Z6LcdChr11LcdFontSizeh+0xa8>
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = (byte)(FontLookup[ ch - 32 ][ i ] << 1);
 8005a02:	f240 7358 	movw	r3, #1880	; 0x758
 8005a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	79bb      	ldrb	r3, [r7, #6]
 8005a0e:	f1a3 0020 	sub.w	r0, r3, #32
 8005a12:	7dfc      	ldrb	r4, [r7, #23]
 8005a14:	f646 7240 	movw	r2, #28480	; 0x6f40
 8005a18:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a22:	181b      	adds	r3, r3, r0
 8005a24:	191b      	adds	r3, r3, r4
 8005a26:	18d3      	adds	r3, r2, r3
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	f240 3358 	movw	r3, #856	; 0x358
 8005a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a38:	545a      	strb	r2, [r3, r1]
 8005a3a:	f101 0201 	add.w	r2, r1, #1
 8005a3e:	f240 7358 	movw	r3, #1880	; 0x758
 8005a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a46:	601a      	str	r2, [r3, #0]
        ch = 92;
    }

    if ( size == FONT_1X )
    {
        for ( i = 0; i < 5; i++ )
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	f103 0301 	add.w	r3, r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	bf8c      	ite	hi
 8005a56:	2300      	movhi	r3, #0
 8005a58:	2301      	movls	r3, #1
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1d0      	bne.n	8005a02 <_Z6LcdChr11LcdFontSizeh+0x5a>
 8005a60:	e0fe      	b.n	8005c60 <_Z6LcdChr11LcdFontSizeh+0x2b8>
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = (byte)(FontLookup[ ch - 32 ][ i ] << 1);
        }
    }
    else if ( size == FONT_2X )
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	f040 80fb 	bne.w	8005c60 <_Z6LcdChr11LcdFontSizeh+0x2b8>
    {
        tmpIdx = LcdCacheIdx - 84;
 8005a6a:	f240 7358 	movw	r3, #1880	; 0x758
 8005a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1a3 0354 	sub.w	r3, r3, #84	; 0x54
 8005a78:	613b      	str	r3, [r7, #16]

        if ( tmpIdx < LoWaterMark )
 8005a7a:	f240 735c 	movw	r3, #1884	; 0x75c
 8005a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	da05      	bge.n	8005a96 <_Z6LcdChr11LcdFontSizeh+0xee>
        {
            LoWaterMark = tmpIdx;
 8005a8a:	f240 735c 	movw	r3, #1884	; 0x75c
 8005a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	601a      	str	r2, [r3, #0]
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da02      	bge.n	8005aa2 <_Z6LcdChr11LcdFontSizeh+0xfa>
 8005a9c:	f04f 0301 	mov.w	r3, #1
 8005aa0:	e121      	b.n	8005ce6 <_Z6LcdChr11LcdFontSizeh+0x33e>

        for ( i = 0; i < 5; i++ )
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	75fb      	strb	r3, [r7, #23]
 8005aa8:	e0b5      	b.n	8005c16 <_Z6LcdChr11LcdFontSizeh+0x26e>
        {
            /* Copy lookup table from Flash ROM to temporary c */
            c = FontLookup[ch - 32][i] << 1;
 8005aaa:	79bb      	ldrb	r3, [r7, #6]
 8005aac:	f1a3 0120 	sub.w	r1, r3, #32
 8005ab0:	7df8      	ldrb	r0, [r7, #23]
 8005ab2:	f646 7240 	movw	r2, #28480	; 0x6f40
 8005ab6:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005aba:	460b      	mov	r3, r1
 8005abc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005ac0:	185b      	adds	r3, r3, r1
 8005ac2:	181b      	adds	r3, r3, r0
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005acc:	73fb      	strb	r3, [r7, #15]
            /* Enlarge image */
            /* First part */
            b1 =  (c & 0x01) * 3;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	73bb      	strb	r3, [r7, #14]
            b1 |= (c & 0x02) * 6;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005aee:	18d3      	adds	r3, r2, r3
 8005af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	7bbb      	ldrb	r3, [r7, #14]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	73bb      	strb	r3, [r7, #14]
            b1 |= (c & 0x04) * 12;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	73bb      	strb	r3, [r7, #14]
            b1 |= (c & 0x08) * 24;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b2e:	18d3      	adds	r3, r2, r3
 8005b30:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	73bb      	strb	r3, [r7, #14]

            c >>= 4;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	ea4f 1323 	mov.w	r3, r3, asr #4
 8005b46:	73fb      	strb	r3, [r7, #15]
            /* Second part */
            b2 =  (c & 0x01) * 3;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b56:	18d3      	adds	r3, r2, r3
 8005b58:	737b      	strb	r3, [r7, #13]
            b2 |= (c & 0x02) * 6;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	7b7b      	ldrb	r3, [r7, #13]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	737b      	strb	r3, [r7, #13]
            b2 |= (c & 0x04) * 12;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	7b7b      	ldrb	r3, [r7, #13]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	737b      	strb	r3, [r7, #13]
            b2 |= (c & 0x08) * 24;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005ba8:	18d3      	adds	r3, r2, r3
 8005baa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	7b7b      	ldrb	r3, [r7, #13]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	737b      	strb	r3, [r7, #13]

            /* Copy two parts into LcdCache */
            LcdCache[tmpIdx++] = b1;
 8005bba:	f240 3358 	movw	r3, #856	; 0x358
 8005bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	7bba      	ldrb	r2, [r7, #14]
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f103 0301 	add.w	r3, r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
            LcdCache[tmpIdx++] = b1;
 8005bd2:	f240 3358 	movw	r3, #856	; 0x358
 8005bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	189b      	adds	r3, r3, r2
 8005bde:	7bba      	ldrb	r2, [r7, #14]
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f103 0301 	add.w	r3, r3, #1
 8005be8:	613b      	str	r3, [r7, #16]
            LcdCache[tmpIdx + 82] = b2;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f103 0252 	add.w	r2, r3, #82	; 0x52
 8005bf0:	f240 3358 	movw	r3, #856	; 0x358
 8005bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bf8:	7b79      	ldrb	r1, [r7, #13]
 8005bfa:	5499      	strb	r1, [r3, r2]
            LcdCache[tmpIdx + 83] = b2;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f103 0253 	add.w	r2, r3, #83	; 0x53
 8005c02:	f240 3358 	movw	r3, #856	; 0x358
 8005c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c0a:	7b79      	ldrb	r1, [r7, #13]
 8005c0c:	5499      	strb	r1, [r3, r2]
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	f103 0301 	add.w	r3, r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	bf8c      	ite	hi
 8005c1c:	2300      	movhi	r3, #0
 8005c1e:	2301      	movls	r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f af41 	bne.w	8005aaa <_Z6LcdChr11LcdFontSizeh+0x102>
            LcdCache[tmpIdx + 83] = b2;
        }

        /* Update x cursor position. */
        /* Version 0.2.5 - Possible bug fixed on Dec 25,2008 */
        LcdCacheIdx = (LcdCacheIdx + 11) % LCD_CACHE_SIZE;
 8005c28:	f240 7358 	movw	r3, #1880	; 0x758
 8005c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f103 020b 	add.w	r2, r3, #11
 8005c36:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005c3a:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da07      	bge.n	8005c54 <_Z6LcdChr11LcdFontSizeh+0x2ac>
 8005c44:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c48:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 8005c4c:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 8005c50:	f103 0301 	add.w	r3, r3, #1
 8005c54:	461a      	mov	r2, r3
 8005c56:	f240 7358 	movw	r3, #1880	; 0x758
 8005c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c5e:	601a      	str	r2, [r3, #0]
    }

    if ( LcdCacheIdx > HiWaterMark )
 8005c60:	f240 7358 	movw	r3, #1880	; 0x758
 8005c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	f240 7360 	movw	r3, #1888	; 0x760
 8005c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	dd09      	ble.n	8005c8c <_Z6LcdChr11LcdFontSizeh+0x2e4>
    {
        /* Update high marker. */
        HiWaterMark = LcdCacheIdx;
 8005c78:	f240 7358 	movw	r3, #1880	; 0x758
 8005c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	f240 7360 	movw	r3, #1888	; 0x760
 8005c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c8a:	601a      	str	r2, [r3, #0]
    }

    /* Horizontal gap between characters. */
    /* Version 0.2.5 - Possible bug fixed on Dec 25,2008 */
    LcdCache[LcdCacheIdx] = 0x00;
 8005c8c:	f240 7358 	movw	r3, #1880	; 0x758
 8005c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	f240 3358 	movw	r3, #856	; 0x358
 8005c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005c9e:	f04f 0100 	mov.w	r1, #0
 8005ca2:	5499      	strb	r1, [r3, r2]
    /* At index number LCD_CACHE_SIZE - 1, wrap to 0 */
    if(LcdCacheIdx == (LCD_CACHE_SIZE - 1) )
 8005ca4:	f240 7358 	movw	r3, #1880	; 0x758
 8005ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d109      	bne.n	8005cca <_Z6LcdChr11LcdFontSizeh+0x322>
    {
        LcdCacheIdx = 0;
 8005cb6:	f240 7358 	movw	r3, #1880	; 0x758
 8005cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
        return OK_WITH_WRAP;
 8005cc4:	f04f 0302 	mov.w	r3, #2
 8005cc8:	e00d      	b.n	8005ce6 <_Z6LcdChr11LcdFontSizeh+0x33e>
    }
    /* Otherwise just increment the index */
    LcdCacheIdx++;
 8005cca:	f240 7358 	movw	r3, #1880	; 0x758
 8005cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f103 0201 	add.w	r2, r3, #1
 8005cd8:	f240 7358 	movw	r3, #1880	; 0x758
 8005cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ce0:	601a      	str	r2, [r3, #0]
    return OK;
 8005ce2:	f04f 0300 	mov.w	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f107 0718 	add.w	r7, r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc90      	pop	{r4, r7}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop

08005cf4 <_Z6LcdStr11LcdFontSizePKh>:
 *                 dataArray -> Array contained string of char to be written
 *                              into cache.
 * Return value :  see return value on lcd.h
 */
byte LcdStr ( LcdFontSize size, const byte dataArray[] )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
    byte tmpIdx=0;
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
    byte response;
    while( dataArray[ tmpIdx ] != '\0' )
 8005d06:	e014      	b.n	8005d32 <_Z6LcdStr11LcdFontSizePKh+0x3e>
	{
        /* Send char */
		response = LcdChr( size, dataArray[ tmpIdx ] );
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	18d3      	adds	r3, r2, r3
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	79fa      	ldrb	r2, [r7, #7]
 8005d12:	4610      	mov	r0, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	f7ff fe47 	bl	80059a8 <_Z6LcdChr11LcdFontSizeh>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73bb      	strb	r3, [r7, #14]
        /* Just in case OUT_OF_BORDER occured */
        /* Dont worry if the signal == OK_WITH_WRAP, the string will
        be wrapped to starting point */
        if( response == OUT_OF_BORDER)
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d102      	bne.n	8005d2a <_Z6LcdStr11LcdFontSizePKh+0x36>
            return OUT_OF_BORDER;
 8005d24:	f04f 0301 	mov.w	r3, #1
 8005d28:	e010      	b.n	8005d4c <_Z6LcdStr11LcdFontSizePKh+0x58>
        /* Increase index */
		tmpIdx++;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	f103 0301 	add.w	r3, r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
 */
byte LcdStr ( LcdFontSize size, const byte dataArray[] )
{
    byte tmpIdx=0;
    byte response;
    while( dataArray[ tmpIdx ] != '\0' )
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	18d3      	adds	r3, r2, r3
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf0c      	ite	eq
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	2301      	movne	r3, #1
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1df      	bne.n	8005d08 <_Z6LcdStr11LcdFontSizePKh+0x14>
        if( response == OUT_OF_BORDER)
            return OUT_OF_BORDER;
        /* Increase index */
		tmpIdx++;
	}
    return OK;
 8005d48:	f04f 0300 	mov.w	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f107 0710 	add.w	r7, r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop

08005d58 <_Z9LcdUpdatev>:
 * Description  :  Copies the LCD cache into the device RAM.
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdUpdate ( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
	if(UpdateLcd == true){
 8005d5c:	f240 7364 	movw	r3, #1892	; 0x764
 8005d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d119      	bne.n	8005da0 <_Z9LcdUpdatev+0x48>
		return;
	}
    UpdateLcd = true;
 8005d6c:	f240 7364 	movw	r3, #1892	; 0x764
 8005d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d74:	f04f 0201 	mov.w	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]

    PageAddress = 0;
 8005d7a:	f240 7365 	movw	r3, #1893	; 0x765
 8005d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
    LcdSetPage(PageAddress);
 8005d88:	f240 7365 	movw	r3, #1893	; 0x765
 8005d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f887 	bl	8005ea8 <_Z10LcdSetPagei>

    LcdSendPageDMA();
 8005d9a:	f000 f84f 	bl	8005e3c <_Z14LcdSendPageDMAv>
 8005d9e:	e000      	b.n	8005da2 <_Z9LcdUpdatev+0x4a>
 * Return value :  None.
 */
void LcdUpdate ( void )
{
	if(UpdateLcd == true){
		return;
 8005da0:	bf00      	nop

    PageAddress = 0;
    LcdSetPage(PageAddress);

    LcdSendPageDMA();
}
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <_Z7LcdSendh10LcdCmdData>:
 * Argument(s)  :  data -> Data to be sent
 *                 cd   -> Command or data (see enum in lcd.h)
 * Return value :  None.
 */
void LcdSend ( byte data, LcdCmdData cd )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	71fa      	strb	r2, [r7, #7]
 8005db0:	71bb      	strb	r3, [r7, #6]
	GPIO_ResetBits(LCD_GPIO, LCD_SPI_CS);
 8005db2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005db6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005dba:	f04f 0110 	mov.w	r1, #16
 8005dbe:	f7fb fc99 	bl	80016f4 <GPIO_ResetBits>
	if(cd == LCD_CMD){
 8005dc2:	79bb      	ldrb	r3, [r7, #6]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <_Z7LcdSendh10LcdCmdData+0x34>
	    GPIO_ResetBits(LCD_GPIO, LCD_DC);
 8005dc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005dcc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005dd0:	f04f 0108 	mov.w	r1, #8
 8005dd4:	f7fb fc8e 	bl	80016f4 <GPIO_ResetBits>
	}
	SPI_I2S_SendData(LCD_SPI, data);
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005de0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005de4:	4619      	mov	r1, r3
 8005de6:	f7fc fd51 	bl	800288c <SPI_I2S_SendData>

	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY));
 8005dea:	bf00      	nop
 8005dec:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005df0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005df4:	f04f 0180 	mov.w	r1, #128	; 0x80
 8005df8:	f7fc fe3c 	bl	8002a74 <SPI_I2S_GetFlagStatus>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bf0c      	ite	eq
 8005e02:	2300      	moveq	r3, #0
 8005e04:	2301      	movne	r3, #1
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ef      	bne.n	8005dec <_Z7LcdSendh10LcdCmdData+0x48>

	if(cd == LCD_CMD){
 8005e0c:	79bb      	ldrb	r3, [r7, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d107      	bne.n	8005e22 <_Z7LcdSendh10LcdCmdData+0x7e>
	    GPIO_SetBits(LCD_GPIO, LCD_DC);
 8005e12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e16:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005e1a:	f04f 0108 	mov.w	r1, #8
 8005e1e:	f7fb fc5b 	bl	80016d8 <GPIO_SetBits>
	}
	GPIO_SetBits(LCD_GPIO, LCD_SPI_CS);
 8005e22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e26:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005e2a:	f04f 0110 	mov.w	r1, #16
 8005e2e:	f7fb fc53 	bl	80016d8 <GPIO_SetBits>
}
 8005e32:	f107 0708 	add.w	r7, r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop

08005e3c <_Z14LcdSendPageDMAv>:
 * Name         :  LcdSendPageDMA
 * Description  :  Send page to lcd using DMA.
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdSendPageDMA(){
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
    DMA_Cmd(LCD_DMA_CHANNEL, DISABLE);
 8005e40:	f04f 0030 	mov.w	r0, #48	; 0x30
 8005e44:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8005e48:	f04f 0100 	mov.w	r1, #0
 8005e4c:	f7fb f968 	bl	8001120 <DMA_Cmd>
    LCD_DMA_CHANNEL->CNDTR = LCD_X_RES;
 8005e50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005e54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e58:	f04f 0280 	mov.w	r2, #128	; 0x80
 8005e5c:	605a      	str	r2, [r3, #4]
    LCD_DMA_CHANNEL->CMAR = (uint32_t)(LcdCache + PageAddress*LCD_X_RES);
 8005e5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8005e62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e66:	f240 7265 	movw	r2, #1893	; 0x765
 8005e6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005e6e:	7812      	ldrb	r2, [r2, #0]
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8005e76:	4611      	mov	r1, r2
 8005e78:	f240 3258 	movw	r2, #856	; 0x358
 8005e7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005e80:	188a      	adds	r2, r1, r2
 8005e82:	60da      	str	r2, [r3, #12]
    //RMW
    //LcdSend(CMD_RMW, LCD_CMD);
    //LcdSend(0xff, LCD_DATA);
	GPIO_ResetBits(LCD_GPIO, LCD_SPI_CS);
 8005e84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e88:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005e8c:	f04f 0110 	mov.w	r1, #16
 8005e90:	f7fb fc30 	bl	80016f4 <GPIO_ResetBits>
    DMA_Cmd(LCD_DMA_CHANNEL, ENABLE);
 8005e94:	f04f 0030 	mov.w	r0, #48	; 0x30
 8005e98:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8005e9c:	f04f 0101 	mov.w	r1, #1
 8005ea0:	f7fb f93e 	bl	8001120 <DMA_Cmd>
}
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop

08005ea8 <_Z10LcdSetPagei>:
 * Name         :  LcdSetPage
 * Description  :  Sets page number.
 * Argument(s)  :  pg -> Number of page to be set
 * Return value :  None.
 */
void LcdSetPage(int pg){
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]

	//Page
	LcdSend(CMD_SET_PAGE | (pg & 0xf), LCD_CMD);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	f7ff ff6c 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

	//Column 0
    LcdSend(CMD_SET_COLUMN_LOWER, LCD_CMD);
 8005ecc:	f04f 0000 	mov.w	r0, #0
 8005ed0:	f04f 0100 	mov.w	r1, #0
 8005ed4:	f7ff ff66 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>
    LcdSend(CMD_SET_COLUMN_UPPER, LCD_CMD);
 8005ed8:	f04f 0010 	mov.w	r0, #16
 8005edc:	f04f 0100 	mov.w	r1, #0
 8005ee0:	f7ff ff60 	bl	8005da4 <_Z7LcdSendh10LcdCmdData>

}
 8005ee4:	f107 0708 	add.w	r7, r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <DMA1_Channel3_IRQHandler>:
 * Argument(s)  :  None.
 * Return value :  None.
 */
extern "C" {

void DMA1_Channel3_IRQHandler(void){
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
	while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY));
 8005ef0:	bf00      	nop
 8005ef2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8005ef6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005efa:	f04f 0180 	mov.w	r1, #128	; 0x80
 8005efe:	f7fc fdb9 	bl	8002a74 <SPI_I2S_GetFlagStatus>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf0c      	ite	eq
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	2301      	movne	r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1ef      	bne.n	8005ef2 <DMA1_Channel3_IRQHandler+0x6>
	GPIO_SetBits(LCD_GPIO, LCD_SPI_CS);
 8005f12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f16:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005f1a:	f04f 0110 	mov.w	r1, #16
 8005f1e:	f7fb fbdb 	bl	80016d8 <GPIO_SetBits>
    PageAddress++;
 8005f22:	f240 7365 	movw	r3, #1893	; 0x765
 8005f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f103 0301 	add.w	r3, r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	f240 7365 	movw	r3, #1893	; 0x765
 8005f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f3c:	701a      	strb	r2, [r3, #0]
    if(PageAddress >= LCD_PAGES){
 8005f3e:	f240 7365 	movw	r3, #1893	; 0x765
 8005f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b07      	cmp	r3, #7
 8005f4c:	bf94      	ite	ls
 8005f4e:	2300      	movls	r3, #0
 8005f50:	2301      	movhi	r3, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <DMA1_Channel3_IRQHandler+0x84>
    	UpdateLcd = false;
 8005f58:	f240 7364 	movw	r3, #1892	; 0x764
 8005f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
    	DMA_ClearITPendingBit(DMA1_IT_TC3);
 8005f66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f6a:	f7fb f9af 	bl	80012cc <DMA_ClearITPendingBit>
    	return;
 8005f6e:	e00e      	b.n	8005f8e <DMA1_Channel3_IRQHandler+0xa2>
    }
    LcdSetPage(PageAddress);
 8005f70:	f240 7365 	movw	r3, #1893	; 0x765
 8005f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff93 	bl	8005ea8 <_Z10LcdSetPagei>
    LcdSendPageDMA();
 8005f82:	f7ff ff5b 	bl	8005e3c <_Z14LcdSendPageDMAv>
	DMA_ClearITPendingBit(DMA1_IT_TC3);
 8005f86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f8a:	f7fb f99f 	bl	80012cc <DMA_ClearITPendingBit>
}
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_Z7ledInitv>:
 */
#include "led.h"
#include <stm32f10x_rcc.h>
#include <stm32f10x_gpio.h>

void ledInit(){
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8005f96:	f04f 0008 	mov.w	r0, #8
 8005f9a:	f04f 0101 	mov.w	r1, #1
 8005f9e:	f7fc f8cd 	bl	800213c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8005fa2:	f04f 0001 	mov.w	r0, #1
 8005fa6:	f04f 0101 	mov.w	r1, #1
 8005faa:	f7fc f8c7 	bl	800213c <RCC_APB2PeriphClockCmd>
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8005fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005fb2:	f2c0 0030 	movt	r0, #48	; 0x30
 8005fb6:	f04f 0101 	mov.w	r1, #1
 8005fba:	f7fb fc2b 	bl	8001814 <GPIO_PinRemapConfig>
	GPIO_InitTypeDef gpioInit;
	gpioInit.GPIO_Pin = LED1 | LED2 | LED3 | LED4;
 8005fbe:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005fc2:	80bb      	strh	r3, [r7, #4]
	gpioInit.GPIO_Mode = GPIO_Mode_Out_PP;
 8005fc4:	f04f 0310 	mov.w	r3, #16
 8005fc8:	71fb      	strb	r3, [r7, #7]
	gpioInit.GPIO_Speed = GPIO_Speed_2MHz;
 8005fca:	f04f 0302 	mov.w	r3, #2
 8005fce:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &gpioInit);
 8005fd0:	f107 0304 	add.w	r3, r7, #4
 8005fd4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005fd8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f7fb fa35 	bl	800144c <GPIO_Init>
}
 8005fe2:	f107 0708 	add.w	r7, r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop

08005fec <_Z9ledTogglet>:

void ledReset(uint16_t mask){
	GPIO_SetBits(GPIOB, mask);
}

void ledToggle(uint16_t mask){
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	80fb      	strh	r3, [r7, #6]
	uint16_t state = GPIO_ReadOutputData(GPIOB);
 8005ff6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005ffa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8005ffe:	f7fb fb5d 	bl	80016bc <GPIO_ReadOutputData>
 8006002:	4603      	mov	r3, r0
 8006004:	81fb      	strh	r3, [r7, #14]
	state ^= (0xffff & mask);
 8006006:	89fa      	ldrh	r2, [r7, #14]
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	4053      	eors	r3, r2
 800600c:	81fb      	strh	r3, [r7, #14]
	GPIO_Write(GPIOB, state);
 800600e:	89fb      	ldrh	r3, [r7, #14]
 8006010:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006014:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006018:	4619      	mov	r1, r3
 800601a:	f7fb fb91 	bl	8001740 <GPIO_Write>
}
 800601e:	f107 0710 	add.w	r7, r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop

08006028 <main>:
		del--;
	}
}

int main()
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
	//sysInit();
	//motorRunVel();
	sysInit();
 800602e:	f000 fdef 	bl	8006c10 <_Z7sysInitv>
	motorSetVel(-200, Right);
 8006032:	4832      	ldr	r0, [pc, #200]	; (80060fc <main+0xd4>)
 8006034:	f04f 0101 	mov.w	r1, #1
 8006038:	f000 fae6 	bl	8006608 <_Z11motorSetVelf5Motor>
	motorRunVel(Right);
 800603c:	f04f 0001 	mov.w	r0, #1
 8006040:	f000 fab4 	bl	80065ac <_Z11motorRunVel5Motor>
	while(true){
		//ctrlCheckAndExec();
		ledToggle(LED1 | LED2 | LED3 | LED4);
 8006044:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006048:	f7ff ffd0 	bl	8005fec <_Z9ledTogglet>
		sysDelayMs(500);
 800604c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006050:	f000 fe10 	bl	8006c74 <_Z10sysDelayMsj>
		LcdClear();
 8006054:	f7ff fc5a 	bl	800590c <_Z8LcdClearv>
		LcdGotoXYFont(1, 1);
 8006058:	f04f 0001 	mov.w	r0, #1
 800605c:	f04f 0101 	mov.w	r1, #1
 8006060:	f7ff fc72 	bl	8005948 <_Z13LcdGotoXYFonthh>
		LcdStr(FONT_1X, (const unsigned char*)"Encoder: ");
 8006064:	f04f 0001 	mov.w	r0, #1
 8006068:	f646 7128 	movw	r1, #28456	; 0x6f28
 800606c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006070:	f7ff fe40 	bl	8005cf4 <_Z6LcdStr11LcdFontSizePKh>
		unsigned char buffer[20];
		uint8_t cnt = uitoa(motorReadEnc(Right), (char*)buffer, 10);
 8006074:	f04f 0001 	mov.w	r0, #1
 8006078:	f000 fc8e 	bl	8006998 <_Z12motorReadEnc5Motor>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	463b      	mov	r3, r7
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	f04f 020a 	mov.w	r2, #10
 800608a:	f000 fe0f 	bl	8006cac <_Z5uitoamPch>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]
		buffer[cnt] = 0;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	f107 0218 	add.w	r2, r7, #24
 8006098:	18d3      	adds	r3, r2, r3
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f803 2c18 	strb.w	r2, [r3, #-24]
		LcdStr(FONT_1X, buffer);
 80060a2:	463b      	mov	r3, r7
 80060a4:	f04f 0001 	mov.w	r0, #1
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7ff fe23 	bl	8005cf4 <_Z6LcdStr11LcdFontSizePKh>
		LcdStr(FONT_1X, (const unsigned char*)", TIM1: ");
 80060ae:	f04f 0001 	mov.w	r0, #1
 80060b2:	f646 7134 	movw	r1, #28468	; 0x6f34
 80060b6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80060ba:	f7ff fe1b 	bl	8005cf4 <_Z6LcdStr11LcdFontSizePKh>
		cnt = uitoa(motor_width[Right], (char*)buffer, 10);
 80060be:	f240 7384 	movw	r3, #1924	; 0x784
 80060c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	461a      	mov	r2, r3
 80060ca:	463b      	mov	r3, r7
 80060cc:	4610      	mov	r0, r2
 80060ce:	4619      	mov	r1, r3
 80060d0:	f04f 020a 	mov.w	r2, #10
 80060d4:	f000 fdea 	bl	8006cac <_Z5uitoamPch>
 80060d8:	4603      	mov	r3, r0
 80060da:	75fb      	strb	r3, [r7, #23]
		buffer[cnt] = 0;
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	f107 0218 	add.w	r2, r7, #24
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f803 2c18 	strb.w	r2, [r3, #-24]
		LcdStr(FONT_1X, buffer);
 80060ec:	463b      	mov	r3, r7
 80060ee:	f04f 0001 	mov.w	r0, #1
 80060f2:	4619      	mov	r1, r3
 80060f4:	f7ff fdfe 	bl	8005cf4 <_Z6LcdStr11LcdFontSizePKh>
	//sysInit();
	//motorRunVel();
	sysInit();
	motorSetVel(-200, Right);
	motorRunVel(Right);
	while(true){
 80060f8:	e7a4      	b.n	8006044 <main+0x1c>
 80060fa:	bf00      	nop
 80060fc:	c3480000 	.word	0xc3480000

08006100 <_Z9motorInitfffm>:
volatile int32_t set_speed[2];
volatile float set_pos[2];
volatile bool motorUpdate[2];
volatile bool motorEnable[2];

void motorInit(float imotorKp, float imotorKi, float imotorKd, uint32_t icpr){
 8006100:	b580      	push	{r7, lr}
 8006102:	b092      	sub	sp, #72	; 0x48
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
	motorKp = imotorKp; motorKd = imotorKd; motorKi = imotorKi; cpr = icpr;
 800610e:	f240 7378 	movw	r3, #1912	; 0x778
 8006112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f240 7380 	movw	r3, #1920	; 0x780
 800611e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f240 737c 	movw	r3, #1916	; 0x77c
 800612a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	b29a      	uxth	r2, r3
 8006136:	f240 0328 	movw	r3, #40	; 0x28
 800613a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800613e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 2; i++){
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	647b      	str	r3, [r7, #68]	; 0x44
 8006146:	e05c      	b.n	8006202 <_Z9motorInitfffm+0x102>
		cte_int[i] = 0; cte_prev[i] = 0;
 8006148:	f240 7368 	movw	r3, #1896	; 0x768
 800614c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006152:	f04f 0100 	mov.w	r1, #0
 8006156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800615a:	f240 7370 	movw	r3, #1904	; 0x770
 800615e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		prev_enc[i] = 0;
 800616c:	f240 738c 	movw	r3, #1932	; 0x78c
 8006170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006176:	f04f 0100 	mov.w	r1, #0
 800617a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		cur_speed[i] = 0;
 800617e:	f240 7390 	movw	r3, #1936	; 0x790
 8006182:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006188:	f04f 0100 	mov.w	r1, #0
 800618c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cur_pos[i] = 0;
 8006190:	f240 7398 	movw	r3, #1944	; 0x798
 8006194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800619a:	f8df 140c 	ldr.w	r1, [pc, #1036]	; 80065a8 <_Z9motorInitfffm+0x4a8>
 800619e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		motor_width[i] = 0;
 80061a2:	f240 7384 	movw	r3, #1924	; 0x784
 80061a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		motorEnable[i] = false;
 80061b4:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80061b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061be:	189b      	adds	r3, r3, r2
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
		motorUpdate[i] = true;
 80061c6:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80061ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	f04f 0201 	mov.w	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]
		set_speed[i] = 0;
 80061d8:	f240 73a0 	movw	r3, #1952	; 0x7a0
 80061dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		set_pos[i] = 0;
 80061ea:	f240 73a8 	movw	r3, #1960	; 0x7a8
 80061ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80061f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f4:	49ec      	ldr	r1, [pc, #944]	; (80065a8 <_Z9motorInitfffm+0x4a8>)
 80061f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
volatile bool motorUpdate[2];
volatile bool motorEnable[2];

void motorInit(float imotorKp, float imotorKi, float imotorKd, uint32_t icpr){
	motorKp = imotorKp; motorKd = imotorKd; motorKi = imotorKi; cpr = icpr;
	for(int i = 0; i < 2; i++){
 80061fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fc:	f103 0301 	add.w	r3, r3, #1
 8006200:	647b      	str	r3, [r7, #68]	; 0x44
 8006202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006204:	2b01      	cmp	r3, #1
 8006206:	bfcc      	ite	gt
 8006208:	2300      	movgt	r3, #0
 800620a:	2301      	movle	r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d19a      	bne.n	8006148 <_Z9motorInitfffm+0x48>
		motorUpdate[i] = true;
		set_speed[i] = 0;
		set_pos[i] = 0;
	}

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8006212:	f04f 0004 	mov.w	r0, #4
 8006216:	f04f 0101 	mov.w	r1, #1
 800621a:	f7fb ff8f 	bl	800213c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800621e:	f04f 0008 	mov.w	r0, #8
 8006222:	f04f 0101 	mov.w	r1, #1
 8006226:	f7fb ff89 	bl	800213c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800622a:	f04f 0010 	mov.w	r0, #16
 800622e:	f04f 0101 	mov.w	r1, #1
 8006232:	f7fb ff83 	bl	800213c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8006236:	f04f 0001 	mov.w	r0, #1
 800623a:	f04f 0101 	mov.w	r1, #1
 800623e:	f7fb ff7d 	bl	800213c <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef gpioInit;
	gpioInit.GPIO_Mode = GPIO_Mode_AF_PP;
 8006242:	f04f 0318 	mov.w	r3, #24
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	gpioInit.GPIO_Speed = GPIO_Speed_50MHz;
 800624a:	f04f 0303 	mov.w	r3, #3
 800624e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	gpioInit.GPIO_Pin = OUT_FWD_1 | OUT_FWD_2;
 8006252:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	GPIO_Init(OUT_PORT_FWD, &gpioInit);
 800625a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800625e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006262:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006266:	4619      	mov	r1, r3
 8006268:	f7fb f8f0 	bl	800144c <GPIO_Init>

	gpioInit.GPIO_Pin = OUT_BCKWD_1 | OUT_BCKWD_2;
 800626c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006270:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	GPIO_Init(OUT_PORT_BCKWD, &gpioInit);
 8006274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006278:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800627c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006280:	4619      	mov	r1, r3
 8006282:	f7fb f8e3 	bl	800144c <GPIO_Init>

	gpioInit.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8006286:	f04f 0304 	mov.w	r3, #4
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	gpioInit.GPIO_Pin = IN_A_1 | IN_B_1;
 800628e:	f04f 03c0 	mov.w	r3, #192	; 0xc0
 8006292:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	GPIO_Init(IN_1_PORT, &gpioInit);
 8006296:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800629a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800629e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80062a2:	4619      	mov	r1, r3
 80062a4:	f7fb f8d2 	bl	800144c <GPIO_Init>

	gpioInit.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80062a8:	f04f 0304 	mov.w	r3, #4
 80062ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	gpioInit.GPIO_Pin = IN_A_2 | IN_B_2;
 80062b0:	f04f 03c0 	mov.w	r3, #192	; 0xc0
 80062b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	GPIO_Init(IN_2_PORT, &gpioInit);
 80062b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80062c0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80062c4:	4619      	mov	r1, r3
 80062c6:	f7fb f8c1 	bl	800144c <GPIO_Init>

	//Encoder left
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80062ca:	f04f 0004 	mov.w	r0, #4
 80062ce:	f04f 0101 	mov.w	r1, #1
 80062d2:	f7fb ff5f 	bl	8002194 <RCC_APB1PeriphClockCmd>

	TIM_ICInitTypeDef icInit;
	icInit.TIM_Channel = TIM_Channel_1;
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	86bb      	strh	r3, [r7, #52]	; 0x34
	icInit.TIM_ICPolarity = TIM_ICPolarity_Rising;
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	86fb      	strh	r3, [r7, #54]	; 0x36
	icInit.TIM_ICFilter = 0;
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	icInit.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	877b      	strh	r3, [r7, #58]	; 0x3a
	icInit.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80062ee:	f04f 0301 	mov.w	r3, #1
 80062f2:	873b      	strh	r3, [r7, #56]	; 0x38
	TIM_ICInit(TIM4, &icInit);
 80062f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80062fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006300:	4619      	mov	r1, r3
 8006302:	f7fd f857 	bl	80033b4 <TIM_ICInit>
	icInit.TIM_Channel = TIM_Channel_2;
 8006306:	f04f 0304 	mov.w	r3, #4
 800630a:	86bb      	strh	r3, [r7, #52]	; 0x34
	TIM_ICInit(TIM4, &icInit);
 800630c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006314:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006318:	4619      	mov	r1, r3
 800631a:	f7fd f84b 	bl	80033b4 <TIM_ICInit>

	TIM_EncoderInterfaceConfig(TIM4, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 800631e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006322:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006326:	f04f 0103 	mov.w	r1, #3
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	f7fd fb67 	bl	8003a04 <TIM_EncoderInterfaceConfig>
	TIM_SetAutoreload(TIM4, 0xffff);
 8006336:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800633a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800633e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006342:	f7fe f87d 	bl	8004440 <TIM_SetAutoreload>
	TIM_SetCounter(TIM4, 0);
 8006346:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800634a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f7fe f867 	bl	8004424 <TIM_SetCounter>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8006356:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800635a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800635e:	f04f 0101 	mov.w	r1, #1
 8006362:	f04f 0201 	mov.w	r2, #1
 8006366:	f7fd f9d7 	bl	8003718 <TIM_ITConfig>

	NVIC_InitTypeDef initNVIC;
	initNVIC.NVIC_IRQChannel = TIM4_IRQn;
 800636a:	f04f 031e 	mov.w	r3, #30
 800636e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	initNVIC.NVIC_IRQChannelPreemptionPriority = 0;
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	initNVIC.NVIC_IRQChannelSubPriority = 0;
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	initNVIC.NVIC_IRQChannelCmd = ENABLE;
 8006382:	f04f 0301 	mov.w	r3, #1
 8006386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	NVIC_Init(&initNVIC);
 800638a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800638e:	4618      	mov	r0, r3
 8006390:	f7f9 fed0 	bl	8000134 <NVIC_Init>

	TIM_Cmd(TIM4, ENABLE);
 8006394:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006398:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800639c:	f04f 0101 	mov.w	r1, #1
 80063a0:	f7fd f972 	bl	8003688 <TIM_Cmd>

	//Encoder right

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80063a4:	f04f 0002 	mov.w	r0, #2
 80063a8:	f04f 0101 	mov.w	r1, #1
 80063ac:	f7fb fef2 	bl	8002194 <RCC_APB1PeriphClockCmd>

	icInit.TIM_Channel = TIM_Channel_1;
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	86bb      	strh	r3, [r7, #52]	; 0x34
	icInit.TIM_ICPolarity = TIM_ICPolarity_Rising;
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	86fb      	strh	r3, [r7, #54]	; 0x36
	icInit.TIM_ICFilter = 0;
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
	icInit.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	877b      	strh	r3, [r7, #58]	; 0x3a
	icInit.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80063c8:	f04f 0301 	mov.w	r3, #1
 80063cc:	873b      	strh	r3, [r7, #56]	; 0x38
	TIM_ICInit(TIM3, &icInit);
 80063ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80063d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80063d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80063da:	4619      	mov	r1, r3
 80063dc:	f7fc ffea 	bl	80033b4 <TIM_ICInit>
	icInit.TIM_Channel = TIM_Channel_2;
 80063e0:	f04f 0304 	mov.w	r3, #4
 80063e4:	86bb      	strh	r3, [r7, #52]	; 0x34
	TIM_ICInit(TIM3, &icInit);
 80063e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80063ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80063ee:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80063f2:	4619      	mov	r1, r3
 80063f4:	f7fc ffde 	bl	80033b4 <TIM_ICInit>

	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 80063f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80063fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006400:	f04f 0103 	mov.w	r1, #3
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	f7fd fafa 	bl	8003a04 <TIM_EncoderInterfaceConfig>
	TIM_SetAutoreload(TIM3, 0xffff);
 8006410:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006414:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006418:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800641c:	f7fe f810 	bl	8004440 <TIM_SetAutoreload>
	TIM_SetCounter(TIM3, 0);
 8006420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006424:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	f7fd fffa 	bl	8004424 <TIM_SetCounter>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8006430:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006434:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006438:	f04f 0101 	mov.w	r1, #1
 800643c:	f04f 0201 	mov.w	r2, #1
 8006440:	f7fd f96a 	bl	8003718 <TIM_ITConfig>

	initNVIC.NVIC_IRQChannel = TIM3_IRQn;
 8006444:	f04f 031d 	mov.w	r3, #29
 8006448:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	initNVIC.NVIC_IRQChannelPreemptionPriority = 0;
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	initNVIC.NVIC_IRQChannelSubPriority = 0;
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	initNVIC.NVIC_IRQChannelCmd = ENABLE;
 800645c:	f04f 0301 	mov.w	r3, #1
 8006460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	NVIC_Init(&initNVIC);
 8006464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006468:	4618      	mov	r0, r3
 800646a:	f7f9 fe63 	bl	8000134 <NVIC_Init>

	GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);
 800646e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006472:	f2c0 001a 	movt	r0, #26
 8006476:	f04f 0101 	mov.w	r1, #1
 800647a:	f7fb f9cb 	bl	8001814 <GPIO_PinRemapConfig>

	TIM_Cmd(TIM3, ENABLE);
 800647e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006482:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006486:	f04f 0101 	mov.w	r1, #1
 800648a:	f7fd f8fd 	bl	8003688 <TIM_Cmd>

	//PWM
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800648e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006492:	f04f 0101 	mov.w	r1, #1
 8006496:	f7fb fe51 	bl	800213c <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseInitTypeDef tim1Init;
	TIM_OCInitTypeDef ocInit;
	tim1Init.TIM_Period = MAX_WIDTH;
 800649a:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 800649e:	853b      	strh	r3, [r7, #40]	; 0x28
	tim1Init.TIM_Prescaler = 1;
 80064a0:	f04f 0301 	mov.w	r3, #1
 80064a4:	84bb      	strh	r3, [r7, #36]	; 0x24
	tim1Init.TIM_ClockDivision = 0;
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	857b      	strh	r3, [r7, #42]	; 0x2a
	tim1Init.TIM_CounterMode = TIM_CounterMode_Up;
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	TIM_TimeBaseInit(TIM1, &tim1Init);
 80064b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b6:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80064ba:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80064be:	4619      	mov	r1, r3
 80064c0:	f7fc fcc2 	bl	8002e48 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration: Channel2 */
	ocInit.TIM_OCMode = TIM_OCMode_PWM1;
 80064c4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80064c8:	82bb      	strh	r3, [r7, #20]
	ocInit.TIM_OutputState = TIM_OutputState_Disable;
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	82fb      	strh	r3, [r7, #22]
	ocInit.TIM_OutputNState = TIM_OutputNState_Disable;
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	833b      	strh	r3, [r7, #24]
	ocInit.TIM_Pulse = 0;
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	837b      	strh	r3, [r7, #26]
	ocInit.TIM_OCPolarity = TIM_OCPolarity_High;
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	83bb      	strh	r3, [r7, #28]
	ocInit.TIM_OCNPolarity = TIM_OCNPolarity_High;
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	83fb      	strh	r3, [r7, #30]

	TIM_OC1Init(TIM1, &ocInit);
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80064f0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80064f4:	4619      	mov	r1, r3
 80064f6:	f7fc fd35 	bl	8002f64 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 80064fa:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 80064fe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006502:	f04f 0108 	mov.w	r1, #8
 8006506:	f7fd fbbf 	bl	8003c88 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM1, &ocInit);
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006512:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006516:	4619      	mov	r1, r3
 8006518:	f7fc fdb8 	bl	800308c <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800651c:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006520:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006524:	f04f 0108 	mov.w	r1, #8
 8006528:	f7fd fbca 	bl	8003cc0 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM1, &ocInit);
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006534:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006538:	4619      	mov	r1, r3
 800653a:	f7fc fe3b 	bl	80031b4 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800653e:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006542:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006546:	f04f 0108 	mov.w	r1, #8
 800654a:	f7fd fbd9 	bl	8003d00 <TIM_OC3PreloadConfig>
	TIM_OC4Init(TIM1, &ocInit);
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006556:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800655a:	4619      	mov	r1, r3
 800655c:	f7fc feba 	bl	80032d4 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8006560:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006564:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006568:	f04f 0108 	mov.w	r1, #8
 800656c:	f7fd fbe4 	bl	8003d38 <TIM_OC4PreloadConfig>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8006570:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006574:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006578:	f04f 0101 	mov.w	r1, #1
 800657c:	f7fd f8a4 	bl	80036c8 <TIM_CtrlPWMOutputs>

	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8006580:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006584:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006588:	f04f 0101 	mov.w	r1, #1
 800658c:	f7fd fafc 	bl	8003b88 <TIM_ARRPreloadConfig>

	/* TIM1 enable counter */
	TIM_Cmd(TIM1, ENABLE);
 8006590:	f44f 5030 	mov.w	r0, #11264	; 0x2c00
 8006594:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006598:	f04f 0101 	mov.w	r1, #1
 800659c:	f7fd f874 	bl	8003688 <TIM_Cmd>
}
 80065a0:	f107 0748 	add.w	r7, r7, #72	; 0x48
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	00000000 	.word	0x00000000

080065ac <_Z11motorRunVel5Motor>:

void motorRunVel(Motor motor){
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	71fb      	strb	r3, [r7, #7]
	motorEnable[motor] = true;
 80065b6:	79fa      	ldrb	r2, [r7, #7]
 80065b8:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80065bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80065c0:	f04f 0101 	mov.w	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]
	cte_prev[motor] = 0;
 80065c6:	79fa      	ldrb	r2, [r7, #7]
 80065c8:	f240 7370 	movw	r3, #1904	; 0x770
 80065cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	cte_int[motor] = 0;
 80065d8:	79fa      	ldrb	r2, [r7, #7]
 80065da:	f240 7368 	movw	r3, #1896	; 0x768
 80065de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	motor_width[motor] = 0;
 80065ea:	79fa      	ldrb	r2, [r7, #7]
 80065ec:	f240 7384 	movw	r3, #1924	; 0x784
 80065f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80065fc:	f107 070c 	add.w	r7, r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <_Z11motorSetVelf5Motor>:
	cur_pos[motor] = 0;
	motor_width[motor] = 0;
	motorEnable[motor] = false;
}

void motorSetVel(float speed, Motor motor){ 	//rpm
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
	set_speed[motor] = speed*cpr/(60*PID_freq);
 8006614:	78fc      	ldrb	r4, [r7, #3]
 8006616:	f240 0328 	movw	r3, #40	; 0x28
 800661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fd2f 	bl	8005084 <__aeabi_i2f>
 8006626:	4603      	mov	r3, r0
 8006628:	4618      	mov	r0, r3
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	f7fe fd7e 	bl	800512c <__aeabi_fmul>
 8006630:	4603      	mov	r3, r0
 8006632:	4618      	mov	r0, r3
 8006634:	4908      	ldr	r1, [pc, #32]	; (8006658 <_Z11motorSetVelf5Motor+0x50>)
 8006636:	f7fe fe2d 	bl	8005294 <__aeabi_fdiv>
 800663a:	4603      	mov	r3, r0
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe ff3b 	bl	80054b8 <__aeabi_f2iz>
 8006642:	4602      	mov	r2, r0
 8006644:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8006648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800664c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
 8006650:	f107 070c 	add.w	r7, r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}
 8006658:	453b8000 	.word	0x453b8000

0800665c <_Z8motorPID5Motor>:

void motorSetPid(float imotorKp, float imotorKi, float imotorKd){
	motorKp = imotorKp; motorKd = imotorKd; motorKi = imotorKi;
}

void motorPID(Motor motor){
 800665c:	b5b0      	push	{r4, r5, r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
	uint16_t cur_enc = motorReadEnc(motor);
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f995 	bl	8006998 <_Z12motorReadEnc5Motor>
 800666e:	4603      	mov	r3, r0
 8006670:	81bb      	strh	r3, [r7, #12]
	if(motorUpdate[motor] == true){
 8006672:	79fa      	ldrb	r2, [r7, #7]
 8006674:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8006678:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800667c:	5c9b      	ldrb	r3, [r3, r2]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d043      	beq.n	800670c <_Z8motorPID5Motor+0xb0>
		if(cur_enc < prev_enc[motor]){
 8006684:	79fa      	ldrb	r2, [r7, #7]
 8006686:	f240 738c 	movw	r3, #1932	; 0x78c
 800668a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800668e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006692:	b29b      	uxth	r3, r3
 8006694:	89ba      	ldrh	r2, [r7, #12]
 8006696:	429a      	cmp	r2, r3
 8006698:	bf2c      	ite	cs
 800669a:	2300      	movcs	r3, #0
 800669c:	2301      	movcc	r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d014      	beq.n	80066ce <_Z8motorPID5Motor+0x72>
			cur_speed[motor] = ((int)cur_enc - prev_enc[motor] + 0xffff);
 80066a4:	79f9      	ldrb	r1, [r7, #7]
 80066a6:	89ba      	ldrh	r2, [r7, #12]
 80066a8:	79f8      	ldrb	r0, [r7, #7]
 80066aa:	f240 738c 	movw	r3, #1932	; 0x78c
 80066ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80066b2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066be:	189a      	adds	r2, r3, r2
 80066c0:	f240 7390 	movw	r3, #1936	; 0x790
 80066c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80066c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80066cc:	e015      	b.n	80066fa <_Z8motorPID5Motor+0x9e>
		}
		else{
			cur_speed[motor] = ((int)cur_enc - prev_enc[motor] - 0xffff);
 80066ce:	79f9      	ldrb	r1, [r7, #7]
 80066d0:	89ba      	ldrh	r2, [r7, #12]
 80066d2:	79f8      	ldrb	r0, [r7, #7]
 80066d4:	f240 738c 	movw	r3, #1932	; 0x78c
 80066d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80066dc:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	1ad2      	subs	r2, r2, r3
 80066e4:	f04f 0301 	mov.w	r3, #1
 80066e8:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80066ec:	18d3      	adds	r3, r2, r3
 80066ee:	f240 7290 	movw	r2, #1936	; 0x790
 80066f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80066f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		motorUpdate[motor] = false;
 80066fa:	79fa      	ldrb	r2, [r7, #7]
 80066fc:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8006700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	5499      	strb	r1, [r3, r2]
 800670a:	e010      	b.n	800672e <_Z8motorPID5Motor+0xd2>
	}
	else{
		cur_speed[motor] = ((int)cur_enc - prev_enc[motor]);
 800670c:	79fa      	ldrb	r2, [r7, #7]
 800670e:	89b9      	ldrh	r1, [r7, #12]
 8006710:	79f8      	ldrb	r0, [r7, #7]
 8006712:	f240 738c 	movw	r3, #1932	; 0x78c
 8006716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800671a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800671e:	b29b      	uxth	r3, r3
 8006720:	1ac9      	subs	r1, r1, r3
 8006722:	f240 7390 	movw	r3, #1936	; 0x790
 8006726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800672a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	//cur_speed = cur_speed*60*PID_freq/cpr;
	prev_enc[motor] = cur_enc;
 800672e:	79fa      	ldrb	r2, [r7, #7]
 8006730:	f240 738c 	movw	r3, #1932	; 0x78c
 8006734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006738:	89b9      	ldrh	r1, [r7, #12]
 800673a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if(motorEnable[motor]){
 800673e:	79fa      	ldrb	r2, [r7, #7]
 8006740:	f240 73b4 	movw	r3, #1972	; 0x7b4
 8006744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006748:	5c9b      	ldrb	r3, [r3, r2]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8118 	beq.w	8006982 <_Z8motorPID5Motor+0x326>
		int32_t cte = (set_speed[motor] - cur_speed[motor]);
 8006752:	79fa      	ldrb	r2, [r7, #7]
 8006754:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8006758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800675c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006760:	461a      	mov	r2, r3
 8006762:	79f9      	ldrb	r1, [r7, #7]
 8006764:	f240 7390 	movw	r3, #1936	; 0x790
 8006768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800676c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	60bb      	str	r3, [r7, #8]
		//uint8_t a = 0;
		cte_int[motor] += cte;
 8006774:	79fa      	ldrb	r2, [r7, #7]
 8006776:	79f9      	ldrb	r1, [r7, #7]
 8006778:	f240 7368 	movw	r3, #1896	; 0x768
 800677c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006784:	4619      	mov	r1, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	18c9      	adds	r1, r1, r3
 800678a:	f240 7368 	movw	r3, #1896	; 0x768
 800678e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		motor_width[motor] = motorKp*cte +
 8006796:	79fc      	ldrb	r4, [r7, #7]
								motorKd*(cte - cte_prev[motor])*PID_freq +
								motorKi*cte_int[motor]/PID_freq;
 8006798:	68b8      	ldr	r0, [r7, #8]
 800679a:	f7fe fc73 	bl	8005084 <__aeabi_i2f>
 800679e:	4602      	mov	r2, r0
 80067a0:	f240 7378 	movw	r3, #1912	; 0x778
 80067a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4610      	mov	r0, r2
 80067ac:	4619      	mov	r1, r3
 80067ae:	f7fe fcbd 	bl	800512c <__aeabi_fmul>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461d      	mov	r5, r3
 80067b6:	79fa      	ldrb	r2, [r7, #7]
	if(motorEnable[motor]){
		int32_t cte = (set_speed[motor] - cur_speed[motor]);
		//uint8_t a = 0;
		cte_int[motor] += cte;
		motor_width[motor] = motorKp*cte +
								motorKd*(cte - cte_prev[motor])*PID_freq +
 80067b8:	f240 7370 	movw	r3, #1904	; 0x770
 80067bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
								motorKi*cte_int[motor]/PID_freq;
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe fc5b 	bl	8005084 <__aeabi_i2f>
 80067ce:	4602      	mov	r2, r0
 80067d0:	f240 7380 	movw	r3, #1920	; 0x780
 80067d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	f7fe fca5 	bl	800512c <__aeabi_fmul>
 80067e2:	4603      	mov	r3, r0
 80067e4:	4618      	mov	r0, r3
 80067e6:	4969      	ldr	r1, [pc, #420]	; (800698c <_Z8motorPID5Motor+0x330>)
 80067e8:	f7fe fca0 	bl	800512c <__aeabi_fmul>
 80067ec:	4603      	mov	r3, r0
 80067ee:	4628      	mov	r0, r5
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fe fb93 	bl	8004f1c <__addsf3>
 80067f6:	4603      	mov	r3, r0
 80067f8:	461d      	mov	r5, r3
 80067fa:	79fa      	ldrb	r2, [r7, #7]
 80067fc:	f240 7368 	movw	r3, #1896	; 0x768
 8006800:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fc3b 	bl	8005084 <__aeabi_i2f>
 800680e:	4602      	mov	r2, r0
 8006810:	f240 737c 	movw	r3, #1916	; 0x77c
 8006814:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	f7fe fc85 	bl	800512c <__aeabi_fmul>
 8006822:	4603      	mov	r3, r0
 8006824:	4618      	mov	r0, r3
 8006826:	4959      	ldr	r1, [pc, #356]	; (800698c <_Z8motorPID5Motor+0x330>)
 8006828:	f7fe fd34 	bl	8005294 <__aeabi_fdiv>
 800682c:	4603      	mov	r3, r0
 800682e:	4628      	mov	r0, r5
 8006830:	4619      	mov	r1, r3
 8006832:	f7fe fb73 	bl	8004f1c <__addsf3>
 8006836:	4603      	mov	r3, r0
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fe3d 	bl	80054b8 <__aeabi_f2iz>
 800683e:	4602      	mov	r2, r0
 8006840:	f240 7384 	movw	r3, #1924	; 0x784
 8006844:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006848:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if(motor_width[motor] > MAX_WIDTH*0.9){
 800684c:	79fa      	ldrb	r2, [r7, #7]
 800684e:	f240 7384 	movw	r3, #1924	; 0x784
 8006852:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fc12 	bl	8005084 <__aeabi_i2f>
 8006860:	4603      	mov	r3, r0
 8006862:	f04f 0201 	mov.w	r2, #1
 8006866:	4614      	mov	r4, r2
 8006868:	4618      	mov	r0, r3
 800686a:	4949      	ldr	r1, [pc, #292]	; (8006990 <_Z8motorPID5Motor+0x334>)
 800686c:	f7fe fe1a 	bl	80054a4 <__aeabi_fcmpgt>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d102      	bne.n	800687c <_Z8motorPID5Motor+0x220>
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	461c      	mov	r4, r3
 800687c:	b2e3      	uxtb	r3, r4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d008      	beq.n	8006894 <_Z8motorPID5Motor+0x238>
			motor_width[motor] = MAX_WIDTH*0.9;
 8006882:	79fa      	ldrb	r2, [r7, #7]
 8006884:	f240 7384 	movw	r3, #1924	; 0x784
 8006888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800688c:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8006890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		if(motor_width[motor] < -MAX_WIDTH*0.9){
 8006894:	79fa      	ldrb	r2, [r7, #7]
 8006896:	f240 7384 	movw	r3, #1924	; 0x784
 800689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fbee 	bl	8005084 <__aeabi_i2f>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f04f 0201 	mov.w	r2, #1
 80068ae:	4614      	mov	r4, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	4938      	ldr	r1, [pc, #224]	; (8006994 <_Z8motorPID5Motor+0x338>)
 80068b4:	f7fe fdd8 	bl	8005468 <__aeabi_fcmplt>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <_Z8motorPID5Motor+0x268>
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	461c      	mov	r4, r3
 80068c4:	b2e3      	uxtb	r3, r4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <_Z8motorPID5Motor+0x284>
			motor_width[motor] = -MAX_WIDTH*0.9;
 80068ca:	79f9      	ldrb	r1, [r7, #7]
 80068cc:	f240 7384 	movw	r3, #1924	; 0x784
 80068d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80068d4:	f64f 22f0 	movw	r2, #64240	; 0xfaf0
 80068d8:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 80068dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		}
		cte_prev[motor] = cte;
 80068e0:	79fa      	ldrb	r2, [r7, #7]
 80068e2:	f240 7370 	movw	r3, #1904	; 0x770
 80068e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		uint16_t ccrVal;
		if(motor_width[motor] < 0){
 80068f0:	79fa      	ldrb	r2, [r7, #7]
 80068f2:	f240 7384 	movw	r3, #1924	; 0x784
 80068f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d011      	beq.n	800692c <_Z8motorPID5Motor+0x2d0>
			motorEnableCC(Backward, motor);
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	f04f 0001 	mov.w	r0, #1
 800690e:	4619      	mov	r1, r3
 8006910:	f000 f85e 	bl	80069d0 <_Z13motorEnableCC9Direction5Motor>
			ccrVal = -motor_width[motor];
 8006914:	79fa      	ldrb	r2, [r7, #7]
 8006916:	f240 7384 	movw	r3, #1924	; 0x784
 800691a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800691e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f1c3 0300 	rsb	r3, r3, #0
 8006928:	81fb      	strh	r3, [r7, #14]
 800692a:	e00d      	b.n	8006948 <_Z8motorPID5Motor+0x2ec>
		}
		else{
			motorEnableCC(Forward, motor);
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	f04f 0000 	mov.w	r0, #0
 8006932:	4619      	mov	r1, r3
 8006934:	f000 f84c 	bl	80069d0 <_Z13motorEnableCC9Direction5Motor>
			ccrVal = motor_width[motor];
 8006938:	79fa      	ldrb	r2, [r7, #7]
 800693a:	f240 7384 	movw	r3, #1924	; 0x784
 800693e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	81fb      	strh	r3, [r7, #14]
		}
		if(motor == Left){
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <_Z8motorPID5Motor+0x30c>
			TIM1->CCR1 = ccrVal;
 800694e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006952:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006956:	89fa      	ldrh	r2, [r7, #14]
 8006958:	869a      	strh	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = ccrVal;
 800695a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800695e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006962:	89fa      	ldrh	r2, [r7, #14]
 8006964:	871a      	strh	r2, [r3, #56]	; 0x38
 8006966:	e00c      	b.n	8006982 <_Z8motorPID5Motor+0x326>
		}
		else{
			TIM1->CCR3 = ccrVal;
 8006968:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800696c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006970:	89fa      	ldrh	r2, [r7, #14]
 8006972:	879a      	strh	r2, [r3, #60]	; 0x3c
			TIM1->CCR4 = ccrVal;
 8006974:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006978:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800697c:	89fa      	ldrh	r2, [r7, #14]
 800697e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		}
	}
}
 8006982:	f107 0710 	add.w	r7, r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bdb0      	pop	{r4, r5, r7, pc}
 800698a:	bf00      	nop
 800698c:	42480000 	.word	0x42480000
 8006990:	44a20000 	.word	0x44a20000
 8006994:	c4a20000 	.word	0xc4a20000

08006998 <_Z12motorReadEnc5Motor>:


uint16_t motorReadEnc(Motor motor){
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	71fb      	strb	r3, [r7, #7]
	if(motor == Left){
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <_Z12motorReadEnc5Motor+0x20>
		return TIM_GetCounter(TIM4);
 80069a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80069ac:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80069b0:	f7fd fe56 	bl	8004660 <TIM_GetCounter>
 80069b4:	4603      	mov	r3, r0
 80069b6:	e006      	b.n	80069c6 <_Z12motorReadEnc5Motor+0x2e>
	}
	else{
		return TIM_GetCounter(TIM3);
 80069b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80069bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80069c0:	f7fd fe4e 	bl	8004660 <TIM_GetCounter>
 80069c4:	4603      	mov	r3, r0
	}
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	f107 0708 	add.w	r7, r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <_Z13motorEnableCC9Direction5Motor>:
/**
 * Left fwd: OC1, bckwd: OC2N
 * Right fwd: OC4, bckwd: OC3N
 */

void motorEnableCC(Direction dir, Motor motor){
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	71fa      	strb	r2, [r7, #7]
 80069dc:	71bb      	strb	r3, [r7, #6]

	if(dir == Forward && motor == Left){
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d117      	bne.n	8006a14 <_Z13motorEnableCC9Direction5Motor+0x44>
 80069e4:	79bb      	ldrb	r3, [r7, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d114      	bne.n	8006a14 <_Z13motorEnableCC9Direction5Motor+0x44>
		uint16_t tmpccer = TIM1->CCER;
 80069ea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80069ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069f2:	8c1b      	ldrh	r3, [r3, #32]
 80069f4:	81fb      	strh	r3, [r7, #14]
		tmpccer &= ~(TIM_CCER_CC2NE);
 80069f6:	89fb      	ldrh	r3, [r7, #14]
 80069f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fc:	81fb      	strh	r3, [r7, #14]
		tmpccer |= TIM_CCER_CC1E;
 80069fe:	89fb      	ldrh	r3, [r7, #14]
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	81fb      	strh	r3, [r7, #14]
		TIM1->CCER = tmpccer;
 8006a06:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a0e:	89fa      	ldrh	r2, [r7, #14]
 8006a10:	841a      	strh	r2, [r3, #32]
 8006a12:	e04f      	b.n	8006ab4 <_Z13motorEnableCC9Direction5Motor+0xe4>
	}
	else if(dir == Backward && motor == Left){
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d117      	bne.n	8006a4a <_Z13motorEnableCC9Direction5Motor+0x7a>
 8006a1a:	79bb      	ldrb	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d114      	bne.n	8006a4a <_Z13motorEnableCC9Direction5Motor+0x7a>
		uint16_t tmpccer = TIM1->CCER;
 8006a20:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a28:	8c1b      	ldrh	r3, [r3, #32]
 8006a2a:	81bb      	strh	r3, [r7, #12]
		tmpccer &= ~(TIM_CCER_CC1E);
 8006a2c:	89bb      	ldrh	r3, [r7, #12]
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	81bb      	strh	r3, [r7, #12]
		tmpccer |= TIM_CCER_CC2NE;
 8006a34:	89bb      	ldrh	r3, [r7, #12]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	81bb      	strh	r3, [r7, #12]
		TIM1->CCER = tmpccer;
 8006a3c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a44:	89ba      	ldrh	r2, [r7, #12]
 8006a46:	841a      	strh	r2, [r3, #32]
 8006a48:	e034      	b.n	8006ab4 <_Z13motorEnableCC9Direction5Motor+0xe4>
	}
	else if(dir == Forward && motor == Right){
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d117      	bne.n	8006a80 <_Z13motorEnableCC9Direction5Motor+0xb0>
 8006a50:	79bb      	ldrb	r3, [r7, #6]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d114      	bne.n	8006a80 <_Z13motorEnableCC9Direction5Motor+0xb0>
		uint16_t tmpccer = TIM1->CCER;
 8006a56:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a5e:	8c1b      	ldrh	r3, [r3, #32]
 8006a60:	817b      	strh	r3, [r7, #10]
		tmpccer &= ~(TIM_CCER_CC3NE);
 8006a62:	897b      	ldrh	r3, [r7, #10]
 8006a64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a68:	817b      	strh	r3, [r7, #10]
		tmpccer |= TIM_CCER_CC4E;
 8006a6a:	897b      	ldrh	r3, [r7, #10]
 8006a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a70:	817b      	strh	r3, [r7, #10]
		TIM1->CCER = tmpccer;
 8006a72:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a7a:	897a      	ldrh	r2, [r7, #10]
 8006a7c:	841a      	strh	r2, [r3, #32]
 8006a7e:	e019      	b.n	8006ab4 <_Z13motorEnableCC9Direction5Motor+0xe4>
	}
	else if(dir == Backward && motor == Right){
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d116      	bne.n	8006ab4 <_Z13motorEnableCC9Direction5Motor+0xe4>
 8006a86:	79bb      	ldrb	r3, [r7, #6]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d113      	bne.n	8006ab4 <_Z13motorEnableCC9Direction5Motor+0xe4>
		uint16_t tmpccer = TIM1->CCER;
 8006a8c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006a90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a94:	8c1b      	ldrh	r3, [r3, #32]
 8006a96:	813b      	strh	r3, [r7, #8]
		tmpccer &= ~(TIM_CCER_CC4E);
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9e:	813b      	strh	r3, [r7, #8]
		tmpccer |= TIM_CCER_CC3NE;
 8006aa0:	893b      	ldrh	r3, [r7, #8]
 8006aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aa6:	813b      	strh	r3, [r7, #8]
		TIM1->CCER = tmpccer;
 8006aa8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006aac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006ab0:	893a      	ldrh	r2, [r7, #8]
 8006ab2:	841a      	strh	r2, [r3, #32]
	}
}
 8006ab4:	f107 0714 	add.w	r7, r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop

08006ac0 <TIM3_IRQHandler>:

extern "C" {

void TIM3_IRQHandler(void){
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8006ac4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006ac8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006acc:	f04f 0101 	mov.w	r1, #1
 8006ad0:	f7fd fe44 	bl	800475c <TIM_ClearITPendingBit>
	motorUpdate[Motor::Right] = true;
 8006ad4:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8006ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006adc:	f04f 0201 	mov.w	r2, #1
 8006ae0:	705a      	strb	r2, [r3, #1]
}
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8006ae8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006aec:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006af0:	f04f 0101 	mov.w	r1, #1
 8006af4:	f7fd fe32 	bl	800475c <TIM_ClearITPendingBit>
	motorUpdate[Motor::Left] = true;
 8006af8:	f240 73b0 	movw	r3, #1968	; 0x7b0
 8006afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b00:	f04f 0201 	mov.w	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
}
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
 8006b08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006b0a:	e003      	b.n	8006b14 <LoopCopyDataInit>

08006b0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8006b0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006b10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006b12:	3104      	adds	r1, #4

08006b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
 8006b14:	4809      	ldr	r0, [pc, #36]	; (8006b3c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8006b18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006b1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006b1c:	d3f6      	bcc.n	8006b0c <CopyDataInit>
	ldr	r2, =_sbss
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8006b20:	e002      	b.n	8006b28 <LoopFillZerobss>

08006b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
 8006b22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006b24:	f842 3b04 	str.w	r3, [r2], #4

08006b28 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8006b2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006b2c:	d3f9      	bcc.n	8006b22 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
 8006b2e:	f7fe f81b 	bl	8004b68 <SystemInit>
/* Call the application's entry point.*/
	bl	main
 8006b32:	f7ff fa79 	bl	8006028 <main>
	bx	lr    
 8006b36:	4770      	bx	lr
 8006b38:	08007108 	.word	0x08007108
 8006b3c:	20000000 	.word	0x20000000
 8006b40:	2000002c 	.word	0x2000002c
 8006b44:	2000002c 	.word	0x2000002c
 8006b48:	2000002c 	.word	0x2000002c

08006b4c <BusFault_Handler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b4c:	e7fe      	b.n	8006b4c <BusFault_Handler>
	...

08006b50 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8006b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	da10      	bge.n	8006b86 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8006b64:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006b68:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	f002 020f 	and.w	r2, r2, #15
 8006b72:	f1a2 0104 	sub.w	r1, r2, #4
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	185b      	adds	r3, r3, r1
 8006b82:	761a      	strb	r2, [r3, #24]
 8006b84:	e00d      	b.n	8006ba2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006b86:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8006b8a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006b8e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	185b      	adds	r3, r3, r1
 8006b9e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ba2:	f107 070c 	add.w	r7, r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d902      	bls.n	8006bc4 <SysTick_Config+0x18>
 8006bbe:	f04f 0301 	mov.w	r3, #1
 8006bc2:	e01f      	b.n	8006c04 <SysTick_Config+0x58>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8006bc4:	f24e 0310 	movw	r3, #57360	; 0xe010
 8006bc8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006bd2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006bd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	f04f 010f 	mov.w	r1, #15
 8006be0:	f7ff ffb6 	bl	8006b50 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8006be4:	f24e 0310 	movw	r3, #57360	; 0xe010
 8006be8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8006bf2:	f24e 0310 	movw	r3, #57360	; 0xe010
 8006bf6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006bfa:	f04f 0207 	mov.w	r2, #7
 8006bfe:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8006c00:	f04f 0300 	mov.w	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	f107 0708 	add.w	r7, r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <_Z7sysInitv>:
#include "lcd.h"

volatile unsigned int del;
volatile bool lcdEnable;

void sysInit(){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	lcdEnable = false;
 8006c14:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8006c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
	ledInit();
 8006c22:	f7ff f9b5 	bl	8005f90 <_Z7ledInitv>
	//ctrlInit();
	motorInit(1, 2, 0, 64*19);
 8006c26:	4810      	ldr	r0, [pc, #64]	; (8006c68 <_Z7sysInitv+0x58>)
 8006c28:	4910      	ldr	r1, [pc, #64]	; (8006c6c <_Z7sysInitv+0x5c>)
 8006c2a:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <_Z7sysInitv+0x60>)
 8006c2c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006c30:	f7ff fa66 	bl	8006100 <_Z9motorInitfffm>
	//adcInit();
	SysTick_Config(SystemCoreClock / SYS_freq);
 8006c34:	f240 0314 	movw	r3, #20
 8006c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8006c42:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8006c46:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff ffac 	bl	8006bac <SysTick_Config>
	LcdInit();
 8006c54:	f7fe fd00 	bl	8005658 <_Z7LcdInitv>
	lcdEnable = true;
 8006c58:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8006c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c60:	f04f 0201 	mov.w	r2, #1
 8006c64:	701a      	strb	r2, [r3, #0]
}
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	3f800000 	.word	0x3f800000
 8006c6c:	40000000 	.word	0x40000000
 8006c70:	00000000 	.word	0x00000000

08006c74 <_Z10sysDelayMsj>:

void sysDelayMs(unsigned int ms){
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	del = ms;
 8006c7c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8006c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]
	while(del > 0);
 8006c88:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8006c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bf0c      	ite	eq
 8006c96:	2300      	moveq	r3, #0
 8006c98:	2301      	movne	r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f3      	bne.n	8006c88 <_Z10sysDelayMsj+0x14>
}
 8006ca0:	f107 070c 	add.w	r7, r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop

08006cac <_Z5uitoamPch>:
		buffer[pos++] = (char)((((int)num) % 10) + 0x30);
	}
	return pos;
}

uint8_t uitoa(uint32_t num, char* buffer, uint8_t base){
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t pos = 0;
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	75fb      	strb	r3, [r7, #23]
	if(num == 0){
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d123      	bne.n	8006d0e <_Z5uitoamPch+0x62>
		buffer[pos++] = '0';
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	18d3      	adds	r3, r2, r3
 8006ccc:	f04f 0230 	mov.w	r2, #48	; 0x30
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	f103 0301 	add.w	r3, r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
		return pos;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	e04e      	b.n	8006d7c <_Z5uitoamPch+0xd0>
	}
	while(num > 0){
		buffer[pos++] = (char)(num % base + 0x30);
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	18d1      	adds	r1, r2, r3
 8006ce4:	79fa      	ldrb	r2, [r7, #7]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cec:	fb02 f200 	mul.w	r2, r2, r0
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	700b      	strb	r3, [r1, #0]
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	f103 0301 	add.w	r3, r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
		num /= base;
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
	uint8_t pos = 0;
	if(num == 0){
		buffer[pos++] = '0';
		return pos;
	}
	while(num > 0){
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf0c      	ite	eq
 8006d14:	2300      	moveq	r3, #0
 8006d16:	2301      	movne	r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1df      	bne.n	8006cde <_Z5uitoamPch+0x32>
		buffer[pos++] = (char)(num % base + 0x30);
		num /= base;
	}
	for(uint8_t i = 0; i < pos/2; i++){
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	75bb      	strb	r3, [r7, #22]
 8006d24:	e01d      	b.n	8006d62 <_Z5uitoamPch+0xb6>
		char tmp = buffer[i];
 8006d26:	7dbb      	ldrb	r3, [r7, #22]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	18d3      	adds	r3, r2, r3
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	757b      	strb	r3, [r7, #21]
		buffer[i] = buffer[pos - i - 1];
 8006d30:	7dbb      	ldrb	r3, [r7, #22]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	18d3      	adds	r3, r2, r3
 8006d36:	7df9      	ldrb	r1, [r7, #23]
 8006d38:	7dba      	ldrb	r2, [r7, #22]
 8006d3a:	1a8a      	subs	r2, r1, r2
 8006d3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	188a      	adds	r2, r1, r2
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	701a      	strb	r2, [r3, #0]
		buffer[pos - i - 1] = tmp;
 8006d48:	7dfa      	ldrb	r2, [r7, #23]
 8006d4a:	7dbb      	ldrb	r3, [r7, #22]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	18d3      	adds	r3, r2, r3
 8006d56:	7d7a      	ldrb	r2, [r7, #21]
 8006d58:	701a      	strb	r2, [r3, #0]
	}
	while(num > 0){
		buffer[pos++] = (char)(num % base + 0x30);
		num /= base;
	}
	for(uint8_t i = 0; i < pos/2; i++){
 8006d5a:	7dbb      	ldrb	r3, [r7, #22]
 8006d5c:	f103 0301 	add.w	r3, r3, #1
 8006d60:	75bb      	strb	r3, [r7, #22]
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	7dba      	ldrb	r2, [r7, #22]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	bf2c      	ite	cs
 8006d70:	2300      	movcs	r3, #0
 8006d72:	2301      	movcc	r3, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1d5      	bne.n	8006d26 <_Z5uitoamPch+0x7a>
		char tmp = buffer[i];
		buffer[i] = buffer[pos - i - 1];
		buffer[pos - i - 1] = tmp;
	}
	return pos;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f107 071c 	add.w	r7, r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <SysTick_Handler>:
	return 0;
}

extern "C" {

void SysTick_Handler(void){
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
	if(del != 0){
 8006d8c:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8006d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf0c      	ite	eq
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	2301      	movne	r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <SysTick_Handler+0x34>
		del--;
 8006da4:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8006da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f103 32ff 	add.w	r2, r3, #4294967295
 8006db2:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8006db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006dba:	601a      	str	r2, [r3, #0]
	}
	static uint16_t cnt = 0;
	/*if(cnt % (uint16_t)(SYS_freq/INFO_freq) == 0){
		ctrlSendInfo();
	}*/
	if(cnt % (uint16_t)(SYS_freq/PID_freq) == 0){
 8006dbc:	f240 73be 	movw	r3, #1982	; 0x7be
 8006dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006dc4:	881a      	ldrh	r2, [r3, #0]
 8006dc6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8006dca:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8006dce:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd2:	ea4f 1113 	mov.w	r1, r3, lsr #4
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006ddc:	185b      	adds	r3, r3, r1
 8006dde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d107      	bne.n	8006dfa <SysTick_Handler+0x72>
		motorPID(Left);
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	f7ff fc35 	bl	800665c <_Z8motorPID5Motor>
		motorPID(Right);
 8006df2:	f04f 0001 	mov.w	r0, #1
 8006df6:	f7ff fc31 	bl	800665c <_Z8motorPID5Motor>
	}
	/*if(cnt % (uint16_t)(SYS_freq/ADC_freq) == 0){
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
	}*/
	if(cnt % (uint16_t)(SYS_freq/PID_freq) == 0 && lcdEnable == true){
 8006dfa:	f240 73be 	movw	r3, #1982	; 0x7be
 8006dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8006e08:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	ea4f 1113 	mov.w	r1, r3, lsr #4
 8006e14:	460b      	mov	r3, r1
 8006e16:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006e1a:	185b      	adds	r3, r3, r1
 8006e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <SysTick_Handler+0xb6>
 8006e28:	f240 73bc 	movw	r3, #1980	; 0x7bc
 8006e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <SysTick_Handler+0xb6>
 8006e38:	f04f 0301 	mov.w	r3, #1
 8006e3c:	e001      	b.n	8006e42 <SysTick_Handler+0xba>
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <SysTick_Handler+0xc2>
		LcdUpdate();
 8006e46:	f7fe ff87 	bl	8005d58 <_Z9LcdUpdatev>
	}

	cnt++;
 8006e4a:	f240 73be 	movw	r3, #1982	; 0x7be
 8006e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	f103 0301 	add.w	r3, r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	f240 73be 	movw	r3, #1982	; 0x7be
 8006e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e62:	801a      	strh	r2, [r3, #0]
	cnt %= SYS_freq;
 8006e64:	f240 73be 	movw	r3, #1982	; 0x7be
 8006e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8006e72:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8006e76:	fba3 1302 	umull	r1, r3, r3, r2
 8006e7a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8006e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e82:	fb01 f303 	mul.w	r3, r1, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f240 73be 	movw	r3, #1982	; 0x7be
 8006e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e92:	801a      	strh	r2, [r3, #0]
}
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop

08006e98 <memset>:
 8006e98:	f010 0f03 	tst.w	r0, #3
 8006e9c:	b470      	push	{r4, r5, r6}
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	d03f      	beq.n	8006f22 <memset+0x8a>
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	d03b      	beq.n	8006f1e <memset+0x86>
 8006ea6:	b2cd      	uxtb	r5, r1
 8006ea8:	e001      	b.n	8006eae <memset+0x16>
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	d037      	beq.n	8006f1e <memset+0x86>
 8006eae:	f803 5b01 	strb.w	r5, [r3], #1
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	f013 0f03 	tst.w	r3, #3
 8006eb8:	461c      	mov	r4, r3
 8006eba:	d1f6      	bne.n	8006eaa <memset+0x12>
 8006ebc:	2a03      	cmp	r2, #3
 8006ebe:	d928      	bls.n	8006f12 <memset+0x7a>
 8006ec0:	b2cd      	uxtb	r5, r1
 8006ec2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006ec6:	2a0f      	cmp	r2, #15
 8006ec8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006ecc:	d913      	bls.n	8006ef6 <memset+0x5e>
 8006ece:	4623      	mov	r3, r4
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	3e10      	subs	r6, #16
 8006ed4:	601d      	str	r5, [r3, #0]
 8006ed6:	605d      	str	r5, [r3, #4]
 8006ed8:	609d      	str	r5, [r3, #8]
 8006eda:	60dd      	str	r5, [r3, #12]
 8006edc:	3310      	adds	r3, #16
 8006ede:	2e0f      	cmp	r6, #15
 8006ee0:	d8f7      	bhi.n	8006ed2 <memset+0x3a>
 8006ee2:	f1a2 0310 	sub.w	r3, r2, #16
 8006ee6:	f023 030f 	bic.w	r3, r3, #15
 8006eea:	f002 020f 	and.w	r2, r2, #15
 8006eee:	3310      	adds	r3, #16
 8006ef0:	2a03      	cmp	r2, #3
 8006ef2:	441c      	add	r4, r3
 8006ef4:	d90d      	bls.n	8006f12 <memset+0x7a>
 8006ef6:	4626      	mov	r6, r4
 8006ef8:	4613      	mov	r3, r2
 8006efa:	3b04      	subs	r3, #4
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	f846 5b04 	str.w	r5, [r6], #4
 8006f02:	d8fa      	bhi.n	8006efa <memset+0x62>
 8006f04:	1f13      	subs	r3, r2, #4
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	f002 0203 	and.w	r2, r2, #3
 8006f10:	18e4      	adds	r4, r4, r3
 8006f12:	b122      	cbz	r2, 8006f1e <memset+0x86>
 8006f14:	b2c9      	uxtb	r1, r1
 8006f16:	3a01      	subs	r2, #1
 8006f18:	f804 1b01 	strb.w	r1, [r4], #1
 8006f1c:	d1fb      	bne.n	8006f16 <memset+0x7e>
 8006f1e:	bc70      	pop	{r4, r5, r6}
 8006f20:	4770      	bx	lr
 8006f22:	4604      	mov	r4, r0
 8006f24:	e7ca      	b.n	8006ebc <memset+0x24>
 8006f26:	bf00      	nop
 8006f28:	6f636e45 	.word	0x6f636e45
 8006f2c:	3a726564 	.word	0x3a726564
 8006f30:	00000020 	.word	0x00000020
 8006f34:	4954202c 	.word	0x4954202c
 8006f38:	203a314d 	.word	0x203a314d
 8006f3c:	00000000 	.word	0x00000000

08006f40 <_ZL10FontLookup>:
 8006f40:	00000000 2f000000 07000000 14000700     ......./........
 8006f50:	147f147f 2a7f2a24 10c8c412 49364626     ....$*.*....&F6I
 8006f60:	00502255 00000305 41221c00 22410000     U"P......."A..A"
 8006f70:	0814001c 0814083e 08083e08 30500000     ....>....>....P0
 8006f80:	10101000 60001010 20000060 02040810     .......``.. ....
 8006f90:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
 8006fa0:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
 8006fb0:	01304949 03050971 49494936 49490636     II0.q...6III6.II
 8006fc0:	36001e29 00000036 00003656 41221408     )..66...V6...."A
 8006fd0:	14141400 41001414 02081422 06095101     .......A"....Q..
 8006fe0:	51594932 11117e3e 497f7e11 3e364949     2IYQ>~...~.III6>
 8006ff0:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
 8007000:	3e010909 7a494941 0808087f 7f41007f     ...>AIIz......A.
 8007010:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 8007020:	0c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 8007030:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
 8007040:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
 8007050:	3f1f2040 3f403840 14081463 70080763     @ .?@8@?c...c..p
 8007060:	51610708 00434549 0041417f 2a552a55     ..aQIEC..AA.U*U*
 8007070:	41410055 0204007f 40040201 40404040     U.AA.......@@@@@
 8007080:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
 8007090:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
 80070a0:	0c020109 3e525252 0404087f 7d440078     ....RRR>....x.D}
 80070b0:	40200040 7f003d44 00442810 407f4100     @. @D=...(D..A.@
 80070c0:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
 80070d0:	1414147c 14140808 087c7c18 48080404     |........||....H
 80070e0:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
 80070f0:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
 8007100:	64443c50 00444c54                       P<DdTLD.
